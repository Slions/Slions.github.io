<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://slions.github.io/atom.xml" rel="self"/>
  
  <link href="https://slions.github.io/"/>
  <updated>2024-04-07T14:49:57.340Z</updated>
  <id>https://slions.github.io/</id>
  
  <author>
    <name>Jingyu Shi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于改变</title>
    <link href="https://slions.github.io/2024/04/07/%E5%85%B3%E4%BA%8E%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>https://slions.github.io/2024/04/07/%E5%85%B3%E4%BA%8E%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</id>
    <published>2024-04-07T13:01:42.000Z</published>
    <updated>2024-04-07T14:49:57.340Z</updated>
    
    <content type="html"><![CDATA[<p>距离上一次发文到现在有一年多的时间了，期间有生活上的一些变化，也有工作上的一些变动，2023年我的年度关键词是“改变”，被动或者主动已经不重要了，今天主要想记录下来最近的一些感悟，以及对后面博客内容的一些规划。</p><blockquote><p>我的博客一般没什么人看，我也没在csdn或者掘金发文的习惯：<br>我不是学计算机的，看过很多技术大佬的文章，不论是从技术深度还是架构视野来说都遥遥领先，而我只是站在巨人的肩膀，所以博客的目的就是将日常感觉重要的技术点记录下来，方便下次遇到同样的问题来做参考，也逼自己多多总结和思考。</p></blockquote><h2 id="工作上"><a href="#工作上" class="headerlink" title="工作上"></a>工作上</h2><p>离开了工作了快6年的公司，原因是多方面的，一是公司在23年进行了组织架构调整，我所在的部门被整合了，虽然工作内容还是一样，但是明显感觉原来的领导被打压桎梏，下面的兄弟们惶惶终日，随着大量的同事主动离职，看着前些年都不够坐的工位空了一大片，感觉公司原先的那口“气”不在了。二是随着架构调整，研发类的工作被叫停了，每天也就是支持支持市场的问题，就这么轻松了几个月，感觉没什么意思，怕自己躺废。三是一些其他原因，这里也就不展开说了。<br>现在在一家大厂做sre，干了3个多月了，明显的感觉是：一、公司规章制度比较规范；二、工作压力和原先不是一个量级；三、分工明确，每个人面向okr“编程”等等。。。刚开始去的时候不太适应，因为业务场景和用户比之前大的多了，所以技术中用到的组件和技术点也变多了，花了一个多月看之前团队内整理的各种文档，第一次oncall时也是手忙脚乱的，希望后面能游刃有余一些了。</p><h2 id="生活上"><a href="#生活上" class="headerlink" title="生活上"></a>生活上</h2><p>换了住了3年的地方，又体会了一次搬家的痛，可太累了，断断续续折腾了一周，瘦了2斤，也算是减肥了（虽然我不需要减）。<br>2023年没怎么出差，自己的时间更多了。逛了不少地方，爬了香山，打卡了酒鬼地图，感受了不同国家的特色菜（虽然就在北京），也捡起了画笔（现在又扔了），认识新的朋友，送别回乡的人，这一年挺充实。<br>可能是年纪的原因，原来易瘦体质现在肚腩也越来越大了，嗨，真香。</p><h2 id="2024"><a href="#2024" class="headerlink" title="2024"></a>2024</h2><p>新一年，博客内容会可能多些生活感悟类的文章；技术类上会写写根据大厂稳定性建设或者技术架构方面的东西吧，毕竟这些内容是早就想总结的。</p><p>最后想说，向前走，莫停留，之前总是在等，等下次，等不忙，等有钱，可等的没了选择，就等来了遗憾，人间的面吃一碗少一碗，身边的人见一面少一面，脚下的路走一步少一步，人生是减法，来日并不方长。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;距离上一次发文到现在有一年多的时间了，期间有生活上的一些变化，也有工作上的一些变动，2023年我的年度关键词是“改变”，被动或者主动已经不重要了，今天主要想记录下来最近的一些感悟，以及对后面博客内容的一些规划。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我的博客一般没什么人看</summary>
      
    
    
    
    <category term="观点与感悟" scheme="https://slions.github.io/categories/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%82%9F/"/>
    
    
    <category term="观点与感悟" scheme="https://slions.github.io/tags/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>docker cgroups driver设置为systemd报错</title>
    <link href="https://slions.github.io/2023/02/02/docker%20cgroups%20driver%E8%AE%BE%E7%BD%AE%E4%B8%BAsystemd%E6%8A%A5%E9%94%99/"/>
    <id>https://slions.github.io/2023/02/02/docker%20cgroups%20driver%E8%AE%BE%E7%BD%AE%E4%B8%BAsystemd%E6%8A%A5%E9%94%99/</id>
    <published>2023-02-02T05:38:16.000Z</published>
    <updated>2023-02-12T03:15:32.845Z</updated>
    
    <content type="html"><![CDATA[<p>kubernetes官方建议将cgroup驱动设置为systemd来增强系统稳定性。</p><blockquote><p>当 systemd 是初始化系统时， 不推荐使用 cgroupfs 驱动，因为 systemd 期望系统上只有一个 cgroup 管理器。 此外，如果使用 cgroup v2， 则应用 systemd cgroup 驱动取代 cgroupfs。</p></blockquote><p>操作系统信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/os-release</span> </span><br><span class="line">NAME=&quot;Kylin Linux Advanced Server&quot;</span><br><span class="line">VERSION=&quot;V10 (Tercel)&quot;</span><br><span class="line">ID=&quot;kylin&quot;</span><br><span class="line">VERSION_ID=&quot;V10&quot;</span><br><span class="line">PRETTY_NAME=&quot;Kylin Linux Advanced Server V10 (Tercel)&quot;</span><br><span class="line">ANSI_COLOR=&quot;0;31&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> uname -r</span></span><br><span class="line">4.19.90-23.8.v2101.ky10.aarch64</span><br></pre></td></tr></table></figure><p>docker版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker version</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           19.03.4</span><br><span class="line"> API version:       1.40</span><br><span class="line"> Go version:        go1.12.10</span><br><span class="line"> Git commit:        9013bf5</span><br><span class="line"> Built:             Fir Oct  18 15:52:52 2019</span><br><span class="line"> OS/Arch:           linux/arm64</span><br><span class="line"> Experimental:      false</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          19.03.4</span><br><span class="line">  API version:      1.40 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.12.10</span><br><span class="line">  Git commit:       9013bf5</span><br><span class="line">  Built:            MFir Oct  18 15:51:29 2019</span><br><span class="line">  OS/Arch:          linux/arm64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.3.7</span><br><span class="line">  GitCommit:        8fba4e9a7d01810a393d5d25a3621dc101981175</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc3</span><br><span class="line">  GitCommit:        fabf83fd21f205c801571df4074024179eb03b44</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.18.0</span><br><span class="line">  GitCommit:        fec3683</span><br></pre></td></tr></table></figure><p>docker info:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker info</span></span><br><span class="line">Client:</span><br><span class="line"> Debug Mode: false</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Containers: 25</span><br><span class="line">  Running: 0</span><br><span class="line">  Paused: 0</span><br><span class="line">  Stopped: 25</span><br><span class="line"> Images: 22</span><br><span class="line"> Server Version: 19.03.4</span><br><span class="line"> Storage Driver: overlay2</span><br><span class="line">  Backing Filesystem: xfs</span><br><span class="line">  Supports d_type: true</span><br><span class="line">  Native Overlay Diff: true</span><br><span class="line"> Logging Driver: json-file</span><br><span class="line"> Cgroup Driver: systemd</span><br><span class="line"> Plugins:</span><br><span class="line">  Volume: local</span><br><span class="line">  Network: bridge host ipvlan macvlan null overlay</span><br><span class="line">  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog</span><br><span class="line"> Swarm: inactive</span><br><span class="line"> Runtimes: runc</span><br><span class="line"> Default Runtime: runc</span><br><span class="line"> Init Binary: docker-init</span><br><span class="line"> containerd version: 8fba4e9a7d01810a393d5d25a3621dc101981175</span><br><span class="line"> runc version: fabf83fd21f205c801571df4074024179eb03b44</span><br><span class="line"> init version: fec3683</span><br><span class="line"> Security Options:</span><br><span class="line">  seccomp</span><br><span class="line">   Profile: default</span><br><span class="line"> Kernel Version: 4.19.90-23.8.v2101.ky10.aarch64</span><br><span class="line"> Operating System: Kylin Linux Advanced Server V10 (Tercel)</span><br><span class="line"> OSType: linux</span><br><span class="line"> Architecture: aarch64</span><br><span class="line"> CPUs: 4</span><br><span class="line"> Total Memory: 7.647GiB</span><br><span class="line"> Name: sdb01</span><br><span class="line"> ID: GOQ4:YEDR:YKEZ:UT6V:TBSF:FAWG:H5HJ:RM74:BY6F:Q77D:CTGW:WDHR</span><br><span class="line"> Docker Root Dir: /data/docker</span><br><span class="line"> Debug Mode: false</span><br><span class="line"> Registry: https://index.docker.io/v1/</span><br><span class="line"> Labels:</span><br><span class="line"> Experimental: false</span><br><span class="line"> Insecure Registries:</span><br><span class="line">  192.9.42.51:9980</span><br><span class="line">  acaas-registry.agree:9980</span><br><span class="line">  127.0.0.0/8</span><br><span class="line"> Registry Mirrors:</span><br><span class="line">  https://acaas-registry.agree:9980/</span><br><span class="line"> Live Restore Enabled: false</span><br><span class="line"> Product License: Community Engine</span><br></pre></td></tr></table></figure><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p>在鲲鹏服务器上部署的docker，修改Cgroup Driver为systemd后无法启动容器，报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/docker/daemon.json</span> </span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker run -itd --name mynginx nginx:latest</span></span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: systemd cgroup flag passed, but systemd support for managing cgroups is not available: unknown.</span><br></pre></td></tr></table></figure><p>查阅相关文档，该报错是runc返回的<a href="https://github.com/opencontainers/runc/blob/69663f0bd4b60df09991c08812a60108003fa340/utils_linux.go#L42-L46">错误</a>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// We default to cgroupfs, and can only use systemd if the system is a</span></span><br><span class="line"><span class="comment">// systemd box.</span></span><br><span class="line">cgroupManager := libcontainer.Cgroupfs</span><br><span class="line"><span class="keyword">if</span> context.GlobalBool(<span class="string">&quot;systemd-cgroup&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> systemd.UseSystemd() &#123;</span><br><span class="line">cgroupManager = libcontainer.SystemdCgroups</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;systemd cgroup flag passed, but systemd support for managing cgroups is not available&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看默认安装的runc版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> runc --version</span></span><br><span class="line">runc version 1.0.0-rc3</span><br><span class="line">commit: fabf83fd21f205c801571df4074024179eb03b44</span><br><span class="line">spec: 1.0.0-rc5</span><br></pre></td></tr></table></figure><p>该版本比较低，查看github上runc的version release，runc在后续的几个版本中都在优化对systemd与cgroupfs的支持，替换为高版本的runc。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> runc --version</span></span><br><span class="line">runc version 1.0.0-rc10</span><br><span class="line">commit: dc9208a3303feef5b3839f4323d9beb36df0a9dd</span><br><span class="line">spec: 1.0.1-dev</span><br></pre></td></tr></table></figure><p>重启docker后容器可正常运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> systemctl daemon-reload</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl restart docker</span></span><br></pre></td></tr></table></figure><h1 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h1><p>kubelet对应的cgroup-driver修改为systemd。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/sysconfig/kubelet</span> </span><br><span class="line">KUBELET_EXTRA_ARGS=&quot;--cgroup-driver=systemd&quot;</span><br></pre></td></tr></table></figure><p>重启kubelet后发现pod无法启动，报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> kubectl describe pod -n default nginx-c21d979d6-dnwgv</span></span><br><span class="line">OCI message: &quot;process_linux.go:264: applying cgroup configuration for process caused \&quot;No such device or address\&quot;&quot;</span><br></pre></td></tr></table></figure><p>是由于当对存在正在运行的pod节点进行cgroup驱动变更时，是不支持的。<br>知道这一点后，后续的kubelet的变更操作改为了<br>01. 先移除该节点的pod<br>02. 记录该节点label,delete pod<br>03. reset pod<br>04. cgroup-driver变更，重启kubelet<br>05. join node,恢复原始label</p><p>高可用master节点的cgroup驱动变更操作为：<br>01. vip切换<br>02. 删除etcd中该节点的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ETCDCTL_API=3 etcdctl --endpoints 127.0.0.1:2379 --cacert /etc/kubernetes/pki/etcd/ca.crt --cert  /etc/kubernetes/pki/etcd/server.crt --key  /etc/kubernetes/pki/etcd/server.key endpoint status --cluster -w table</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ETCDCTL_API=3 etcdctl --endpoints 127.0.0.1:2379 --cacert /etc/kubernetes/pki/etcd/ca.crt --cert  /etc/kubernetes/pki/etcd/server.crt --key  /etc/kubernetes/pki/etcd/server.key member list</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ETCDCTL_API=3 etcdctl --endpoints 127.0.0.1:2379 --cacert /etc/kubernetes/pki/etcd/ca.crt --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key member remove xxxx</span></span><br></pre></td></tr></table></figure><ol start="3"><li>记录节点label，delete node</li><li>reset node</li><li>docker、kubelet变更cgroup- driver，重启服务</li><li>拷贝ca证书<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# scp /etc/kubernetes/pki/ca.crt k8s-master2:/etc/kubernetes/pki/</span><br><span class="line">[root@k8s-master1 ~]# scp /etc/kubernetes/pki/ca.key k8s-master2:/etc/kubernetes/pki/</span><br><span class="line">[root@k8s-master1 ~]# scp /etc/kubernetes/pki/sa.key k8s-master2:/etc/kubernetes/pki/</span><br><span class="line">[root@k8s-master1 ~]# scp /etc/kubernetes/pki/sa.pub k8s-master2:/etc/kubernetes/pki/</span><br><span class="line">[root@k8s-master1 ~]# scp /etc/kubernetes/pki/front-proxy-ca.crt k8s-master2:/etc/kubernetes/pki/</span><br><span class="line">[root@k8s-master1 ~]# scp /etc/kubernetes/pki/front-proxy-ca.key k8s-master2:/etc/kubernetes/pki/</span><br><span class="line">[root@k8s-master2 ~]# mkdir -p /etc/kubernetes/pki/etcd/</span><br><span class="line">[root@k8s-master1 ~]# scp /etc/kubernetes/pki/etcd/ca.crt k8s-master2:/etc/kubernetes/pki/etcd/</span><br><span class="line">[root@k8s-master1 ~]# scp /etc/kubernetes/pki/etcd/ca.key k8s-master2:/etc/kubernetes/pki/etcd/</span><br></pre></td></tr></table></figure></li><li>join master node，恢复节点label<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master2 ~]# kubeadm join xxx.xxx.xxx.xxx:8443 --token dsak.xasdkadasoqe2     --discovery-token-ca-cert-hash sha256:kdkasdksakdqlwelqkfeacd1efa36a9c5c71a897517d8fb6f6c9db8ee314  --control-plane</span><br></pre></td></tr></table></figure></li><li>启动vip</li></ol><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/#cgroup-drivers">https://kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/#cgroup-drivers</a></p><p><a href="https://github.com/moby/moby/issues/38753">https://github.com/moby/moby/issues/38753</a></p><p><a href="https://github.com/kubernetes/kubernetes/issues/114539">https://github.com/kubernetes/kubernetes/issues/114539</a></p><p><a href="https://github.com/cri-o/cri-o/issues/832">https://github.com/cri-o/cri-o/issues/832</a></p><p><a href="https://github.com/kubernetes/kubernetes/issues/98006">https://github.com/kubernetes/kubernetes/issues/98006</a></p><p><a href="https://blog.csdn.net/qq_15138049/article/details/122231353">https://blog.csdn.net/qq_15138049/article/details/122231353</a></p><p><a href="https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/kubeadm/configure-cgroup-driver/#%E8%BF%81%E7%A7%BB%E5%88%B0-systemd-%E9%A9%B1%E5%8A%A8">https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/kubeadm/configure-cgroup-driver/#%E8%BF%81%E7%A7%BB%E5%88%B0-systemd-%E9%A9%B1%E5%8A%A8</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;kubernetes官方建议将cgroup驱动设置为systemd来增强系统稳定性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当 systemd 是初始化系统时， 不推荐使用 cgroupfs 驱动，因为 systemd 期望系统上只有一个 cgroup 管理器。 此外，如</summary>
      
    
    
    
    <category term="docker" scheme="https://slions.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://slions.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>安装openshift记实</title>
    <link href="https://slions.github.io/2022/10/30/%E5%AE%89%E8%A3%85openshift%E8%AE%B0%E5%AE%9E/"/>
    <id>https://slions.github.io/2022/10/30/%E5%AE%89%E8%A3%85openshift%E8%AE%B0%E5%AE%9E/</id>
    <published>2022-10-30T06:11:18.000Z</published>
    <updated>2022-10-30T06:40:15.873Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近有个需求是公司产品对接openshift，调研了下openshift，其中第一步的安装还是比较费事的，查看Redhat官网的描述，虽然提供了openshift的多种安装方式，但这些方式对于机器的硬件要求还是比较高的，而且这些方式中最小部署也要3台。如果有docker版本是最好的，查看了dockerhub上openshift的相关资源，镜像都是多年前的了，后面终于找到了个单机部署的方式，使用<strong>OpenShift Local</strong>，这篇主要是记录下整体的搭建过程。</p></blockquote><h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><p>crc是redhat官方提供的最小化的安装工具，目前提供了linux（kvm）、mac（hyperKit）、windows（hyperV）的二进制包，不适用于生产使用。原理是通过crc会启动一个虚拟机，后续会在该虚机中启动openshift cluster，全程比较自动化，运行过程中所有的资源都是需要在线下载的，所以需要有网，运行crc的最低资源为4c，10g，磁盘大于35G，最重要的是机器需要开启虚拟化支持。</p><ul><li>登录 <a href="https://cloud.redhat.com/openshift/install/pull-secret">https://cloud.redhat.com/openshift/install/pull-secret</a> ，然后下载pull-secret到/root/目录下。</li><li>登录 <a href="https://console.redhat.com/openshift/create/local">https://console.redhat.com/openshift/create/local</a> ，下载 crc-linux-amd64.tar.xz解压后将crc执行文件放到script的同级目录。</li></ul><p>以下为script的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">!/bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.配置安装open <span class="built_in">shift</span></span></span><br><span class="line">export NAME_SERVER=192.168.100.10      ######执行前务必修改为虚机ip</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line">cp crc /usr/local/bin/ &amp;&amp; chmod +x /usr/local/bin/crc</span><br><span class="line"><span class="meta">#</span><span class="bash">cp pull-secret /root</span></span><br><span class="line"></span><br><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo_bak</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">groupadd libvirt</span><br><span class="line">useradd agree</span><br><span class="line">usermod -aG libvirt agree</span><br><span class="line"></span><br><span class="line">crc config set pull-secret-file /root/pull-secret</span><br><span class="line">crc config set skip-check-root-user true</span><br><span class="line">crc setup</span><br><span class="line">crc start</span><br><span class="line"></span><br><span class="line">echo export PATH=&quot;/root/.crc/bin/oc:$PATH&quot; &gt;&gt; /etc/profile</span><br><span class="line">eval $(crc oc-env)</span><br><span class="line">oc login -u developer https://api.crc.testing:6443</span><br><span class="line">oc config use-context crc-admin</span><br><span class="line"></span><br><span class="line">oc create clusterrolebinding test:anonymous --clusterrole=cluster-admin --user=system:anonymous</span><br><span class="line">export CRC_IP=192.168.130.11</span><br><span class="line">yum install -y haproxy</span><br><span class="line">cp /etc/haproxy/haproxy.cfg&#123;,.bak&#125; &amp;&gt;/dev/null</span><br><span class="line">tee /etc/haproxy/haproxy.cfg &amp;&gt;/dev/null &lt;&lt; EOF</span><br><span class="line">global</span><br><span class="line">    debug</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">    log global</span><br><span class="line">    mode http</span><br><span class="line">    timeout connect 5000</span><br><span class="line">    timeout client 500000</span><br><span class="line">    timeout server 500000</span><br><span class="line"></span><br><span class="line">frontend apps</span><br><span class="line">    bind 0.0.0.0:80</span><br><span class="line">    option tcplog</span><br><span class="line">    mode tcp</span><br><span class="line">    default_backend apps</span><br><span class="line"></span><br><span class="line">backend apps</span><br><span class="line">    mode tcp</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server webserver1 $&#123;CRC_IP&#125;:80 check</span><br><span class="line"></span><br><span class="line">frontend apps_ssl</span><br><span class="line">    bind 0.0.0.0:443</span><br><span class="line">    option tcplog</span><br><span class="line">    mode tcp</span><br><span class="line">    default_backend apps_ssl</span><br><span class="line"></span><br><span class="line">backend apps_ssl</span><br><span class="line">    mode tcp</span><br><span class="line">    balance roundrobin</span><br><span class="line">    option ssl-hello-chk</span><br><span class="line">    server webserver1 $&#123;CRC_IP&#125;:443 check</span><br><span class="line"></span><br><span class="line">frontend api</span><br><span class="line">    bind 0.0.0.0:6443</span><br><span class="line">    option tcplog</span><br><span class="line">    mode tcp</span><br><span class="line">    default_backend api</span><br><span class="line"></span><br><span class="line">backend api</span><br><span class="line">    mode tcp</span><br><span class="line">    balance roundrobin</span><br><span class="line">    option ssl-hello-chk</span><br><span class="line">    server webserver1 $&#123;CRC_IP&#125;:6443 check</span><br><span class="line">EOF</span><br><span class="line">systemctl restart haproxy</span><br><span class="line">systemctl enable haproxy</span><br><span class="line">yum -y install bind bind-utils</span><br><span class="line">systemctl enable named --now</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cp /etc/named.conf&#123;,_bak&#125;</span><br><span class="line">sed -i -e &quot;s/listen-on port.*/listen-on port 53 &#123; any; &#125;;/&quot; /etc/named.conf</span><br><span class="line">sed -i -e &quot;s/allow-query.*/allow-query &#123; any; &#125;;/&quot; /etc/named.conf</span><br><span class="line">sed -i &#x27;/recursion yes;/a \</span><br><span class="line">        forward first; \</span><br><span class="line">        forwarders &#123; 114.114.114.114; 8.8.8.8; &#125;;&#x27; /etc/named.conf</span><br><span class="line">sed -i -e &quot;s/dnssec-enable.*/dnssec-enable no;/&quot; /etc/named.conf</span><br><span class="line">sed -i -e &quot;s/dnssec-validation.*/dnssec-validation no;/&quot; /etc/named.conf </span><br><span class="line"> </span><br><span class="line">cat &gt;&gt; /etc/named.rfc1912.zones &lt;&lt; EOF</span><br><span class="line">zone &quot;crc.testing&quot; IN &#123;</span><br><span class="line">        type master;</span><br><span class="line">        file &quot;crc.testing.zone&quot;;</span><br><span class="line">        allow-update &#123; none; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone &quot;apps-crc.testing&quot; IN &#123;</span><br><span class="line">        type master;</span><br><span class="line">        file &quot;apps-crc.testing.zone&quot;;</span><br><span class="line">        allow-update &#123; none; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line">cat &gt; /var/named/crc.testing.zone &lt;&lt; EOF</span><br><span class="line">\$TTL 1D</span><br><span class="line">@       IN SOA  crc.testing. admin.crc.testing. (    </span><br><span class="line">                                        0       ; serial</span><br><span class="line">                                        1D      ; refresh</span><br><span class="line">                                        1H      ; retry </span><br><span class="line">                                        1W      ; expire</span><br><span class="line">                                        3H )    ; minimum</span><br><span class="line">        NS      ns.crc.testing.          </span><br><span class="line">*       IN A    $&#123;NAME_SERVER&#125;</span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line">cat &gt; /var/named/apps-crc.testing.zone &lt;&lt; EOF</span><br><span class="line">\$TTL 1D</span><br><span class="line">@       IN SOA  apps-crc.testing. admin.apps-crc.testing. (    </span><br><span class="line">                                        0       ; serial</span><br><span class="line">                                        1D      ; refresh</span><br><span class="line">                                        1H      ; retry </span><br><span class="line">                                        1W      ; expire</span><br><span class="line">                                        3H )    ; minimum</span><br><span class="line">        NS      ns.apps-crc.testing.          </span><br><span class="line">*       IN A    $&#123;NAME_SERVER&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl restart named</span><br></pre></td></tr></table></figure><h1 id="测试中的一些问题"><a href="#测试中的一些问题" class="headerlink" title="测试中的一些问题"></a>测试中的一些问题</h1><ul><li>使用centos图形化后，crc console管理端浏览器无法查看。</li><li>关闭crc实例后再次开启，或者是虚拟机重启后crc实例无法启动（重启前先关闭named服务）  </li><li>haproxy启动报错：Starting frontend api: cannot bind socket [0.0.0.0:6443]，执行命令：setsebool -P haproxy_connect_any=1</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/weixin_43902588/article/details/109571198">https://blog.csdn.net/weixin_43902588/article/details/109571198</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近有个需求是公司产品对接openshift，调研了下openshift，其中第一步的安装还是比较费事的，查看Redhat官网的描述，虽然提供了openshift的多种安装方式，但这些方式对于机器的硬件要求还是比较高的，而且这些方式中最小部署也要3</summary>
      
    
    
    
    <category term="kubernetes" scheme="https://slions.github.io/categories/kubernetes/"/>
    
    
    <category term="openshift" scheme="https://slions.github.io/tags/openshift/"/>
    
  </entry>
  
  <entry>
    <title>harbor2.4.2尝鲜</title>
    <link href="https://slions.github.io/2022/06/22/harbor2-4-2%E5%B0%9D%E9%B2%9C/"/>
    <id>https://slions.github.io/2022/06/22/harbor2-4-2%E5%B0%9D%E9%B2%9C/</id>
    <published>2022-06-22T13:06:50.000Z</published>
    <updated>2022-06-26T03:25:28.311Z</updated>
    
    <content type="html"><![CDATA[<p>根据harbor官方的描述，harbor高可用方案有以下几种：</p><ul><li>通过helm chart的方式部署于kubernetes中，以多副本的形式运行，借助k8s自愈性维护自身状态，通过pvc来存储数据，连接外置的PostgreSQL和Redis集群。</li><li>多个harbor实例共享PostgreSQL、Redis及存储，上层搭建负载均衡器。</li><li>harbor组件单独部署，基于复制策略实现Artifact的一致性，通过上层负载均衡器提供统一入口，PostgreSQL和Redis的数据一致性需要用户自己解决。</li></ul><p>可以看到第三种方式是最简单的，下面以第三种方式搭建harbor2.4.2环境。</p><h1 id="环境描述"><a href="#环境描述" class="headerlink" title="环境描述"></a>环境描述</h1><table><thead><tr><th>ip地址</th><th>系统版本</th><th>内核版本</th><th>cpu(C)</th><th>mem(G)</th><th>disk(GB)</th></tr></thead><tbody><tr><td>192.168.100.10</td><td>CentOS 7.6.1810</td><td>3.10.0-957.el7.x86_64</td><td>2</td><td>4</td><td>40</td></tr><tr><td>192.168.100.11</td><td>CentOS 7.6.1810</td><td>3.10.0-957.el7.x86_64</td><td>2</td><td>4</td><td>40</td></tr></tbody></table><h1 id="高可用部署"><a href="#高可用部署" class="headerlink" title="高可用部署"></a>高可用部署</h1><p>以下步骤在两台测试机器分别执行。</p><h2 id="基础环境准备"><a href="#基础环境准备" class="headerlink" title="基础环境准备"></a>基础环境准备</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl status firewalld</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop firewalld.service &amp;&amp; systemctl <span class="built_in">disable</span> firewalld.service</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> setenforce 0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed -i <span class="string">&#x27;s/^SELINUX=.*/SELINUX=disabled/g&#x27;</span> /etc/selinux/config</span></span><br></pre></td></tr></table></figure><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install docker-ce-19.03.4 docker-ce-cli-19.03.4</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir /etc/docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;graph&quot;: &quot;/home/docker&quot;,</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-size&quot;: &quot;50m&quot;,</span><br><span class="line">    &quot;max-file&quot;: &quot;3&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="string"> systemctl enable docker &amp;&amp; systemctl start docker</span></span></span><br></pre></td></tr></table></figure><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -SL https://github.com/docker/compose/releases/download/v2.4.0/docker-compose-linux-x86_64 -o /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br></pre></td></tr></table></figure><h2 id="安装harbor"><a href="#安装harbor" class="headerlink" title="安装harbor"></a>安装harbor</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://github.com/goharbor/harbor/releases/download/v2.4.2/harbor-offline-installer-v2.4.2.tgz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar zxvf harbor-offline-installer-v2.4.2.tgz</span></span><br></pre></td></tr></table></figure><h3 id="配置harbor"><a href="#配置harbor" class="headerlink" title="配置harbor"></a>配置harbor</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> harbor</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">common  common.sh  docker-compose.yml  harbor.v2.4.2.tar.gz  harbor.yml  install.sh  LICENSE  prepare</span><br><span class="line"><span class="meta">$</span><span class="bash"> cp harbor.yml.tmpl harbor.yml</span></span><br></pre></td></tr></table></figure><p>根据本地环境实际情况来修改harbor.yml文件。</p><p>https需要涉及到证书操作，暂时先将https部分注释掉，下面是对比原始文件修改的部分。</p><blockquote><p>hostname:处改成对应节点的ip地址</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> diff harbor.yml.tmpl harbor.yml</span></span><br><span class="line">5c5</span><br><span class="line">&lt; hostname: reg.mydomain.com</span><br><span class="line">---</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> hostname: 192.168.100.10</span></span><br><span class="line">13c13</span><br><span class="line">&lt; https:</span><br><span class="line">---</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment">#https:</span></span></span><br><span class="line">15c15</span><br><span class="line">&lt;   port: 443</span><br><span class="line">---</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment">#  port: 443</span></span></span><br><span class="line">17,18c17,18</span><br><span class="line">&lt;   certificate: /your/certificate/path</span><br><span class="line">&lt;   private_key: /your/private/key/path</span><br><span class="line">---</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment">#  certificate: /your/certificate/path</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment">#  private_key: /your/private/key/path</span></span></span><br><span class="line">34c34</span><br><span class="line">&lt; harbor_admin_password: Harbor12345</span><br><span class="line">---</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> harbor_admin_password: Slions123</span></span><br></pre></td></tr></table></figure><h3 id="安装harbor-1"><a href="#安装harbor-1" class="headerlink" title="安装harbor"></a>安装harbor</h3><p>执行<code>./prepare</code>，下载镜像，并根据harbor.yml生成docker-compose.yml文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./prepare</span></span><br></pre></td></tr></table></figure><blockquote><p>harbor离线包解压后，进入目录中看到的<code>harbor.v2.4.2.tar.gz</code>为对应组件的镜像，可提前通过docker load到本地。</p></blockquote><p>执行<code>./install.sh</code>进行安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./install.sh</span></span><br></pre></td></tr></table></figure><p>使用docker-compose ps 命令可以查看容器启动情况。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose ps</span></span><br><span class="line">NAME                COMMAND                  SERVICE             STATUS              PORTS</span><br><span class="line">harbor-core         &quot;/harbor/entrypoint.…&quot;   core                running (healthy)</span><br><span class="line">harbor-db           &quot;/docker-entrypoint.…&quot;   postgresql          running (healthy)</span><br><span class="line">harbor-jobservice   &quot;/harbor/entrypoint.…&quot;   jobservice          running (healthy)</span><br><span class="line">harbor-log          &quot;/bin/sh -c /usr/loc…&quot;   log                 running (healthy)   127.0.0.1:1514-&gt;10514/tcp</span><br><span class="line">harbor-portal       &quot;nginx -g &#x27;daemon of…&quot;   portal              running (healthy)</span><br><span class="line">nginx               &quot;nginx -g &#x27;daemon of…&quot;   proxy               running (healthy)   0.0.0.0:80-&gt;8080/tcp</span><br><span class="line">redis               &quot;redis-server /etc/r…&quot;   redis               running (healthy)</span><br><span class="line">registry            &quot;/home/harbor/entryp…&quot;   registry            running (healthy)</span><br><span class="line">registryctl         &quot;/home/harbor/start.…&quot;   registryctl         running (healthy)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>浏览器访问<u>http:&lt;$节点ip&gt;:80</u></p><p><img src="https://slions.gitee.io/picbed/img/harbor001.png"></p><h2 id="部署keepalived"><a href="#部署keepalived" class="headerlink" title="部署keepalived"></a>部署keepalived</h2><p>keepalived是一个高可用软件，通过VRRP协议来防止服务单点故障。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y keepalived</span></span><br></pre></td></tr></table></figure><p>按需编辑配置文件。</p><blockquote><p>此次测试中，keepalived并没有加检测harbor组件状态的脚本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/keepalived/keepalived.conf &lt;&lt;<span class="string">EOF</span></span></span><br><span class="line">global_defs &#123;</span><br><span class="line">  script_user root</span><br><span class="line">  enable_script_security</span><br><span class="line">  router_id lb_Harbor</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">  state BACKUP</span><br><span class="line">  nopreempt</span><br><span class="line">  interface ens33</span><br><span class="line">  virtual_router_id 51</span><br><span class="line">  priority 100</span><br><span class="line">  advert_int 1</span><br><span class="line">  authentication &#123;</span><br><span class="line">      auth_type PASS</span><br><span class="line">      auth_pass agree123</span><br><span class="line">  &#125;</span><br><span class="line">  virtual_ipaddress &#123;</span><br><span class="line">         192.168.100.100</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>启动<code>keepalived</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> keepalived &amp;&amp; systemctl start keepalived</span></span><br></pre></td></tr></table></figure><p>此时分别查看两台测试机的网卡信息，可以看到VIP已经绑定在了一个节点上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ip a|grep ens33</span></span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    inet 192.168.100.10/24 brd 192.168.100.255 scope global noprefixroute ens33</span><br><span class="line">    inet 192.168.100.100/32 scope global ens33</span><br></pre></td></tr></table></figure><h1 id="设置复制策略"><a href="#设置复制策略" class="headerlink" title="设置复制策略"></a>设置复制策略</h1><blockquote><p>由于 v2.0 版本中的主要 API 更改以支持<a href="https://github.com/opencontainers/distribution-spec">OCI</a>。您无法从 Harbor v1.x 复制到 v2.0 及更高版本，也无法将带有<strong>manifest list</strong>的artifacts 从 v2.0 及更高版本复制到 v1.x。</p></blockquote><h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><p>分别浏览器访问两台镜像仓库地址，<code>系统管理</code>-<code>仓库管理</code>-<code>新建目标</code>，填写目标镜像仓库信息。</p><p><img src="https://slions.gitee.io/picbed/img/harbor002.png"></p><h2 id="设置复制策略-1"><a href="#设置复制策略-1" class="headerlink" title="设置复制策略"></a>设置复制策略</h2><p><code>系统管理</code>-<code>复制管理</code>-<code>新建规则</code></p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>复制模式</td><td>支持主动推送和基于拉取策略</td></tr><tr><td>资源过滤器</td><td>支持基于tag和标签的过滤（匹配/排除），资源包括all、image、artifact</td></tr><tr><td>仓库扁平化</td><td>在复制image时支持处理image层次结构，可选择展平的级别</td></tr><tr><td>触发模式</td><td>手动（删除操作不会被复制）； 定时（通过定义 crontab定期复制资源，删除操作不会被复制） ；事件驱动（基于推送、重新标记和删除操作）</td></tr><tr><td>带宽</td><td>设置每个复制任务的最大网络带宽，须注意并发执行数，每个job-service pod默认值为10</td></tr></tbody></table><p><img src="https://slions.gitee.io/picbed/img/harbor003.png"></p><h2 id="测试过程与问题"><a href="#测试过程与问题" class="headerlink" title="测试过程与问题"></a>测试过程与问题</h2><p>测试的过程大致描述下，两个镜像仓库分别设置了基于<strong>事件驱动</strong>的复制策略：</p><p>推送一些镜像到其中一个节点，此时可以看到很快就同步到了另外一台；</p><p>推送一个较大的镜像，再推送的过程中进行VIP切换，此时推送的过程会中断，再次执行推送任务时可正常进行（测试时会有切换VIP再次推送镜像卡死现象，等待大概5分钟后可恢复）。</p><p>关闭其中一台镜像仓库节点，推送一些镜像（此时都存储在另一台），过段时间后恢复关闭的节点，此时查看复制任务都还处于失败的状态，并且任务都不会再次执行。须点击复制按钮触发任务来完成。</p><p>附上一些任务截图。</p><p><img src="https://slions.gitee.io/picbed/img/harbor004.png"></p><p><img src="https://slions.gitee.io/picbed/img/harbor005.png"></p><h1 id="垃圾清理"><a href="#垃圾清理" class="headerlink" title="垃圾清理"></a>垃圾清理</h1><p>最早之前harbor垃圾清理要在后台跑一个程序实现，当前已经集成到了页面上。</p><p><img src="https://slions.gitee.io/picbed/img/harbor006.png"></p><p>harbor提供了项目级别的<strong>tag保留策略</strong>，所有未标记的artifacts 都将被删除。</p><p><img src="https://slions.gitee.io/picbed/img/harbor007.png"></p><p>为避免损坏上传artifact，垃圾收集引入了一个时间窗口（2 小时）来保留最近上传的图层layers。垃圾收集不会扫描时间窗口中具有时间戳的清单和 blob 文件。目前并未提供修改该时间窗口的地方。</p><p>为了避免过于频繁地触发垃圾收集过程，<strong>GC Now</strong>按钮的可用性受到限制。垃圾收集每分钟只能运行一次。</p><h1 id="artifact"><a href="#artifact" class="headerlink" title="artifact"></a>artifact</h1><p>查阅官方文档时很多地方提到artifact，对比新老版本的界面也发现了其中的不同</p><p>旧版本（v1.4.0）</p><p><img src="https://slions.gitee.io/picbed/img/harbor008.png"></p><p><img src="https://slions.gitee.io/picbed/img/harbor009.png"></p><p>测试版本（v2.4.2）</p><p><img src="https://slions.gitee.io/picbed/img/harbor010.png"></p><p><img src="https://slions.gitee.io/picbed/img/harbor011.png"></p><p>可以看到artifacts和images的digests保持一致</p><p><img src="https://slions.gitee.io/picbed/img/harbor012.png"></p><p>点击artifact的详情查看如下</p><p><img src="https://slions.gitee.io/picbed/img/harbor013.png"></p><h1 id="测试过程中的问题"><a href="#测试过程中的问题" class="headerlink" title="测试过程中的问题"></a>测试过程中的问题</h1><p>因为测试是搭建了两个独立的harbor，镜像层面可以通过设置复制策略解决，虽然高版本中取消了之前的“即刻”模式，也就导致当一台机器异常后，直到恢复时的这段时间产生的镜像差异不会自动的同步，需要手动的重启下复制策略，或者是设置个基于定时任务的复制策略。</p><p>对于用户管理等功能是存储在数据库中的，低版本是mysql，高版本变为了postgreSQL，尝试同步两台镜像仓库的数据库来使用户管理等数据保持一致（暴力的方式直接同步宿主机上的PG数据目录），但此时会引发另一些问题：</p><p>页面上看到的数据都会被覆盖，比如复制策略被覆盖了，需要重新添加；项目下的镜像仓库、artifacts等被覆盖，此时推送镜像到一个镜像仓库，另一台镜像仓库的UI也会刷新该镜像的信息，导致即使配置了复制策略，也会运行失败。</p><p><img src="https://slions.gitee.io/picbed/img/harbor014.png"></p><p><img src="https://slions.gitee.io/picbed/img/harbor015.png"></p><p>从docker pull镜像流程可知，未在仓库中找到对应的manifest。</p><p><img src="https://slions.gitee.io/picbed/img/harbor111.png"></p><p><strong>高可用方案来说，多harbor实例连接外置redis与PostgreSQL集群，建立统一访问入口，挂载共享存储目前还是最稳定且推荐的做法。</strong></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://goharbor.io/docs/2.4.0/">https://goharbor.io/docs/2.4.0/</a></p><p><a href="https://blog.csdn.net/m0_57776598/article/details/123698967">https://blog.csdn.net/m0_57776598/article/details/123698967</a></p><p><a href="https://www.jianshu.com/p/fad6b6fb4599">https://www.jianshu.com/p/fad6b6fb4599</a></p><p><a href="https://github.com/opencontainers/image-spec/blob/main/manifest.md">https://github.com/opencontainers/image-spec/blob/main/manifest.md</a></p><p><a href="https://github.com/opencontainers/image-spec/blob/main/config.md">https://github.com/opencontainers/image-spec/blob/main/config.md</a></p><p><a href="https://github.com/helios741/myblog/blob/new/learn_go/src/2019/20191206_docker_disk_storage/README.md">https://github.com/helios741/myblog/blob/new/learn_go/src/2019/20191206_docker_disk_storage/README.md</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;根据harbor官方的描述，harbor高可用方案有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过helm chart的方式部署于kubernetes中，以多副本的形式运行，借助k8s自愈性维护自身状态，通过pvc来存储数据，连接外置的PostgreSQL和Redis集群。&lt;/</summary>
      
    
    
    
    <category term="镜像仓库" scheme="https://slions.github.io/categories/%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    
    
    <category term="harbor" scheme="https://slions.github.io/tags/harbor/"/>
    
  </entry>
  
  <entry>
    <title>关于k8s卷权限的一些测试</title>
    <link href="https://slions.github.io/2022/06/14/%E5%85%B3%E4%BA%8Ek8s%E5%8D%B7%E6%9D%83%E9%99%90%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B5%8B%E8%AF%95/"/>
    <id>https://slions.github.io/2022/06/14/%E5%85%B3%E4%BA%8Ek8s%E5%8D%B7%E6%9D%83%E9%99%90%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B5%8B%E8%AF%95/</id>
    <published>2022-06-14T07:19:18.000Z</published>
    <updated>2022-06-14T14:01:26.388Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Container中的文件在磁盘上是临时存放的，这会给Container中运行的较重要的应用程序带来问题，问题之一是当容器崩溃时文件丢失。 kubelet 会重新启动容器，但容器会以干净的状态重启。 第二个问题会在同一 <code>Pod</code> 中运行多个容器并共享文件时出现。 kubernetes的volume解决了该问题。</p><p>——kubernetes官方文档</p></blockquote><p>kubernetes支持多种类型的volume,其中较为常用的为<code>secret</code>、<code>emptyDir</code>、<code>condfigMap</code>、<code>hostPath</code>以及<code>persistentVolumeClaim</code>,使用场景与语法可通过k8s官网进行了解，本次旨在测试上述几种volume 权限的问题。</p><h1 id="环境描述："><a href="#环境描述：" class="headerlink" title="环境描述："></a>环境描述：</h1><h2 id="集群信息"><a href="#集群信息" class="headerlink" title="集群信息"></a>集群信息</h2><table><thead><tr><th>ip</th><th>系统版本</th><th>内核版本</th><th>硬件资源</th><th>k8s版本</th></tr></thead><tbody><tr><td>192.9.180.42</td><td>CentOS 7.5.1804</td><td>3.10.0-862.el7.x86_64</td><td>8c 16g</td><td>v1.17.0</td></tr></tbody></table><h2 id="服务镜像"><a href="#服务镜像" class="headerlink" title="服务镜像"></a>服务镜像</h2><p>Dockerfile:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> library/tomcat:<span class="number">7</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> groupadd -g 7295 slions &amp;&amp; useradd -g 7295 -u 7295 -d /slions slions</span></span><br><span class="line"><span class="keyword">USER</span> slions</span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">&quot;catalina.sh&quot;</span>,<span class="string">&quot;run&quot;</span>]</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /slions</span></span><br></pre></td></tr></table></figure><p>基于该Dockerfile构建tomcat:7-sjy3镜像供后续的实验服务使用。</p><h1 id="secret"><a href="#secret" class="headerlink" title="secret"></a>secret</h1><p><code>secret</code> 卷用来给 Pod 传递敏感信息，例如密码。<code>secret</code> 卷由 tmpfs（基于 RAM 的文件系统）提供存储，因此它们永远不会被写入持久化存储。</p><p>Secret:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">slions-secret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">c2xpb25z</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">c2xpb25zLWt1YmVybmV0ZXM=</span></span><br></pre></td></tr></table></figure><p>Deployment:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">generation:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">sjy</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sjy</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">progressDeadlineSeconds:</span> <span class="number">600</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">sjy</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">sjy</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">sjy</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_POD_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NODE_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">spec.nodeName</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">HOST_IP</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">status.hostIP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SERVICE_NAME</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">sjy</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">library/tomcat:7-sjy3</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">sjy</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">ll</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">500Mi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">200m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">200Mi</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">        <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/testsecret</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">test-secret</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default-image-secret</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-secret</span></span><br><span class="line">        <span class="attr">secret:</span></span><br><span class="line">          <span class="attr">secretName:</span> <span class="string">slions-secret</span></span><br></pre></td></tr></table></figure><p>分别创建上述的Secret与Deployment资源，进入Pod内，查看secret的权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods |grep sjy</span><br><span class="line">sjy-75896cb868-9qs6p                        1/1     Running   0          4m40s</span><br><span class="line">$ kubectl exec -it sjy-75896cb868-9qs6p bash</span><br><span class="line">slions@sjy-75896cb868-9qs6p:~$ ls -l /testsecret/</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 15 Jun 14 02:50 password -&gt; ..data/password</span><br><span class="line">lrwxrwxrwx 1 root root 15 Jun 14 02:50 username -&gt; ..data/username</span><br><span class="line">slions@sjy-75896cb868-9qs6p:~$ cat /proc/mounts |grep testsecret</span><br><span class="line">tmpfs /testsecret tmpfs ro,relatime 0 0</span><br></pre></td></tr></table></figure><p>当前secret属主属组都为root，且默认被设置为了只读。</p><p>将Deployment进行如下修改：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">   <span class="string">...</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="string">...</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">sjy</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/testsecret</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">test-secret</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line">      <span class="attr">securityContext:</span></span><br><span class="line">        <span class="attr">fsGroup:</span> <span class="number">7295</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-secret</span></span><br><span class="line">        <span class="attr">secret:</span></span><br><span class="line">          <span class="attr">secretName:</span> <span class="string">slions-secret</span></span><br></pre></td></tr></table></figure><blockquote><p>securityContext.fsGroup 是kubernetes提供的Pod安全策略的选项，符合条件的volume可被kubelet更改为指定的属组。</p></blockquote><p>更新Deployment，验证是否生效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">slions@sjy-658c5786f6-5879p:~$ ls -l /</span><br><span class="line">...</span><br><span class="line">drwxrwsrwt    3 root slions   120 Jun 14 02:57 testsecret</span><br><span class="line">drwxrwxrwt    1 root root      31 Jun 14 02:57 tmp</span><br><span class="line">drwxr-xr-x    1 root root      19 Oct 11  2018 usr</span><br><span class="line">drwxr-xr-x    1 root root      17 Oct 11  2018 var</span><br><span class="line">slions@sjy-658c5786f6-5879p:~$ ls -la /testsecret/</span><br><span class="line">total 0</span><br><span class="line">drwxrwsrwt 3 root slions 120 Jun 14 02:57 .</span><br><span class="line">drwxr-xr-x 1 root root    57 Jun 14 02:57 ..</span><br><span class="line">drwxr-sr-x 2 root slions  80 Jun 14 02:57 ..2022_06_14_02_57_40.151713228</span><br><span class="line">lrwxrwxrwx 1 root root    31 Jun 14 02:57 ..data -&gt; ..2022_06_14_02_57_40.151713228</span><br><span class="line">lrwxrwxrwx 1 root root    15 Jun 14 02:57 password -&gt; ..data/password</span><br><span class="line">lrwxrwxrwx 1 root root    15 Jun 14 02:57 username -&gt; ..data/username</span><br><span class="line">slions@sjy-658c5786f6-5879p:~$ ls -la /testsecret/..data/</span><br><span class="line">total 8</span><br><span class="line">drwxr-sr-x 2 root slions  80 Jun 14 02:57 .</span><br><span class="line">drwxrwsrwt 3 root slions 120 Jun 14 02:57 ..</span><br><span class="line">-rw-r--r-- 1 root slions  17 Jun 14 02:57 password</span><br><span class="line">-rw-r--r-- 1 root slions   6 Jun 14 02:57 username</span><br><span class="line">slions@sjy-658c5786f6-5879p:~$ cat /testsecret/username</span><br><span class="line">slions</span><br><span class="line">slions@sjy-658c5786f6-5879p:~$ cat /proc/mounts |grep testsecret</span><br><span class="line">tmpfs /testsecret tmpfs ro,relatime 0 0</span><br></pre></td></tr></table></figure><p>可以看到，secret volumes的属组虽然已经被修改为了普通用户的（slions）,但还是只读的状态。</p><p>再次修改Deployment声明，指定volume的权限，禁用只读。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">   <span class="string">...</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="string">...</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">sjy</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/testsecret</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">test-secret</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">false</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-secret</span></span><br><span class="line">        <span class="attr">secret:</span></span><br><span class="line">          <span class="attr">secretName:</span> <span class="string">slions-secret</span></span><br><span class="line">          <span class="attr">defaultMode:</span> <span class="number">0777</span></span><br></pre></td></tr></table></figure><p>更新后再次验证，依旧无法进行写入操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">slions@sjy-84fd8c4957-nbtzj:~$ echo &quot;aaaa&quot; &gt;&gt; /testsecret/password</span><br><span class="line">bash: /testsecret/password: Read-only file system</span><br><span class="line">slions@sjy-84fd8c4957-nbtzj:~$ cat /proc/mounts |grep testsecret</span><br><span class="line">tmpfs /testsecret tmpfs ro,relatime 0 0</span><br></pre></td></tr></table></figure><h1 id="emptyDir"><a href="#emptyDir" class="headerlink" title="emptyDir"></a>emptyDir</h1><p>当 Pod 分派到某个 Node 上时，<code>emptyDir</code> 卷会被创建，并且在 Pod 在该节点上运行期间，卷一直存在。尽管 Pod 中的容器挂载 <code>emptyDir</code> 卷的路径可能相同也可能不同，这些容器都可以读写 <code>emptyDir</code> 卷中相同的文件。 当 Pod 因为某些原因被从节点上删除时，<code>emptyDir</code> 卷中的数据也会被永久删除。</p><p>Deployment:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">generation:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">sjy</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sjy</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">progressDeadlineSeconds:</span> <span class="number">600</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">sjy</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">sjy</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">sjy</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_POD_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NODE_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">spec.nodeName</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">HOST_IP</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">status.hostIP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SERVICE_NAME</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">sjy</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">library/tomcat:7-sjy3</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">sjy</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">ll</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">500Mi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">200m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">200Mi</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">        <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/emptydir</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">empty</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default-image-secret</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">      <span class="attr">securityContext:</span></span><br><span class="line">        <span class="attr">fsGroup:</span> <span class="number">7295</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">name:</span> <span class="string">empty</span></span><br></pre></td></tr></table></figure><p>创建此Deployment，进入Pod验证<code>emptyDir</code>目录访问权限与属组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl exec -it sjy-6f845654bf-5d5rc bash</span><br><span class="line">slions@sjy-6f845654bf-5d5rc:~$ ls -l / |grep emptydir</span><br><span class="line">drwxrwsrwx    2 root slions     6 Jun 14 04:15 emptydir</span><br><span class="line">slions@sjy-6f845654bf-5d5rc:~$ echo &quot;abc&quot; &gt;&gt; /emptydir/testfile</span><br><span class="line">slions@sjy-6f845654bf-5d5rc:~$ ls -l /emptydir/</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 slions slions 4 Jun 14 05:25 testfile</span><br><span class="line">slions@sjy-6f845654bf-5d5rc:~$ cat /proc/mounts |grep emptydir</span><br><span class="line">/dev/mapper/centos-home /emptydir xfs rw,relatime,attr2,inode64,noquota 0 0</span><br></pre></td></tr></table></figure><p>设置了<code>securityContext.FsGroup</code>的服务，<code>emptyDir</code>属组被设置为了指定的组，且普通用户可以对其进行读写操作。</p><h1 id="configMap"><a href="#configMap" class="headerlink" title="configMap"></a>configMap</h1><p><code>configMap</code> 卷提供了向 Pod 注入配置数据的方法。 ConfigMap 对象中存储的数据可以被 <code>configMap</code> 类型的卷引用，然后被 Pod 中运行的容器化应用使用。(应用配置文件外置的常见做法)</p><p>Map:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">testfile:</span> <span class="string">|-</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    22</span></span><br><span class="line"><span class="string">    333</span></span><br><span class="line"><span class="string">    4444</span></span><br><span class="line"><span class="string">    55555</span></span><br><span class="line"><span class="string">    666666</span></span><br><span class="line"><span class="string">    222</span></span><br><span class="line"><span class="string"></span><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sjyconfig</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure><p>Deployment:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">generation:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">sjy</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sjy</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">progressDeadlineSeconds:</span> <span class="number">600</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">sjy</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">sjy</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">sjy</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_POD_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NODE_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">spec.nodeName</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">HOST_IP</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">status.hostIP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SERVICE_NAME</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">sjy</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">library/tomcat:7-sjy3</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">sjy</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">ll</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">500Mi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">200m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">200Mi</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">        <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/slions/test</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">configmap-volume-0-0</span></span><br><span class="line">          <span class="attr">subPath:</span> <span class="string">testfile</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default-image-secret</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">      <span class="attr">securityContext:</span></span><br><span class="line">        <span class="attr">fsGroup:</span> <span class="number">7295</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">items:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">testfile</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">testfile</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">sjyconfig</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">configmap-volume-0-0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分别创建上述的ConfigMap与Deployment资源，进入Pod内，查看ConfigMap volume的权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl exec -it sjy-6dc89b49bb-7kchg bash</span><br><span class="line">slions@sjy-6dc89b49bb-7kchg:~$ ls -l /slions/test</span><br><span class="line">-rw-r--r-- 1 root slions 30 Jun 14 05:50 /slions/test</span><br><span class="line">slions@sjy-6dc89b49bb-7kchg:~$ cat /slions/test</span><br><span class="line">1</span><br><span class="line">22</span><br><span class="line">333</span><br><span class="line">4444</span><br><span class="line">55555</span><br><span class="line">666666</span><br><span class="line">222slions@sjy-6dc89b49bb-7kchg:~$ echo &quot;abc&quot; &gt;&gt; /slions/test</span><br><span class="line">bash: /slions/test: Permission denied</span><br><span class="line">slions@sjy-6dc89b49bb-7kchg:~$ cat /proc/mounts |grep test</span><br><span class="line">/dev/mapper/centos-home /slions/test xfs ro,relatime,attr2,inode64,noquota 0 0</span><br></pre></td></tr></table></figure><p>与secret现象一致，设置fsgroup生效，但为只读状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe deployments.apps sjy</span><br><span class="line">Name:                   sjy</span><br><span class="line">Namespace:              default</span><br><span class="line">CreationTimestamp:      Tue, 14 Jun 2022 13:50:52 +0800</span><br><span class="line">Labels:                 app=sjy</span><br><span class="line">Annotations:            deployment.kubernetes.io/revision: 2</span><br><span class="line">                        kubectl.kubernetes.io/last-applied-configuration:</span><br><span class="line">                          &#123;&quot;apiVersion&quot;:&quot;apps/v1&quot;,&quot;kind&quot;:&quot;Deployment&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&#125;,&quot;generation&quot;:1,&quot;labels&quot;:&#123;&quot;app&quot;:&quot;sjy&quot;&#125;,&quot;name&quot;:&quot;sjy&quot;,&quot;namespace&quot;:&quot;d...</span><br><span class="line">Selector:               app=sjy</span><br><span class="line">Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable</span><br><span class="line">StrategyType:           RollingUpdate</span><br><span class="line">MinReadySeconds:        0</span><br><span class="line">RollingUpdateStrategy:  25% max unavailable, 25% max surge</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:       app=sjy</span><br><span class="line">  Annotations:  sidecar.istio.io/inject: false</span><br><span class="line">  Containers:</span><br><span class="line">   sjy:</span><br><span class="line">    Image:      library/tomcat:7-sjy3</span><br><span class="line">    Port:       80/TCP</span><br><span class="line">    Host Port:  0/TCP</span><br><span class="line">    Limits:</span><br><span class="line">      cpu:     500m</span><br><span class="line">      memory:  500Mi</span><br><span class="line">    Requests:</span><br><span class="line">      cpu:     200m</span><br><span class="line">      memory:  200Mi</span><br><span class="line">    Environment:</span><br><span class="line">      MY_POD_NAME:     (v1:metadata.name)</span><br><span class="line">      POD_NAMESPACE:   (v1:metadata.namespace)</span><br><span class="line">      NODE_NAME:       (v1:spec.nodeName)</span><br><span class="line">      POD_IP:          (v1:status.podIP)</span><br><span class="line">      HOST_IP:         (v1:status.hostIP)</span><br><span class="line">      SERVICE_NAME:   sjy</span><br><span class="line">    Mounts:</span><br><span class="line">      /slions/test from configmap-volume-0-0 (rw,path=&quot;testfile&quot;)</span><br><span class="line">  Volumes:</span><br><span class="line">   configmap-volume-0-0:</span><br><span class="line">    Type:      ConfigMap (a volume populated by a ConfigMap)</span><br><span class="line">    Name:      sjyconfig</span><br><span class="line">    Optional:  false</span><br><span class="line">Conditions:</span><br><span class="line">  Type           Status  Reason</span><br><span class="line">  ----           ------  ------</span><br><span class="line">  Available      True    MinimumReplicasAvailable</span><br><span class="line">  Progressing    True    NewReplicaSetAvailable</span><br><span class="line">OldReplicaSets:  &lt;none&gt;</span><br><span class="line">NewReplicaSet:   sjy-7bbd8cfb97 (1/1 replicas created)</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason             Age    From                   Message</span><br><span class="line">  ----    ------             ----   ----                   -------</span><br><span class="line">  Normal  ScalingReplicaSet  4m12s  deployment-controller  Scaled up replica set sjy-6dc89b49bb to 1</span><br><span class="line">  Normal  ScalingReplicaSet  119s   deployment-controller  Scaled up replica set sjy-7bbd8cfb97 to 1</span><br><span class="line">  Normal  ScalingReplicaSet  117s   deployment-controller  Scaled down replica set sjy-6dc89b49bb to 0</span><br></pre></td></tr></table></figure><p>查看deployment详情，configmap 挂载点显示rw，但实际并为生效。</p><h1 id="hostPath"><a href="#hostPath" class="headerlink" title="hostPath"></a>hostPath</h1><p><code>hostPath</code> 卷能将主机节点文件系统上的文件或目录挂载到 Pod 中。</p><p>Deployment:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">generation:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">sjy</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sjy</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">progressDeadlineSeconds:</span> <span class="number">600</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">sjy</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">sjy</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">sjy</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_POD_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NODE_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">spec.nodeName</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">HOST_IP</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">status.hostIP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SERVICE_NAME</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">sjy</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">library/tomcat:7-sjy3</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">sjy</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">ll</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">500Mi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">200m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">200Mi</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">        <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/hostPath</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">hostpath-volume-0</span></span><br><span class="line">          <span class="attr">subPathExpr:</span> <span class="string">$(POD_NAMESPACE)/$(SERVICE_NAME)/$(MY_POD_NAME)</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">nodeName:</span> <span class="string">kubemaster</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default-image-secret</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">      <span class="attr">securityContext:</span></span><br><span class="line">        <span class="attr">fsGroup:</span> <span class="number">7295</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/tmp/hostpathDir</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">hostpath-volume-0</span></span><br></pre></td></tr></table></figure><p>创建该Deployment，查看运行该Pod的宿主机的hostpath路径权限，都是root。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ls -lR /tmp/hostpathDir/</span><br><span class="line">/tmp/hostpathDir/:</span><br><span class="line">总用量 0</span><br><span class="line">drwxr-xr-x 3 root root 17 6月  14 14:10 default</span><br><span class="line"></span><br><span class="line">/tmp/hostpathDir/default:</span><br><span class="line">总用量 0</span><br><span class="line">drwxr-xr-x 3 root root 34 6月  14 14:10 sjy</span><br><span class="line"></span><br><span class="line">/tmp/hostpathDir/default/sjy:</span><br><span class="line">总用量 0</span><br><span class="line">drwxr-xr-x 2 root root 6 6月  14 14:10 sjy-78d4cc59c5-txhbh</span><br><span class="line"></span><br><span class="line">/tmp/hostpathDir/default/sjy/sjy-78d4cc59c5-txhbh:</span><br><span class="line">总用量 0</span><br></pre></td></tr></table></figure><p>进入该pods内的查看对应目录权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl exec -it sjy-78d4cc59c5-txhbh bash</span><br><span class="line">slions@sjy-78d4cc59c5-txhbh:~$ ls -l / |grep host</span><br><span class="line">drwxr-xr-x   2 root root    6 Jun 14 06:10 hostPath</span><br><span class="line">slions@sjy-78d4cc59c5-txhbh:~$ echo &quot;abc&quot; &gt;&gt; /hostPath/testfile</span><br><span class="line">bash: /hostPath/testfile: Permission denied</span><br></pre></td></tr></table></figure><p>可以看到hostPath volume的属主属组都为root，普通用户无法进行读写操作。设置了<code>securityContext.FsGroup</code>对hostPath类型的volume并不生效。</p><p>官方并没有提供修改hostPath目录权限的方式，从hostPath的实现方式可知道，要想修改hostPath volume的属主属组，要提前修改宿主机对应的源目录权限，所以可采用曲线救国的方式来达到目的。</p><p>其中会使用inotify工具来实时监听宿主机目录，当有创建新目录动作时执行chown操作，将宿主机hostPath路径赋权为指定的应用用户。</p><blockquote><p>inotify 是linux内核的一个特性，在内核 2.6.13 以上都可以使用。主要的功能是监听文件的变化。</p></blockquote><p>首先在宿主机上创建应用用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd -g 7295 slions &amp;&amp; sudo useradd -u 7295 -g 7295 slions &amp;&amp;  echo &quot;slions:slions&quot; |sudo  chpasswd</span><br></pre></td></tr></table></figure><p>安装inotify软件包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install inotify-tools</span><br></pre></td></tr></table></figure><p>编写监听脚本：（根据实际环境修改Dir与OwnerUser）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat changehpowner.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">Dir=/tmp/hostpathDir</span><br><span class="line">OwnerUser=slions</span><br><span class="line">inotifywait -mrq  --format &#x27;%e %w%f&#x27; -e create $Dir | while read msg</span><br><span class="line">do</span><br><span class="line">    if [[ $msg =~ &quot;CREATE,ISDIR&quot; ]]</span><br><span class="line">    then</span><br><span class="line">        sudo chown -R $OwnerUser:$OwnerUser &quot;$&#123;msg:13&#125;&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line">$ chmod +x  /home/user/shijingyu/hpowner/changehpowner.sh</span><br></pre></td></tr></table></figure><p>编写systemd service:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ cat /usr/lib/systemd/system/changehpowner.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Change the owner of the host directory</span><br><span class="line">After=default.target</span><br><span class="line">Before=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/bin/bash /home/user/shijingyu/hpowner/changehpowner.sh</span><br><span class="line">ExecStop=/bin/kill -s HUP $MAINPID</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>设置开机自启并启动服务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl enable changehpowner.service</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/changehpowner.service to /usr/lib/systemd/system/changehpowner.service.</span><br><span class="line">$ sudo systemctl restart changehpowner.service</span><br></pre></td></tr></table></figure><p>重启之前的Deployment，进行验证：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl exec -it sjy-78d4cc59c5-fcwgq bash</span><br><span class="line">slions@sjy-78d4cc59c5-fcwgq:~$ ls -l / |grep host</span><br><span class="line">drwxr-xr-x   2 slions slions    6 Jun 14 06:34 hostPath</span><br><span class="line">slions@sjy-78d4cc59c5-fcwgq:~$ echo &quot;abc&quot; &gt;&gt; /hostPath/testfile</span><br><span class="line">slions@sjy-78d4cc59c5-fcwgq:~$ ls /hostPath/</span><br><span class="line">testfile</span><br><span class="line">slions@sjy-78d4cc59c5-fcwgq:~$ ls -l /hostPath/</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 slions slions 4 Jun 14 06:35 testfile</span><br><span class="line">slions@sjy-78d4cc59c5-fcwgq:~$ exit</span><br><span class="line">exit</span><br><span class="line">$ ls -lR /tmp/hostpathDir/</span><br><span class="line">/tmp/hostpathDir/:</span><br><span class="line">总用量 0</span><br><span class="line">drwxr-xr-x 3 slions slions 17 6月  14 14:34 default</span><br><span class="line"></span><br><span class="line">/tmp/hostpathDir/default:</span><br><span class="line">总用量 0</span><br><span class="line">drwxr-xr-x 3 slions slions 34 6月  14 14:34 sjy</span><br><span class="line"></span><br><span class="line">/tmp/hostpathDir/default/sjy:</span><br><span class="line">总用量 0</span><br><span class="line">drwxr-xr-x 2 slions slions 22 6月  14 14:35 sjy-78d4cc59c5-fcwgq</span><br><span class="line"></span><br><span class="line">/tmp/hostpathDir/default/sjy/sjy-78d4cc59c5-fcwgq:</span><br><span class="line">总用量 4</span><br><span class="line">-rw-r--r-- 1 slions slions 4 6月  14 14:35 testfile</span><br></pre></td></tr></table></figure><p>可以看到，此时普通用户可对hostPath volume进行读写操作。</p><h1 id="persistentVolumeClaim"><a href="#persistentVolumeClaim" class="headerlink" title="persistentVolumeClaim"></a>persistentVolumeClaim</h1><p><code>persistentVolumeClaim</code> 卷用来将持久卷（PersistentVolume）挂载到 Pod 中。 </p><p>pvc:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="string">pvc</span> <span class="string">sjydemo-default-pvc</span> <span class="string">-o</span> <span class="string">yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">pv.kubernetes.io/bind-completed:</span> <span class="string">&quot;yes&quot;</span></span><br><span class="line">    <span class="attr">pv.kubernetes.io/bound-by-controller:</span> <span class="string">&quot;yes&quot;</span></span><br><span class="line">    <span class="attr">volume.beta.kubernetes.io/storage-provisioner:</span> <span class="string">kubernetes.io/glusterfs</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="string">&quot;2022-06-14T07:08:07Z&quot;</span></span><br><span class="line">  <span class="attr">finalizers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">kubernetes.io/pvc-protection</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">agree-app-type:</span> <span class="string">agree-pvc</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sjydemo-default-pvc</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">&quot;210865311&quot;</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/api/v1/namespaces/default/persistentvolumeclaims/sjydemo-default-pvc</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">26acc08d-fb9e-401c-9d2d-eaaa4c56754d</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">gluster-heketi</span></span><br><span class="line">  <span class="attr">volumeMode:</span> <span class="string">Filesystem</span></span><br><span class="line">  <span class="attr">volumeName:</span> <span class="string">pvc-26acc08d-fb9e-401c-9d2d-eaaa4c56754d</span></span><br></pre></td></tr></table></figure><p>Deployment:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">generation:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">sjy</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sjy</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">progressDeadlineSeconds:</span> <span class="number">600</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">sjy</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">sjy</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">sjy</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_POD_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NODE_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">spec.nodeName</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">HOST_IP</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">status.hostIP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SERVICE_NAME</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">sjy</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">library/tomcat:7-sjy3</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">sjy</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">ll</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">500Mi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">200m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">200Mi</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">        <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/slions/mypv</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">sjydemo-default-pvc</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default-image-secret</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">      <span class="attr">securityContext:</span></span><br><span class="line">        <span class="attr">fsGroup:</span> <span class="number">7295</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sjydemo-default-pvc</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">          <span class="attr">claimName:</span> <span class="string">sjydemo-default-pvc</span></span><br></pre></td></tr></table></figure><p>创建pvc与Deployment资源后进入Pod，查看挂载目录权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl exec sjy-b746f9cb8-8r85f -it bash</span><br><span class="line">slions@sjy-b746f9cb8-8r85f:~$ ls -l /slions/</span><br><span class="line">total 0</span><br><span class="line">drwxrwsr-x 3 root 2060 24 Jun 14 07:08 mypv</span><br><span class="line">slions@sjy-b746f9cb8-8r85f:~$ echo &quot;abc&quot; &gt;&gt; /slions/mypv/testfile</span><br><span class="line">slions@sjy-b746f9cb8-8r85f:~$ cat /slions/mypv/testfile</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><p>可以看到，设置了<code>securityContext.FsGroup</code>对Pvc类型的volume并不生效。</p><p>kubernetes pvc只是资源的声明，对于pv卷的权限交给了具体的存储供应商，如果想要赋予pvc volume普通用户的权限，提供两种思路：</p><p>一是可通过init容器实现，在启动应用服务前完成目录赋权操作。</p><p>样例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">generation:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">sjy</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sjy</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">progressDeadlineSeconds:</span> <span class="number">600</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">sjy</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">sidecar.istio.io/inject:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">sjy</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">sjy</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_POD_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NODE_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">spec.nodeName</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">HOST_IP</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">status.hostIP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SERVICE_NAME</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">sjy</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">library/tomcat:7-sjy3</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">sjy</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">ll</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">500Mi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">200m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">200Mi</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">        <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/slions/mypv</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">sjydemo-default-pvc</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/bin/chown</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-R</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">7295</span><span class="string">:7295</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/slions/mypv</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">library/busybox:1.29.3</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">change-ownership-container</span></span><br><span class="line">        <span class="attr">resources:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">runAsUser:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">        <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/slions/mypv</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">sjydemo-default-pvc</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default-image-secret</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sjydemo-default-pvc</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">          <span class="attr">claimName:</span> <span class="string">sjydemo-default-pvc</span></span><br></pre></td></tr></table></figure><p>创建后进入Pod内查看，普通用户可实现正常读写。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl exec -it sjy-6f69f5b786-frnvr bash</span><br><span class="line">slions@sjy-6f69f5b786-frnvr:~$ ls -l /slions/</span><br><span class="line">total 0</span><br><span class="line">drwxrwsr-x 3 slions slions 40 Jun 14 07:10 mypv</span><br><span class="line">slions@sjy-6f69f5b786-frnvr:~$ ls -l /slions/mypv/</span><br><span class="line">total 1</span><br><span class="line">-rw-r--r-- 1 slions slions 4 Jun 14 07:10 testfile</span><br></pre></td></tr></table></figure><p>第二种可以在应用运行cmd出下文章，在执行应用进程前执行服务操作，或者是写在运行脚本中。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table><thead><tr><th>volume类型</th><th>支持fsGroup</th><th>普通用户是否可读写</th></tr></thead><tbody><tr><td>secret</td><td>√</td><td>只读</td></tr><tr><td>emptyDir</td><td>√</td><td>√</td></tr><tr><td>configMap</td><td>√</td><td>只读</td></tr><tr><td>hostPath</td><td>×</td><td>×</td></tr><tr><td>persistentVolumeClaim</td><td>×</td><td>×</td></tr></tbody></table><p>从表中可看出，emptyDir支持fsGroup且普通用户可对其读写；secret大量用于密钥存储，不支持普通用户写操作；configMap在kubernetes 1.9.4版本之前允许普通用户写操作，但系统会以任意时间间隔恢复这些更改，在后续的版本中取消了该功能，通过上面的测试可发现，当明确定义了volumeMount的readOnly为false，k8s也会置为只读挂载；hostPath目录的权限由宿主机的源路径决定，可以使用linux 监听程序来自动化完成hostPath目录的赋权；pvc的目录赋权操作交给了存储提供商，我们可以利用初始化容器或者修改应用cmd来实现目的。</p><p>kubernetes在1.18版本添加了<code>ConfigurableFSGroupPolicy</code>的特性。</p><p><img src="https://slions.gitee.io/picbed/img/fsgroup.png"></p><p>使用1.22.8版本开启该特性后，secret、configMap、hostPath与上表测试结果一致。</p><img src="https://slions.gitee.io/picbed/img/fsgroup2.png"/><p>根据官方描述，高版本开启该特性后，securityContext支持<code>fsGroupChangePolicy</code> 字段，主要解决的是csi卷在设置了fsGroup时，递归地更改每个卷中的内容的属主和访问权限的效率问题。</p><img src="https://slions.gitee.io/picbed/img/fsgroup3.png"/>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Container中的文件在磁盘上是临时存放的，这会给Container中运行的较重要的应用程序带来问题，问题之一是当容器崩溃时文件丢失。 kubelet 会重新启动容器，但容器会以干净的状态重启。 第二个问题会在同一 &lt;code&gt;Pod&lt;/cod</summary>
      
    
    
    
    <category term="k8s存储" scheme="https://slions.github.io/categories/k8s%E5%AD%98%E5%82%A8/"/>
    
    
    <category term="kubernetes storage" scheme="https://slions.github.io/tags/kubernetes-storage/"/>
    
  </entry>
  
  <entry>
    <title>k8s证书机制</title>
    <link href="https://slions.github.io/2022/04/16/k8s%E8%AF%81%E4%B9%A6%E6%9C%BA%E5%88%B6/"/>
    <id>https://slions.github.io/2022/04/16/k8s%E8%AF%81%E4%B9%A6%E6%9C%BA%E5%88%B6/</id>
    <published>2022-04-16T09:27:01.000Z</published>
    <updated>2022-04-16T10:31:26.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="k8s组件的认证方式"><a href="#k8s组件的认证方式" class="headerlink" title="k8s组件的认证方式"></a>k8s组件的认证方式</h1><p>k8s各个组件会相互进行远程调用，例如 <code>kube-apiserver </code>会调用 etcd 接口存储数据，<code>kube-controllermanager</code> 会调用 <code>kube-apiserver </code>接口查询集群中的对象状态；同时<code>kube-apiserver</code> 也会和在工作节点上的<code>kubelet</code>和 <code>kube-proxy </code>进行通信，以在工作节点上部署和管理应用。</p><p>以上这些组件之间的相互调用都是通过网络进行的。在进行网络通信时，通信双方需要验证对方的身份，以避免恶意第三方伪造身份窃取信息或者对系统进行攻击。为了相互验证对方的身份，通信双方中的任何一方都需要验证对端的合法性。</p><p>k8s里使用数字证书来提供身份证明，为了保证证书的权威性，会采用通信双方都信任的CA机构颁发，另外各组件之间进行通信时，数字证书的验证是通过 TLS 完成的，除了需要在建立通信时提供相关的证书和密钥外，在应用层面并不需要进行特殊处理。</p><p>在 Kubernetes 中，各个组件提供的接口中包含了集群的内部信息。如果这些接口被非法访问，将影响集群的安全，因此组件之间的通信需要采用双向 TLS 认证。即客户端和服务器端都需要验证对方的身份信息。在两个组件进行双向认证时，会涉及到下面这些证书相关的文件：</p><ul><li>服务器端证书：服务器用于证明自身身份的数字证书，里面主要包含了服务器端的公钥以及服务器的身份信息。</li><li>服务器端私钥：服务器端证书中包含的公钥所对应的私钥。公钥和私钥是成对使用的，在进行 TLS 验证时，服务器使用该私钥来向客户端证明自己是服务器端证书的拥有者。</li><li>客户端证书：客户端用于证明自身身份的数字证书，里面主要包含了客户端的公钥以及客户端的身份信息。</li><li>客户端私钥：客户端证书中包含的公钥所对应的私钥，同理，客户端使用该私钥来向服务器端证明自己是客户端证书的拥有者。</li><li>服务器端 CA 根证书：签发服务器端证书的 CA 根证书，客户端使用该 CA 根证书来验证服务器端证书的合法性。</li><li>客户端端 CA 根证书：签发客户端证书的 CA 根证书，服务器端使用该 CA 根证书来验证客户端证书的合法性。</li></ul><h1 id="K8s中使用到的CA和证书"><a href="#K8s中使用到的CA和证书" class="headerlink" title="K8s中使用到的CA和证书"></a>K8s中使用到的CA和证书</h1><p>下图标识出了在 kubernetes 中主要使用到的证书和其使用的位置：</p><img src="https://slions.gitee.io/picbed/img/cert1.jpg"/><p>上图中使用序号对证书进行了标注。图中的箭头表明了组件的调用方向，箭头所指方向为服务提供方，另一头为服务调用方。为了实现 TLS 双向认证，服务提供方需要使用一个服务器证书，服务调用方则需要提供一个客户端证书，并且双方都需要使用一个 CA 证书来验证对方提供的证书。为了简明起见，上图中只标注了证书使用方提供的证书，并没有标注证书的验证方验证使用的 CA 证书。图中标注的这些证书的作用分别如下：</p><ol><li>etcd 集群中各个节点之间相互通信使用的证书。由于一个 etctd 节点既为其他节点提供服务，又需要作为客户端访问其他节点，因此该证书同时用作服务器证书和客户端证书。</li><li>etcd 集群向外提供服务使用的证书。该证书是服务器证书。</li><li>kube-apiserver 作为客户端访问 etcd 使用的证书。该证书是客户端证书。</li><li>kube-apiserver 对外提供服务使用的证书。该证书是服务器证书。</li><li>kube-controller-manager 作为客户端访问 kube-apiserver 使用的证书，该证书是客户端证书。</li><li>kube-scheduler 作为客户端访问 kube-apiserver 使用的证书，该证书是客户端证书。</li><li>kube-proxy 作为客户端访问 kube-apiserver 使用的证书，该证书是客户端证书。</li><li>kubelet 作为客户端访问 kube-apiserver 使用的证书，该证书是客户端证书。</li><li>管理员用户通过 kubectl 访问 kube-apiserver 使用的证书，该证书是客户端证书。</li><li>kubelet 对外提供服务使用的证书。该证书是服务器证书。</li><li>kube-apiserver 作为客户端访问 kubelet 采用的证书。该证书是客户端证书。</li><li>kube-controller-manager 用于生成和验证 service-account token 的证书。该证书并不会像其他证书一样用于身份认证，而是将证书中的公钥/私钥对用于 service account token 的生成和验证。kube-controller-manager 会用该证书的私钥来生成 service account token，然后以 secret 的方式加载到 pod 中。pod 中的应用可以使用该 token 来访问 kube-apiserver， kube-apiserver 会使用该证书中的公钥来验证请求中的 token。我们将在文中稍后部分详细介绍该证书的使用方法。</li></ol><h1 id="K8s中的证书位置"><a href="#K8s中的证书位置" class="headerlink" title="K8s中的证书位置"></a>K8s中的证书位置</h1><p>使用kubeadm创建完Kubernetes集群后, 默认会在<code>/etc/kubernetes/pki</code>目录下存放集群中需要用到的证书文件, 整体结构如下所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# tree /etc/kubernetes/</span><br><span class="line">/etc/kubernetes/</span><br><span class="line">├── admin.conf</span><br><span class="line">├── controller-manager.conf</span><br><span class="line">├── kubelet.conf</span><br><span class="line">├── manifests</span><br><span class="line">│   ├── etcd.yaml</span><br><span class="line">│   ├── kube-apiserver.yaml</span><br><span class="line">│   ├── kube-controller-manager.yaml</span><br><span class="line">│   └── kube-scheduler.yaml</span><br><span class="line">├── pki</span><br><span class="line">│   ├── apiserver.crt</span><br><span class="line">│   ├── apiserver-etcd-client.crt</span><br><span class="line">│   ├── apiserver-etcd-client.key</span><br><span class="line">│   ├── apiserver.key</span><br><span class="line">│   ├── apiserver-kubelet-client.crt</span><br><span class="line">│   ├── apiserver-kubelet-client.key</span><br><span class="line">│   ├── ca.crt</span><br><span class="line">│   ├── ca.key</span><br><span class="line">│   ├── etcd</span><br><span class="line">│   │   ├── ca.crt</span><br><span class="line">│   │   ├── ca.key</span><br><span class="line">│   │   ├── healthcheck-client.crt</span><br><span class="line">│   │   ├── healthcheck-client.key</span><br><span class="line">│   │   ├── peer.crt</span><br><span class="line">│   │   ├── peer.key</span><br><span class="line">│   │   ├── server.crt</span><br><span class="line">│   │   └── server.key</span><br><span class="line">│   ├── front-proxy-ca.crt</span><br><span class="line">│   ├── front-proxy-ca.key</span><br><span class="line">│   ├── front-proxy-client.crt</span><br><span class="line">│   ├── front-proxy-client.key</span><br><span class="line">│   ├── sa.key</span><br><span class="line">│   └── sa.pub</span><br><span class="line">└── scheduler.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Kubernetes-集群根证书"><a href="#Kubernetes-集群根证书" class="headerlink" title="Kubernetes 集群根证书"></a>Kubernetes 集群根证书</h2><p>Kubernetes 集群根证书CA(Kubernetes集群组件的证书签发机构)</p><ul><li><p>/etc/kubernetes/pki/ca.crt</p></li><li><p>/etc/kubernetes/pki/ca.key</p></li></ul><p>以上这组证书为签发其他Kubernetes组件证书使用的根证书, 可以认为是Kubernetes集群中证书签发机构之一。</p><p>由此根证书签发的证书有:</p><ol><li>kube-apiserver 组件持有的服务端证书</li></ol><ul><li><p>/etc/kubernetes/pki/apiserver.crt</p></li><li><p>/etc/kubernetes/pki/apiserver.key</p></li></ul><ol start="2"><li>kube-apiserver 组件持有的客户端证书, 用作 kube-apiserver 主动向 kubelet 发起请求时的客户端认证</li></ol><ul><li><p>/etc/kubernetes/pki/apiserver-kubelet-client.crt</p></li><li><p>/etc/kubernetes/pki/apiserver-kubelet-client.key</p></li></ul><h2 id="汇聚层证书"><a href="#汇聚层证书" class="headerlink" title="汇聚层证书"></a>汇聚层证书</h2><p>kube-apiserver 的另一种访问方式就是使用 kubectl proxy 来代理访问, 而该证书就是用来支持SSL代理访问的. 在该种访问模式下, 我们是以http的方式发起请求到代理服务的, 此时, 代理服务会将该请求发送给 kube-apiserver, 在此之前, 代理会将发送给 kube-apiserver 的请求头里加入证书信息。</p><p>kube-apiserver 代理根证书(客户端证书)</p><p>用在requestheader-client-ca-file配置选项中, kube-apiserver 使用该证书来验证客户端证书是否为自己所签发</p><ul><li>/etc/kubernetes/pki/front-proxy-ca.crt</li><li>/etc/kubernetes/pki/front-proxy-ca.key</li></ul><p>由此根证书签发的证书只有一组:</p><p>代理层(如汇聚层aggregator)使用此套代理证书来向 kube-apiserver 请求认证</p><p>代理端使用的客户端证书, 用作代用户与 kube-apiserver 认证</p><ul><li>/etc/kubernetes/pki/front-proxy-client.crt</li><li>/etc/kubernetes/pki/front-proxy-client.key</li></ul><h2 id="etcd-集群根证书"><a href="#etcd-集群根证书" class="headerlink" title="etcd 集群根证书"></a>etcd 集群根证书</h2><p>etcd集群所用到的证书都保存在/etc/kubernetes/pki/etcd这路径下, 很明显, 这一套证书是用来专门给etcd集群服务使用的, 设计以下证书文件</p><p>etcd 集群根证书CA(etcd 所用到的所有证书的签发机构)</p><ul><li>/etc/kubernetes/pki/etcd/ca.crt</li><li>/etc/kubernetes/pki/etcd/ca.key</li></ul><p>由此根证书签发机构签发的证书有:</p><ol><li>etcd server 持有的服务端证书</li></ol><ul><li><p>/etc/kubernetes/pki/etcd/server.crt</p></li><li><p>/etc/kubernetes/pki/etcd/server.key</p></li></ul><ol start="2"><li>peer 集群中节点互相通信使用的客户端证书</li></ol><ul><li>/etc/kubernetes/pki/etcd/peer.crt</li><li>/etc/kubernetes/pki/etcd/peer.key</li></ul><ol start="3"><li>pod 中定义 Liveness 探针使用的客户端证书</li></ol><ul><li><p>/etc/kubernetes/pki/etcd/healthcheck-client.crt</p></li><li><p>/etc/kubernetes/pki/etcd/healthcheck-client.key</p></li></ul><blockquote><p>kubeadm 部署的 Kubernetes 集群是以 pod 的方式运行 etcd 服务的, 在该 pod 的定义中, 配置了 Liveness 探活探针。</p><p>当 describe etcd 的 pod 时, 会看到如下一行配置:</p><p>Liveness:       exec [/bin/sh -ec ETCDCTL_API=3 etcdctl –endpoints=https://[127.0.0.1]:2379 –cacert=/etc/kubernetes/pki/etcd/ca.crt –cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt –key=/etc/kubernetes/pki/etcd/healthcheck-client.key get foo] delay=15s timeout=15s period=10s #success=1 #failure=8</p></blockquote><ol start="4"><li>配置在 kube-apiserver 中用来与 etcd server 做双向认证的客户端证书</li></ol><ul><li>/etc/kubernetes/pki/apiserver-etcd-client.crt</li><li>/etc/kubernetes/pki/apiserver-etcd-client.key</li></ul><h2 id="SERVICE-ACCOUNT-证书"><a href="#SERVICE-ACCOUNT-证书" class="headerlink" title="SERVICE ACCOUNT 证书"></a>SERVICE ACCOUNT 证书</h2><p>Kubernetes 中有两类用户，一类为 user account，一类为 service account。 service account 主要被 pod 用于访问 kube-apiserver。 在为一个 pod 指定了 service account 后，kubernetes 会为该 service account 生成一个 JWT token，并使用 secret 将该 service account token 加载到 pod 上。pod 中的应用可以使用 service account token 来访问 api server。service account 证书被用于生成和验证 service account token。该证书的用法和前面介绍的其他证书不同，因为实际上使用的是其公钥和私钥，而并不需要对证书进行验证。</p><ul><li>/etc/kubernetes/pki/sa.key</li><li>/etc/kubernetes/pki/sa.pub</li></ul><p>可以查看 service account 证书的公钥和私钥会分别被配置到了 kube-apiserver 和 kube-controller-manager 的命令行参数中，如下所示：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@k8s-master</span> <span class="string">~</span>]<span class="comment"># cat /etc/kubernetes/manifests/kube-controller-manager.yaml</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kube-controller-manager</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">...</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--service-account-private-key-file=/etc/kubernetes/pki/sa.key</span>    <span class="comment"># 用于对 service account token 进行签名的私钥</span></span><br><span class="line">    </span><br><span class="line">[<span class="string">root@k8s-master</span> <span class="string">~</span>]<span class="comment"># cat /etc/kubernetes/manifests/kube-apiserver.yaml</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kube-apiserver</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">...</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--service-account-key-file=/etc/kubernetes/pki/sa.pub</span>   <span class="comment"># 用于验证 service account token 的公钥</span></span><br></pre></td></tr></table></figure><h2 id="KUBECONFIG"><a href="#KUBECONFIG" class="headerlink" title="KUBECONFIG"></a>KUBECONFIG</h2><p>Kubernetes 中的各个组件，包括kube-controller-mananger、kube-scheduler、kube-proxy、kubelet等，采用一个kubeconfig 文件中配置的信息来访问 kube-apiserver。该文件中包含了 kube-apiserver 的地址，验证 kube-apiserver 服务器证书的 CA 证书，自己的客户端证书和私钥等访问信息。</p><p>以kubelet.conf为例：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">clusters:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cluster:</span> </span><br><span class="line">    <span class="comment"># 用于验证 kube-apiserver 服务器证书的 CA 根证书 </span></span><br><span class="line">    <span class="attr">certificate-authority-data:</span> <span class="string">LS0tLS1CRUdJTiBDRVJUSUZJQXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0tLS0tCg==</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">https://localhost:8443</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">contexts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">context:</span></span><br><span class="line">    <span class="attr">cluster:</span> <span class="string">kubernetes</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">system:kube-controller-manager</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:kube-controller-manager@kubernetes</span></span><br><span class="line"><span class="attr">current-context:</span> <span class="string">system:kube-controller-manager@kubernetes</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Config</span></span><br><span class="line"><span class="attr">preferences:</span> &#123;&#125;</span><br><span class="line"><span class="attr">users:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">system:kube-controller-manager</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="comment"># 用于访问 kube-apiserver 的客户端证书</span></span><br><span class="line">    <span class="attr">client-certificate-data:</span> <span class="string">LS0tLS1CRUdJTiXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXQ0FURS0tLS0tCg==</span></span><br><span class="line">    <span class="comment"># 客户端证书对应的私钥</span></span><br><span class="line">    <span class="attr">client-key-data:</span> <span class="string">LS0tLS1CRUdXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXtFWS0tLS0tCg==</span></span><br></pre></td></tr></table></figure><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>《一文带你彻底厘清 Kubernetes 中的证书工作机制》 赵化冰</p><p>Kubernetes PKI 证书和要求</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;k8s组件的认证方式&quot;&gt;&lt;a href=&quot;#k8s组件的认证方式&quot; class=&quot;headerlink&quot; title=&quot;k8s组件的认证方式&quot;&gt;&lt;/a&gt;k8s组件的认证方式&lt;/h1&gt;&lt;p&gt;k8s各个组件会相互进行远程调用，例如 &lt;code&gt;kube-apiserv</summary>
      
    
    
    
    <category term="kubernetes" scheme="https://slions.github.io/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://slions.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>linux网络模型必知必会</title>
    <link href="https://slions.github.io/2022/04/11/linux%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    <id>https://slions.github.io/2022/04/11/linux%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</id>
    <published>2022-04-11T14:20:48.000Z</published>
    <updated>2022-04-11T15:17:36.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h1><p>说到网络，肯定经常提起七层负载均衡、四层负载均衡，或者三层设备、二层设备等等。那么，这里说的二层、三层、四层、七层又都是什么意思呢？</p><p>实际上，这些层都来自国际标准化组织制定的开放式系统互联通信参考模型（Open System Interconnection Reference Model），简称为 <strong>OSI 网络模型</strong>。</p><p>为了解决网络互联中异构设备的兼容性问题，并解耦复杂的网络包处理流程，OSI 模型把网络互联的框架分为应用层、表示层、会话层、传输层、网络层、数据链路层以及物理层等七层，每个层负责不同的功能。其中：</p><ol><li>应用层，负责为应用程序提供统一的接口。</li><li>表示层，负责把数据转换成兼容接收系统的格式。</li><li>会话层，负责维护计算机之间的通信连接。</li><li>传输层，负责为数据加上传输表头，形成数据包。</li><li>网络层，负责数据的路由和转发。</li><li>数据链路层，负责 MAC 寻址、错误侦测和改错。</li><li>物理层，负责在物理网络中传输数据帧。</li></ol><p>但是 OSI 模型还是太复杂了，也没能提供一个可实现的方法。所以，在 Linux 中，我们实际上使用的是另一个更实用的四层模型，即 <strong>TCP/IP 网络模型</strong>。</p><p>TCP/IP 模型，把网络互联的框架分为应用层、传输层、网络层、网络接口层等四层，其中：</p><ol><li>应用层，负责向用户提供一组应用程序，比如 HTTP、FTP、DNS 等。</li><li>传输层，负责端到端的通信，比如 TCP、UDP 等。</li><li>网络层，负责网络包的封装、寻址和路由，比如 IP、ICMP 等。</li><li>网络接口层，负责网络包在物理网络中的传输，比如 MAC 寻址、错误侦测以及通过网卡传输网络帧等。</li></ol><p> TCP/IP 与 OSI 模型的关系，如下所示：</p><img src="https://slions.gitee.io/picbed/img/74layer.png"/><p>当然了，虽说 Linux 实际按照 TCP/IP 模型，实现了网络协议栈，但在平时的学习交流中，我们习惯上还是用 OSI 七层模型来描述。比如，说到七层和四层负载均衡，对应的分别是 OSI 模型中的应用层和传输层（而它们对应到 TCP/IP 模型中，实际上是四层和三层）。</p><h1 id="Linux网络栈"><a href="#Linux网络栈" class="headerlink" title="Linux网络栈"></a>Linux网络栈</h1><p>有了 TCP/IP 模型后，在进行网络传输时，数据包就会按照协议栈，对上一层发来的数据进行逐层处理；然后封装上该层的协议头，再发送给下一层。</p><p>当然，网络包在每一层的处理逻辑，都取决于各层采用的网络协议。比如在应用层，一个提供 REST API 的应用，可以使用 HTTP 协议，把它需要传输的 JSON 数据封装到 HTTP 协议中，然后向下传递给 TCP 层。</p><p>而封装做的事情就很简单了，只是在原来的负载前后，增加固定格式的元数据，原始的负载数据并不会被修改。</p><p>比如，以通过 TCP 协议通信的网络包为例，通过下面这张图，我们可以看到，应用程序数据在每个层的封装格式。</p><img src="https://slions.gitee.io/picbed/img/tcp封包.png"/><p>其中：</p><ul><li>传输层在应用程序数据前面增加了 TCP 头；</li><li>网络层在 TCP 数据包前增加了 IP 头；</li><li>而网络接口层，又在 IP 数据包前后分别增加了帧头和帧尾。</li></ul><p>这些新增的头部和尾部，都按照特定的协议格式填充，想了解具体格式，你可以查看协议的文档。 比如，你可以查看这里，了解 TCP 头的格式。这些新增的头部和尾部，增加了网络包的大小，但我们都知道，物理链路中并不能传输任意大小的数据包。网络接口配置的最大传输单元（MTU），就规定了最大的 IP 包大小。在我们最常用的以太网中，MTU 默认值是 1500（这也是 Linux 的默认值）。</p><p>一旦网络包超过 MTU 的大小，就会在网络层分片，以保证分片后的 IP 包不大于 MTU 值。显然，MTU 越大，需要的分包也就越少，自然，网络吞吐能力就越好。</p><p>理解了 TCP/IP 网络模型和网络包的封装原理后，很容易能想到，Linux 内核中的网络栈，其实也类似于 TCP/IP 的四层结构。如下图所示，就是 Linux 通用 IP 网络栈的示意图：</p><img src="https://slions.gitee.io/picbed/img/linux网络栈.png"/><ul><li>最上层的应用程序，需要通过系统调用，来跟套接字接口进行交互；</li><li>套接字的下面，就是我们前面提到的传输层、网络层和网络接口层；</li><li>最底层，则是网卡驱动程序以及物理网卡设备。</li></ul><blockquote><p>网卡是发送和接收网络包的基本设备。在系统启动过程中，网卡通过内核中的网卡驱动程序注册到系统中。而在网络收发过程中，内核通过中断跟网卡进行交互。再结合前面提到的 Linux 网络栈，可以看出，网络包的处理非常复杂。所以，网卡硬中断只处理最核心的网卡数据读取或发送，而协议栈中的大部分逻辑，都会放到软中断中处理。</p></blockquote><h1 id="Linux-网络收发流程"><a href="#Linux-网络收发流程" class="headerlink" title="Linux 网络收发流程"></a>Linux 网络收发流程</h1><h2 id="网络包的接收流程"><a href="#网络包的接收流程" class="headerlink" title="网络包的接收流程"></a>网络包的接收流程</h2><ol><li><p>内核分配一个主内存地址段（DMA缓冲区），网卡设备可以在DMA缓冲区中读写数据</p></li><li><p>当来了一个网络包，网卡将网络包写入DMA缓冲区，写完后通知CPU产生硬中断</p></li><li><p>硬中断处理程序锁定当前的DMA缓冲区，然后将网络包拷贝到另一块内存区，清空并解锁当前DMA缓冲区，然后通知软中断去处理网络包。</p></li><li><p>内核协议栈从缓冲区中取出网络帧，并通过网络协议栈，从下到上逐层处理这个网络帧。比如：</p><ul><li><p>在链路层检查报文的合法性，找出上层协议的类型（比如 IPv4还是 IPv6），再去掉帧头、帧尾，然后交给网络层。</p></li><li><p>网络层取出 IP 头，判断网络包下一步的走向，比如是交给上层处理还是转发。当网络层确认这个包是要发送到本机后，就会取出上层协议的类型（比如 TCP 还是 UDP），去掉 IP 头，再交给传输层处理。</p></li><li><p>传输层取出 TCP 头或者 UDP 头后，根据 &lt; 源 IP、源端口、目的 IP、目的端口 &gt; 四元组作为标识，找出对应的 Socket，并把数据拷贝到 Socket 的接收缓存中。</p></li></ul></li><li><p>最后，应用程序就可以使用 Socket 接口，读取到新接收到数据。</p></li></ol><img src="https://slions.gitee.io/picbed/img/网卡处理流程.png"/><h1 id="网络包的发送流程"><a href="#网络包的发送流程" class="headerlink" title="网络包的发送流程"></a>网络包的发送流程</h1><p>当发送数据包时，与上述相反。链路层将数据包封装完毕后，放入网卡的DMA缓冲区，并调用系统硬中断，通知网卡从缓冲区读取并发送数据。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>《关于linux网络，你必须知道这些》 冯永吉</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网络模型&quot;&gt;&lt;a href=&quot;#网络模型&quot; class=&quot;headerlink&quot; title=&quot;网络模型&quot;&gt;&lt;/a&gt;网络模型&lt;/h1&gt;&lt;p&gt;说到网络，肯定经常提起七层负载均衡、四层负载均衡，或者三层设备、二层设备等等。那么，这里说的二层、三层、四层、七层又都是什么</summary>
      
    
    
    
    <category term="Network" scheme="https://slions.github.io/categories/Network/"/>
    
    
    <category term="Network" scheme="https://slions.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>检测tcp连通性与端口延迟</title>
    <link href="https://slions.github.io/2022/04/11/%E6%A3%80%E6%B5%8Btcp%E8%BF%9E%E9%80%9A%E6%80%A7%E4%B8%8E%E7%AB%AF%E5%8F%A3%E5%BB%B6%E8%BF%9F/"/>
    <id>https://slions.github.io/2022/04/11/%E6%A3%80%E6%B5%8Btcp%E8%BF%9E%E9%80%9A%E6%80%A7%E4%B8%8E%E7%AB%AF%E5%8F%A3%E5%BB%B6%E8%BF%9F/</id>
    <published>2022-04-11T14:17:57.000Z</published>
    <updated>2022-04-11T15:16:26.050Z</updated>
    
    <content type="html"><![CDATA[<p>一般测试网络连通性和延迟最常使用Ping命令，但是如果对方禁止了ICMP包将无法ping通，telnet命令虽然可以测试端口连通性，但却无法检测延迟，这时可以使用<code>PaPing </code>工具，它不仅可以测试连通性还可以检测网络延迟情况。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/paping/paping_1.5.5_x86-64_linux.tar.gz</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> tar zxvf paping_1.5.5_x86-64_linux.tar.gz</span></span><br></pre></td></tr></table></figure><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>命令参数说明：</p><ul><li>-p : –port N 指定被测试服务的 TCP 端口（必须）；</li><li>–nocolor : 屏蔽彩色输出；</li><li>-t : –timeout 指定超时时长，单位为毫秒，默认值为 1000；</li><li>-c : –count N 指定测试次数。</li></ul><p>比如我要测试k8s-node 10250端口延迟情况，输入命令：</p><img src="https://slions.gitee.io/picbed/img/paping.png"/>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一般测试网络连通性和延迟最常使用Ping命令，但是如果对方禁止了ICMP包将无法ping通，telnet命令虽然可以测试端口连通性，但却无法检测延迟，这时可以使用&lt;code&gt;PaPing &lt;/code&gt;工具，它不仅可以测试连通性还可以检测网络延迟情况。&lt;/p&gt;
&lt;h1 id</summary>
      
    
    
    
    <category term="Network" scheme="https://slions.github.io/categories/Network/"/>
    
    
    <category term="Network" scheme="https://slions.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>shell备忘录</title>
    <link href="https://slions.github.io/2022/04/10/shell%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>https://slions.github.io/2022/04/10/shell%E5%A4%87%E5%BF%98%E5%BD%95/</id>
    <published>2022-04-10T08:05:04.000Z</published>
    <updated>2022-04-10T11:00:38.942Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>好记性不如烂笔头，记录常用的指令</p></blockquote><h1 id="cut、sort"><a href="#cut、sort" class="headerlink" title="cut、sort"></a>cut、sort</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cut  -d &quot;:&quot;  -f2   /etc/passwd</span><br><span class="line">sort  -t &quot;:&quot;  -k2  /etc/passwd</span><br><span class="line">sort -u 排序前去重 -n 按大小排序 -r 降序排序</span><br></pre></td></tr></table></figure><h1 id="uniq、tr、split"><a href="#uniq、tr、split" class="headerlink" title="uniq、tr、split"></a>uniq、tr、split</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 去掉重复的行并显示重复了几行</span><br><span class="line">uniq -c /etc/passwd</span><br><span class="line"></span><br><span class="line"># 转换大小写</span><br><span class="line">tr</span><br><span class="line"></span><br><span class="line"># 和&lt;&lt;作用一样，都是追加重定向，不同的是tee会打印显示到交互界面</span><br><span class="line">tee</span><br><span class="line"></span><br><span class="line"># 批量给文件加后缀</span><br><span class="line">ls  /root  | xargs  -i   mv  &#123;&#125;  &#123;&#125;.txt    </span><br><span class="line"></span><br><span class="line"># 按行给文件切割</span><br><span class="line">split  -l   10  /etc/passwd  </span><br><span class="line">按大小给文件切割</span><br><span class="line">split  -b  1M   /etc/passwd</span><br></pre></td></tr></table></figure><h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 打印出指定的行</span><br><span class="line">sed  -n &#x27;/root/p&#x27; /etc/passwd</span><br><span class="line"># -r可以不用转义符号打印</span><br><span class="line">sed  -r &#x27;/(o+)*/p&#x27; /etc/passwd</span><br><span class="line"># 删除带有root的行</span><br><span class="line">sed  &#x27;/root/d&#x27; /etc/passwd</span><br><span class="line"># 显示行号并删除1到5行</span><br><span class="line">grep   -n   &#x27;.*&#x27;   /etc/passwd   |sed  ‘1,5d’    </span><br><span class="line"># 把root替换成lions   </span><br><span class="line">sed  &#x27;s/root/lions/g&#x27;  /etc/passwd</span><br><span class="line"># 也可以在指定的行替换</span><br><span class="line">sed  &#x27;1,10s/root/lions/g&#x27; /etc/passwd   </span><br><span class="line"># 直接修改源文件</span><br><span class="line">sed  -i  </span><br><span class="line"># &amp;号为引用前面查到的字符串</span><br><span class="line">sed  &#x27;s/root/&amp;admin/&#x27;  /etc/passwd </span><br><span class="line">#  把passwd中每行第一个字符串和最后一个字符串调换</span><br><span class="line">sed  -r  &#x27;s/ ([^:]+)(: .* :)([^:]+) / \3\2\1 /&#x27; /etc/passwd     </span><br><span class="line"># sed表达式可以使用单引号来引用，但是如果表达式内部包含变量字符串，就需要使用双引号</span><br><span class="line">test=hello;echo hello |sed  &quot;s/$test/HELLO&quot;</span><br><span class="line"># 打印含有test和check的行</span><br><span class="line">sed  -n &#x27;/test/,/check/p&#x27;  file   </span><br></pre></td></tr></table></figure><h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 匹配第一行是root的行，注意~符号</span><br><span class="line">awk  -F &#x27;:&#x27;   &#x27;$1~/root/&#x27;  /etc/passwd    </span><br><span class="line"># FS   输入字段分隔符，默认空格</span><br><span class="line">awk  &#x27;BEGIN&#123;FS=&quot;:&quot;&#125;  &#123;print  $1,$3&#125;&#x27;  /etc/passwd</span><br><span class="line"># OFS  输出字段分隔符</span><br><span class="line">awk  &#x27;BEGIN&#123;FS=&quot;:&quot;;OFS=&quot;+++&quot;&#125;  /^root/&#123;print  $1,$3&#125;&#x27;  /etc/passwd</span><br><span class="line"># NF  处理每一行的字段数量  $NF为每行最后一个字段</span><br><span class="line">awk  -F &quot; &quot;  &#x27;print $(NF-1)&#x27; /etc/passwd</span><br><span class="line"># 查看每行倒数第二个字段</span><br><span class="line"># 使用 grep 查找 Pss 指标后，再用 awk 计算累加值</span><br><span class="line">grep Pss /proc/[1-9]*/smaps | awk &#x27;&#123;total+=$2&#125;; END &#123;printf &quot;%d kB\n&quot;, total &#125;&#x27;</span><br><span class="line">391266 kB</span><br></pre></td></tr></table></figure><h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 对比两个文件中不同处，其中newfile为搜寻样式文件</span><br><span class="line">grep -vFf  &lt;newfile&gt;  file  </span><br><span class="line"># 当前目录下所有文件中包含word的文件</span><br><span class="line">grep -rne &quot;word&quot; .  </span><br></pre></td></tr></table></figure><h1 id="date"><a href="#date" class="headerlink" title="date"></a>date</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#  格式化输出</span><br><span class="line">date +&quot;%Y-%m-%d:%H:%M:%S&quot;  </span><br><span class="line"># 获取系统时区</span><br><span class="line">date +%z  </span><br><span class="line">+0800</span><br><span class="line">date +%Z </span><br><span class="line">CST</span><br></pre></td></tr></table></figure><h1 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 不换行输出</span><br><span class="line">echo -n </span><br><span class="line"># 支持转义</span><br><span class="line">echo -e</span><br><span class="line"># echo输出计算结果</span><br><span class="line">echo $((2*3))</span><br><span class="line">6</span><br><span class="line">a=5;b=7;c=2</span><br><span class="line">echo $((a+b*c))</span><br><span class="line">19</span><br><span class="line">echo $(($a+$b*$c))</span><br><span class="line">19</span><br></pre></td></tr></table></figure><h1 id="xargs与exec"><a href="#xargs与exec" class="headerlink" title="xargs与exec"></a>xargs与exec</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 找到根目录下所有的以test开头的文件并把查找结果当做参数传给rm -rf命令进行删除： </span><br><span class="line">find / -name &quot;test*&quot; |xargs rm -rf </span><br><span class="line">find / -name &quot;test*&quot; -exec rm -rf &#123;&#125; \; </span><br><span class="line">rm -rf $(find / -name “test”)</span><br><span class="line"># 如果想指定递归深度，可以这样： </span><br><span class="line">find / -maxdepth 3 -name &quot;*.mp3&quot; |xargs rm -rf </span><br><span class="line">find / -maxdepth 3 -name &quot;test*&quot; -exec rm -rf &#123;&#125; \; </span><br><span class="line">rm -rf $(find / -maxdepth 3 -name “test”) </span><br><span class="line"># 利用inode删除指定的文件</span><br><span class="line">find ./ -inum 1049741 |xargs rm -f</span><br><span class="line"># 批量给文件加后缀</span><br><span class="line">ls  /root  | xargs  -i  mv  &#123;&#125;  &#123;&#125;.txt </span><br></pre></td></tr></table></figure><h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 删除每行前10个字符</span><br><span class="line">:%s/^.\&#123;10\&#125;//</span><br><span class="line"># 删除每行末10个字符</span><br><span class="line">:%s/.\&#123;10\&#125;$//</span><br></pre></td></tr></table></figure><h1 id="seq"><a href="#seq" class="headerlink" title="seq"></a>seq</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">seq 输出数字序列</span><br><span class="line"># 指定分隔符，默认是\n</span><br><span class="line">seq -s  </span><br><span class="line"># 指定输出数字同宽</span><br><span class="line">seq -w  </span><br><span class="line"></span><br><span class="line">生成数值列表：</span><br><span class="line">for  i  in  &#123;10..20&#125;</span><br><span class="line">for  i  in  $&#123;seq 10  20&#125; 或者&#x27;seq 10  20&#x27;</span><br></pre></td></tr></table></figure><h1 id="shell特殊符号"><a href="#shell特殊符号" class="headerlink" title="shell特殊符号"></a>shell特殊符号</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$？上一个命令的状态返回值</span><br><span class="line">$#  传递给脚本参数的个数</span><br><span class="line">$*</span><br><span class="line">$@  引用传递给脚本的所有参数</span><br><span class="line">！！ 执行上一个命令</span><br><span class="line">$&#123;variable:-tom&#125;   如果变量variable没有赋予值则使用Tom作为默认值</span><br><span class="line">$&#123;variable:+tom&#125;   如果给变量variable赋值了则使用Tom</span><br><span class="line">$( )与&#x27; &#x27;在操作上会达到相同的效果</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;好记性不如烂笔头，记录常用的指令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;cut、sort&quot;&gt;&lt;a href=&quot;#cut、sort&quot; class=&quot;headerlink&quot; title=&quot;cut、sort&quot;&gt;&lt;/a&gt;cut、sort&lt;/h</summary>
      
    
    
    
    <category term="shell" scheme="https://slions.github.io/categories/shell/"/>
    
    
    <category term="shell" scheme="https://slions.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>修改kubeadm源码中的证书过期时间</title>
    <link href="https://slions.github.io/2022/04/01/%E4%BF%AE%E6%94%B9kubeadm%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E8%AF%81%E4%B9%A6%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4/"/>
    <id>https://slions.github.io/2022/04/01/%E4%BF%AE%E6%94%B9kubeadm%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E8%AF%81%E4%B9%A6%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4/</id>
    <published>2022-04-01T15:12:14.000Z</published>
    <updated>2022-04-01T15:15:45.209Z</updated>
    
    <content type="html"><![CDATA[<p>通过kubeadm安装的kubernetes v1.22.8版本，查看集群的证书有效期依旧是一年。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 home]#  kubeadm certs check-expiration</span><br><span class="line">[check-expiration] Reading configuration from the cluster...</span><br><span class="line">[check-expiration] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span><br><span class="line"></span><br><span class="line">CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED</span><br><span class="line">admin.conf                 Mar 31, 2023 10:58 UTC   364d            ca                      no</span><br><span class="line">apiserver                  Mar 31, 2023 10:58 UTC   364d            ca                      no</span><br><span class="line">apiserver-etcd-client      Mar 31, 2023 10:58 UTC   364d            etcd-ca                 no</span><br><span class="line">apiserver-kubelet-client   Mar 31, 2023 10:58 UTC   364d            ca                      no</span><br><span class="line">controller-manager.conf    Mar 31, 2023 10:58 UTC   364d            ca                      no</span><br><span class="line">etcd-healthcheck-client    Mar 31, 2023 10:58 UTC   364d            etcd-ca                 no</span><br><span class="line">etcd-peer                  Mar 31, 2023 10:58 UTC   364d            etcd-ca                 no</span><br><span class="line">etcd-server                Mar 31, 2023 10:58 UTC   364d            etcd-ca                 no</span><br><span class="line">front-proxy-client         Mar 31, 2023 10:58 UTC   364d            front-proxy-ca          no</span><br><span class="line">scheduler.conf             Mar 31, 2023 10:58 UTC   364d            ca                      no</span><br><span class="line"></span><br><span class="line">CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED</span><br><span class="line">ca                      Mar 28, 2032 10:58 UTC   9y              no</span><br><span class="line">etcd-ca                 Mar 28, 2032 10:58 UTC   9y              no</span><br><span class="line">front-proxy-ca          Mar 28, 2032 10:58 UTC   9y              no</span><br></pre></td></tr></table></figure><h1 id="修改kubeadm源码"><a href="#修改kubeadm源码" class="headerlink" title="修改kubeadm源码"></a>修改kubeadm源码</h1><h2 id="拉取kubernetes源码"><a href="#拉取kubernetes源码" class="headerlink" title="拉取kubernetes源码"></a>拉取kubernetes源码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/kubernetes/kubernetes.git</span><br></pre></td></tr></table></figure><p>切换到匹配版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd kubernetes &amp;&amp; git checkout -b remotes/origin/release-1.22.8  v1.22.8</span><br></pre></td></tr></table></figure><h2 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h2><p>查看kubeadm对应的go版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 home]# kubeadm version</span><br><span class="line">kubeadm version: &amp;version.Info&#123;Major:&quot;1&quot;, Minor:&quot;22&quot;, GitVersion:&quot;v1.22.8&quot;, GitCommit:&quot;7061dbbf75f9f82e8ab21f9be7e8ffcaae8e0d44&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2022-03-16T14:08:54Z&quot;, GoVersion:&quot;go1.16.15&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;&#125;</span><br></pre></td></tr></table></figure><p>下载go1.16.15</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/go/go1.16.15.linux-amd64.tar.gz</span><br><span class="line">tar zxvf go1.16.15.linux-amd64.tar.gz  -C  /usr/local </span><br></pre></td></tr></table></figure><p>设置go的运行环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#编辑/etc/profile文件添加如下：</span><br><span class="line">#go setting</span><br><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export GOPATH=/usr/local/gopath</span><br><span class="line">export PATH=$PATH:$GOROOT/bin</span><br></pre></td></tr></table></figure><p>加载环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="修改源码"><a href="#修改源码" class="headerlink" title="修改源码"></a>修改源码</h2><p>修改CA有效期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim staging/src/k8s.io/client-go/util/cert/cert.go</span><br></pre></td></tr></table></figure><p><img src="https://slions.gitee.io/picbed/img/cert.png"></p><p>修改集群证书有效期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim cmd/kubeadm/app/constants/constants.go</span><br></pre></td></tr></table></figure><p><img src="https://slions.gitee.io/picbed/img/ca.png"></p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>下载编译工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc make -y</span><br></pre></td></tr></table></figure><p>编译kubeadm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make all WHAT=cmd/kubeadm GOFLAGS=-v</span><br></pre></td></tr></table></figure><p>编译完产物在<code>_output/bin/kubeadm</code>目录下,其中 bin 是使用了软连接,真实路径是<code>_output/local/bin/linux/amd64/kubeadm</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 kubernetes]# ll _output/bin/kubeadm</span><br><span class="line">-rwxr-xr-x. 1 root root 45830144 4月   1 14:52 _output/bin/kubeadm</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过kubeadm安装的kubernetes v1.22.8版本，查看集群的证书有效期依旧是一年。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin</summary>
      
    
    
    
    <category term="kubernetes" scheme="https://slions.github.io/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://slions.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>k8s网络模型与cni插件</title>
    <link href="https://slions.github.io/2022/03/22/k8s%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E4%B8%8Ecni%E6%8F%92%E4%BB%B6/"/>
    <id>https://slions.github.io/2022/03/22/k8s%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E4%B8%8Ecni%E6%8F%92%E4%BB%B6/</id>
    <published>2022-03-22T15:47:22.000Z</published>
    <updated>2022-04-16T09:20:51.045Z</updated>
    
    <content type="html"><![CDATA[<p>Docker是基于一个虚拟网桥设备<code>docker0</code>来实现宿主机上容器通信的，而k8s本身不提供网络方案，只提供cni接口，维护了一个单独的网桥（cni0）来代替 docker0，由遵从cni的第三方网络插件提供。</p><p>在使用cni插件时，一旦使用了k8s创建Pod,那么会产生一个CNI网桥来接管所有CNI插件负责的Pod，而我们单纯使用docker run命令创建的容器，还是由docker0负责。<br>Kubernetes 之所以要设置这样一个与 docker0 网桥功能几乎一样的 CNI 网桥，主要原因包括两个方面：</p><ul><li>Kubernetes 项目并没有使用 Docker 的网络模型（CNM），所以它并不希望、也不具备配置 docker0 网桥的能力；</li><li>这还与 Kubernetes 如何配置 Pod，也就是 Infra 容器的 Network Namespace密切相关。</li></ul><p><strong>CNI的设计思想是k8s在启动容器之后，就可以直接调用CNI网络插件，为这个容器的Network Namespace配置符合预期的网络栈。</strong></p><h1 id="CNI工作流程"><a href="#CNI工作流程" class="headerlink" title="CNI工作流程"></a>CNI工作流程</h1><p>在部署 Kubernetes 的时候，有一个步骤是安装 kubernetes-cni 包，它的目的就是在宿主机上安装CNI 插件所需的基础可执行文件。</p><p>在安装完成后，可以在宿主机的 /opt/cni/bin 目录下看到它们:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 ~]# ls /opt/cni/bin/</span><br><span class="line">bridge  dhcp  flannel  host-device  host-local  ipvlan  loopback  macvlan  portmap  ptp  sample  tuning  vlan</span><br></pre></td></tr></table></figure><p>可以看到flannel就在里面，k8s仓库中保留着flannel的实现。</p><p>这些 CNI 的基础可执行文件，按照功能可以分为三类：</p><ul><li>第一类，叫作 Main 插件，它是用来创建具体网络设备的二进制文件。比如，bridge（网桥设备）、ipvlan、loopback（lo 设备）、macvlan、ptp（Veth Pair 设备），以及 vlan。</li><li>第二类，叫作 IPAM（IP Address Management）插件，它是负责分配 IP 地址的二进制文件。比如，dhcp，这个文件会向 DHCP 服务器发起请求；host-local，则会使用预先配置的 IP地址段来进行分配。</li><li>第三类，是由 CNI 社区维护的内置 CNI 插件。比如：flannel，就是专门为 Flannel 项目提供的CNI 插件；tuning，是一个通过 sysctl 调整网络设备参数的二进制文件；portmap，是一个通过 iptables 配置端口映射的二进制文件；bandwidth，是一个使用 Token Bucket Filter (TBF)来进行限流的二进制文件。</li></ul><p>下面以flannel为例说明：</p><p>首先，实现这个网络方案本身。这一部分需要编写的，其实就是 flanneld 进程里的主要逻辑。</p><p>比如，创建和配置 flannel.1 设备、配置宿主机路由、配置 ARP 和 FDB 表里的信息等等。然后，实现该网络方案对应的 CNI 插件。这一部分主要需要做的，就是配置 Infra 容器里面的网络栈，并把它连接在 CNI 网桥上。</p><p>由于 Flannel 项目对应的 CNI 插件已经被内置了，所以它无需再单独安装。而对于 Weave、Calico 等其他项目来说，我们就必须在安装插件的时候，把对应的 CNI 插件的可执行文件放在 /opt/cni/bin/ 目录下。实际上，对于 Weave、Calico 这样的网络方案来说，它们的 DaemonSet 只需要挂载宿主机的 /opt/cni/bin/，就可以实现插件可执行文件的安装了。</p><p>接下来，就需要在宿主机上安装 flanneld（网络方案本身）。而在这个过程中，flanneld 启动后会在每台宿主机上生成它对应的CNI 配置文件（它其实是一个 ConfigMap），从而告诉Kubernetes，这个集群要使用 Flannel 作为容器网络方案。</p><p>这个 CNI 配置文件的内容如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 ~]# cat /etc/cni/net.d/<span class="number">10</span>-flannel.conflist</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;cbr0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;cniVersion&quot;</span>: <span class="string">&quot;0.3.1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;flannel&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;delegate&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;hairpinMode&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;isDefaultGateway&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;portmap&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;capabilities&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;portMappings&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>需要注意，Kubernetes 目前不支持多个 CNI 插件混用。如果在 CNI 配置目录（/etc/cni/net.d）里放置了多个 CNI 配置文件的话，dockershim 只会加载按字母顺序排序的第一个插件。</p><p>但另一方面，CNI 允许你在一个 CNI 配置文件里，通过 plugins 字段，定义多个插件进行协作。</p><p>比如，在我们上面这个例子里，Flannel 项目就指定了 flannel 和 portmap 这两个插件。</p></blockquote><p>下面是目前使用的flannel的服务文件，结合这个配置文件可以更好理解：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-flannel-ds-amd64</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">nodeAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">beta.kubernetes.io/os</span></span><br><span class="line">                <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                <span class="attr">values:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">linux</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">beta.kubernetes.io/arch</span></span><br><span class="line">                <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                <span class="attr">values:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">amd64</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--ip-masq</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--kube-subnet-mgr</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/opt/bin/flanneld</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">acaas-registry.agree:9980/quay.io/coreos/flannel:v0.11.0-amd64</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">kube-flannel</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">50Mi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">50Mi</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">capabilities:</span></span><br><span class="line">            <span class="attr">add:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">        <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/run/flannel</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">run</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-f</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/etc/kube-flannel/cni-conf.json</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/etc/cni/net.d/10-flannel.conflist</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cp</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">acaas-registry.agree:9980/quay.io/coreos/flannel:v0.11.0-amd64</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">install-cni</span></span><br><span class="line">        <span class="attr">resources:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">        <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">cni</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">      <span class="attr">securityContext:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">serviceAccount:</span> <span class="string">flannel</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">flannel</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">        <span class="attr">operator:</span> <span class="string">Exists</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/run/flannel</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">run</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">cni</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">defaultMode:</span> <span class="number">420</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">kube-flannel-cfg</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">  <span class="attr">updateStrategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">cni-conf.json:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;name&quot;: &quot;cbr0&quot;,</span></span><br><span class="line"><span class="string">      &quot;cniVersion&quot;: &quot;0.3.1&quot;,</span></span><br><span class="line"><span class="string">      &quot;plugins&quot;: [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;flannel&quot;,</span></span><br><span class="line"><span class="string">          &quot;delegate&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;hairpinMode&quot;: true,</span></span><br><span class="line"><span class="string">            &quot;isDefaultGateway&quot;: true</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;portmap&quot;,</span></span><br><span class="line"><span class="string">          &quot;capabilities&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;portMappings&quot;: true</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span>  <span class="attr">net-conf.json:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;Network&quot;: &quot;10.244.0.0/16&quot;,</span></span><br><span class="line"><span class="string">      &quot;Backend&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;Type&quot;: &quot;vxlan&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-flannel-cfg</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure><p>可以看出,flannel 清单中创建了一个configMap，其内包含两个json文件，其中cni-conf.json，这个configmap会被flannel的init-container挂载，挂载完毕后会执行cp命令到/etc/cni/net下面。</p><blockquote><p>在 Kubernetes 中，处理容器网络相关的逻辑并不会在 kubelet 主干代码里执行，而是会在具体的 CRI（Container Runtime Interface，容器运行时接口）实现里完成。对于 Docker 项目来说，它的 CRI 实现叫作 dockershim.</p></blockquote><h2 id="CRI网络处理流程："><a href="#CRI网络处理流程：" class="headerlink" title="CRI网络处理流程："></a>CRI网络处理流程：</h2><ol><li><p>当 kubelet 组件需要创建 Pod 的时候，它第一个创建的一定是 Infra 容器。所以在这一步，dockershim 就会先调用 Docker API 创建并启动 Infra 容器，紧接着执行一个叫作 SetUpPod的方法。这个方法的作用就是：为 CNI 插件准备参数，然后调用 CNI 插件为 Infra 容器配置网络。</p></li><li><p>这里要调用的 CNI 插件，就是<code>/opt/cni/bin/flannel</code>；而调用它所需要的参数，分为两部分。<br>一部分是一组CNI环境变量，用于定义当前的操作（ADD或者DEL，也就是添加一个veth pair或者拆除一个veth pair），根据这两个操作类型，flannel则会对应的实现两个方法，从而实现ADD和DEL流程；另一部分则是从上文中提到的 CNI配置文件中拿到的一些配置信息（被flannel从configMap挂载到了 宿主机的 <code>/etc/cni/net.d/10-flannel.conflist</code>），组装成json格式的<strong>Network COnfiguration</strong> 通过 stdin 传递给 flannel 插件</p></li><li><p>所以有了这两部分参数，flannel插件就可以实现具体的网络栈配置了；在Flannel 的 CNI 配置文件（ <code>/etc/cni/net.d/10-flannel.conflist</code>）里有这么一个字段，叫作 <strong>delegate</strong></p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;flannel&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;delegate&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;hairpinMode&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;isDefaultGateway&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Delegate 字段的意思是，这个 CNI 插件并不会自己做事儿，而是会调用 Delegate 指定的某种 CNI 内置插件来完成。对于 Flannel 来说，它调用的 Delegate 插件，就是前面介绍到的 CNI bridge 插件。所以说，<strong>dockershim 对 Flannel CNI 插件的调用，其实就是走了个过场。Flannel CNI插件唯一需要做的，就是对 dockershim 传来的 Network Configuration 进行补充</strong>。比如：将Delegate 的 Type 字段设置为 bridge，将 Delegate 的 IPAM 字段设置为 host-local 等。经过 Flannel CNI 插件补充后的、完整的 Delegate 字段如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;cniVersion&quot;</span>:<span class="string">&quot;0.3.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hairpinMode&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;ipMasq&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;ipam&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;routes&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;dst&quot;</span>:<span class="string">&quot;10.244.0.0/16&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;subnet&quot;</span>:<span class="string">&quot;10.244.0.0/24&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;host-local&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;isDefaultGateway&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;isGateway&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;mtu&quot;</span>:<span class="number">1450</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;cbr0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;bridge&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，ipam 字段里的信息，比如 10.244.1.0/24，读取自 Flannel 在宿主机上生成的 Flannel配置文件，即：宿主机上的 <code>/run/flannel/subnet.env </code>文件。</p><ol start="4"><li>接下来，Flannel CNI 插件就会调用 CNI bridge 插件，也就是执行：/opt/cni/bin/bridge 二进制文件。<br>这一次，调用 CNI bridge 插件需要的两部分参数的第一部分、也就是 CNI 环境变量，并没有变化。所以，它里面的 CNI_COMMAND 参数的值还是“ADD”。而第二部分 Network Configration，正是上面补充好的 Delegate 字段。Flannel CNI 插件会把 Delegate 字段的内容以标准输入（stdin）的方式传递给 CNI bridge 插件。</li><li>最后，flannel通过代理bridge完成将容器插入的CNI网络，如果没有CNI网桥，则会创建一个，这也是为什么如果集群为空的时候，其实宿主机看不到cni0网桥，创建了第一个pod后才会出现；而上面hairpinMode参数意思是 发夹模式，默认情况下，网桥设备不允许一个数据包从一个端口进来，再从一个端口出去，开启了这个模式则是取消这个限制，因为我们要允许在 NAT模式下，容器自己访问自己：比如将宿主机的8080端口映射到容器的80端口，完全可能在容器内访问宿主机的8080端口来访问自己，这样就成了报文从容器出去，又会原路返回，所以要打开这个限制。</li></ol><p>基本的流程图如下：</p><img src="https://slions.gitee.io/picbed/img/cnixx.jpg"/><h1 id="Flannel-vxlan在k8s中的实现"><a href="#Flannel-vxlan在k8s中的实现" class="headerlink" title="Flannel vxlan在k8s中的实现"></a>Flannel vxlan在k8s中的实现</h1><h2 id="原理图："><a href="#原理图：" class="headerlink" title="原理图："></a>原理图：</h2><p><img src="https://slions.gitee.io/picbed/img/f_vxlan4.png"></p><p><strong>Cni0：</strong>网桥设备，每创建一个 Pod 都会创建一对 Veth Pair。其中一端是 Pod 中的 eth0，另一端是 cni0 网桥中的端口（网卡）。Pod 中从网卡 eth0 发出的流量都会发送到 cni0 网桥设备的端口（网卡）上。</p><p>注：cni0 设备获得的 IP 地址是该节点分配到的网段的第一个地址。</p><p><strong>Flannel.1：</strong>Overlay 网络的设备，用来进行 Vxlan 报文的处理（封包和解包）。不同 Node 之间的 Pod 数据流量都从 Overlay 设备以隧道的形式发送到对端。</p><p><strong>Flanneld：</strong>Flannel 在每个主机中运行 Flanneld 作为 Agent，它会为所在主机从集群的网络地址空间中，获取一个小的网段 Subnet，本主机内所有容器的 IP 地址都将从中分配。</p><p>同时 Flanneld 监听 K8S 集群数据库（etcd），为 Flannel.1 设备提供封装数据时必要的 Mac，IP 等网络数据信息。</p><h2 id="跨主-Pod-的通信流程："><a href="#跨主-Pod-的通信流程：" class="headerlink" title="跨主 Pod 的通信流程："></a>跨主 Pod 的通信流程：</h2><ol><li>Pod 中产生数据，根据 Pod 的路由信息，将数据发送到 cni0。</li><li>cni0 根据节点的路由表，将数据发送到隧道设备 Flannel.1。</li><li>Flannel.1 查看数据包的目的 IP，从 Flanneld 获得对端隧道设备的必要信息，封装数据包。</li></ol><blockquote><p><strong>内层封装：</strong>Flannel.1 为 Vxlan 隧道端点，当数据包来到 Flannel.1 时，需要将数据包封装起来。此时：<br>源 IP src ip 为 源pod_ip。目的 IP dst ip 为目标pod_ip。<br>数据包继续封装需要知道目的pod_IP 地址对应的 Mac 地址。此时，Flannel.1 会将请求发送到用户空间的 Flanned 程序。Flanned 程序收到内核的请求事件之后，从 etcd 查找能够匹配该地址的子网的 Flannel.1 设备的 Mac 地址，即发往的 Pod 所在 Host 中 Flannel.1 设备的 Mac 地址。通过上面的介绍我们可知Flannel 在为 Node 节点分配 POD_IP 网段时记录了所有的网段和 Mac 等信息。<br>Flanned 将查询到的信息放入 Master 节点的 ARP Cache 表中：可以通过arp -n来查看。</p><p><strong>外层封装：</strong>此时内层封装已经准备好，需要找到 Vxlan 的外层封装。Kernel 需要查看 Node 上的 FDB（forwarding database）以获得内层封包中目的 Vtep 设备所在的 Node 地址。<br>因为已经从 ARP Table 中查到目的设备（flannel.1） Mac 地址，同时在 FDB 中存在该 Mac 地址对应的 Node 节点的 IP 地址。<br>如果 FDB 中没有这个信息，那么 Kernel 会向用户空间的 Flanned 程序发起“L2 MISS”事件。Flanneld 收到该事件后，会查询 etcd，获取该 Vtep 设备对应的 Node 的“Public IP”，并将信息注册到 FDB 中。<br>当内核获得了发往机器的 IP 地址后，ARP 得到 Mac 地址，之后就能完成 Vxlan 的外层封装。</p></blockquote><p><img src="https://slions.gitee.io/picbed/img/f_vxlan5.png"></p><ol start="4"><li>Flannel.1 将数据包发送到对端设备。节点的网卡接收到数据包，发现数据包为 Overlay 数据包，解开外层封装，并发送内层封装到 Flannel.1 设备。</li><li>Flannel.1 设备查看数据包，根据路由表匹配，将数据发送给 cni0 设备。</li><li>cni0 匹配路由表，发送数据给网桥上对应的端口。</li></ol><h2 id="一些实现细节"><a href="#一些实现细节" class="headerlink" title="一些实现细节"></a>一些实现细节</h2><p>kubernetes 会对每个 node 去标识一個名 <strong>PodCIDR</strong> 的值，代表该 Node 可以使用的网段。flanneld 的 Pod 会去读取该信息，并且记录在<code>/run/flannel/subnet.env</code>文件中。</p><p><strong>flannel CNI</strong> 收到任何创建pod请求时，会去读取<code>/run/flannel/subnet.env</code>文件，并且将其內容转换，发给 <strong>host-local</strong> 这个 <strong>IPAM CNI</strong>，来取得可以用的ip设定在pod身上。一旦当 <strong>host-local</strong> 处理结束后，就会在<code>/var/run/cni/cbr0/networks</code>看到一系列由 <strong>host-local</strong> 所维护的正在使用 IP 清单，这些IP清单内容记录着对应pod infra容器的container id。</p><p>在创建容器时，Flannel CNI 插件还会把 Delegate 字段以 JSON 文件的方式，保存在/var/lib/cni/flannel 目录下。这是为了给后面删除容器调用 DEL 操作时使用的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 CompassProject]# kubectl describe nodes|grep -w PodCIDR</span><br><span class="line">PodCIDR:                      10.244.0.0/24</span><br><span class="line">PodCIDR:                      10.244.1.0/24</span><br><span class="line">[root@test1 CompassProject]# cat /run/flannel/subnet.env</span><br><span class="line">FLANNEL_NETWORK=10.244.0.0/16</span><br><span class="line">FLANNEL_SUBNET=10.244.0.1/24</span><br><span class="line">FLANNEL_MTU=1450</span><br><span class="line">FLANNEL_IPMASQ=true</span><br><span class="line">[root@test1 CompassProject]# ls /var/lib/cni/networks/cbr0/</span><br><span class="line">10.244.0.4  10.244.0.5  last_reserved_ip.0  lock</span><br><span class="line">[root@test1 CompassProject]# cat /var/lib/cni/networks/cbr0/10.244.0.4</span><br><span class="line">5730c8d6756736dfc71452542a0395b9aaf3e2de2aef3b547a320cdc55069781</span><br><span class="line">[root@test1 CompassProject]# docker ps --no-trunc |grep $(cat /var/lib/cni/networks/cbr0/10.244.0.4)</span><br><span class="line">5730c8d6756736dfc71452542a0395b9aaf3e2de2aef3b547a320cdc55069781   acaas-registry.agree:9980/k8s.gcr.io/pause:3.1                 &quot;/pause&quot;                                                         37 hours ago                                  Up 37 hours                             k8s_POD_coredns-5b7d5f6cc8-hpqqb_kube-system_1f3a3347-3d16-4066-bf9b-791e28b7967f_4</span><br><span class="line">[root@test1 ~]# cat /var/lib/cni/flannel/</span><br><span class="line">5730c8d6756736dfc71452542a0395b9aaf3e2de2aef3b547a320cdc55069781  f6a039290fe9bc7b0469ed82a81bb7f29aee041b2b8a0025ce8bdf7cb47c7d06</span><br><span class="line">[root@test1 ~]# cat /var/lib/cni/flannel/5730c8d6756736dfc71452542a0395b9aaf3e2de2aef3b547a320cdc55069781</span><br><span class="line">&#123;&quot;cniVersion&quot;:&quot;0.3.1&quot;,&quot;hairpinMode&quot;:true,&quot;ipMasq&quot;:false,&quot;ipam&quot;:&#123;&quot;routes&quot;:[&#123;&quot;dst&quot;:&quot;10.244.0.0/16&quot;&#125;],&quot;subnet&quot;:&quot;10.244.0.0/24&quot;,&quot;type&quot;:&quot;host-local&quot;&#125;,&quot;isDefaultGateway&quot;:true,&quot;isGateway&quot;:true,&quot;mtu&quot;:1450,&quot;name&quot;:&quot;cbr0&quot;,&quot;type&quot;:&quot;bridge&quot;&#125;</span><br></pre></td></tr></table></figure><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>《Kubernetes网络模型与CNI网络插件》 张磊</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Docker是基于一个虚拟网桥设备&lt;code&gt;docker0&lt;/code&gt;来实现宿主机上容器通信的，而k8s本身不提供网络方案，只提供cni接口，维护了一个单独的网桥（cni0）来代替 docker0，由遵从cni的第三方网络插件提供。&lt;/p&gt;
&lt;p&gt;在使用cni插件时，一</summary>
      
    
    
    
    <category term="云原生" scheme="https://slions.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="kubernetes" scheme="https://slions.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>docker跨主机通信</title>
    <link href="https://slions.github.io/2022/03/22/docker%E8%B7%A8%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1/"/>
    <id>https://slions.github.io/2022/03/22/docker%E8%B7%A8%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1/</id>
    <published>2022-03-22T02:00:05.000Z</published>
    <updated>2022-03-24T13:38:17.530Z</updated>
    
    <content type="html"><![CDATA[<p>Docker默认的网络模式有三种：bridge、host、none，其中想实现不同宿主机上的容器相互访问是做不到的。对应”docker跨主通信”的需求，社区里涌现了大批的方案，其中<code>flannel</code>是用的最多也是较为简单的。</p><h1 id="Flannel"><a href="#Flannel" class="headerlink" title="Flannel"></a>Flannel</h1><p>Flannel本身是个框架，真正提供网络功能的是flannel的后端实现。Flannel支持三种后端实现：</p><ul><li>udp</li><li>vxlan</li><li>host-gw</li></ul><h2 id="udp"><a href="#udp" class="headerlink" title="udp"></a>udp</h2><p>flannel最早期的网络方案，实现最简单但是性能最差。</p><p>udp的原理图：</p><p><img src="https://slions.gitee.io/picbed/img/f_udp.png"></p><p>Flannel UDP 模式提供的其实是一个三层的 Overlay 网络，即：它首先对发出端的 IP包进行 UDP 封装，然后在接收端进行解封装拿到原始的 IP 包，进而把这个 IP 包转发给目标容器。这就好比，Flannel 在不同宿主机上的两个容器之间打通了一条“隧道”，使得这两个容器可以直接使用 IP 地址进行通信，而无需关心容器和宿主机的分布情况。</p><p>实际上，相比于两台宿主机之间的直接通信，基于 Flannel UDP 模式的容器通信多了一个额外的步骤，即 flanneld 的处理过程。而这个过程，由于使用到了 flannel0 这个 TUN 设备，仅在发出 IP包的过程中，就需要经过三次用户态与内核态之间的数据拷贝，如下所示：</p><p><img src="https://slions.gitee.io/picbed/img/f_udp2.png"></p><p>第一次：用户态的容器进程发出的 IP 包经过 docker0 网桥进入内核态；</p><p>第二次：IP 包根据路由表进入 TUN（flannel0）设备，从而回到用户态的 flanneld 进程；</p><p>第三次：flanneld 进行 UDP 封包之后重新进入内核态，将 UDP 包通过宿主机的 eth0 发出去。</p><p>此外，我们还可以看到，Flannel 进行 UDP 封装（Encapsulation）和解封装（Decapsulation）的过程，也都是在用户态完成的。在 Linux 操作系统中，上述这些上下文切换和用户态操作的代价其实是比较高的，这也正是造成 Flannel UDP 模式性能不好的主要原因。</p><h2 id="vxlan"><a href="#vxlan" class="headerlink" title="vxlan"></a>vxlan</h2><p> Virtual Extensible LAN（虚拟可扩展局域网），是 Linux 内核本身就支持的一种网络虚似化技术。所以说，VXLAN 可以完全在内核态实现上述封装和解封装的工作，从而通过与前面相似的“隧道”机制，构建出覆盖网络（Overlay Network）。</p><p>VXLAN 的覆盖网络的设计思想是：在现有的三层网络之上，“覆盖”一层虚拟的、由内核 VXLAN模块负责维护的二层网络，使得连接在这个 VXLAN 二层网络上的“主机”之间，可以像在同一个局域网（LAN）里那样自由通信。为了能够在二层网络上打通“隧道”，VXLAN 会在宿主机上设置一个特殊的网络设备作为“隧道”的两端。这个设备就叫作 VTEP，即：VXLAN Tunnel End Point（虚拟隧道端点）</p><p>而 VTEP 设备的作用，其实跟前面的 flanneld 进程非常相似。只不过，它进行封装和解封装的对象，是二层数据帧（Ethernet frame）；而且这个工作的执行流程，全部是在内核里完成的（因为VXLAN 本身就是 Linux 内核中的一个模块）。</p><p><img src="https://slions.gitee.io/picbed/img/f_vxlan.png"></p><p>图中每台宿主机上名叫 flannel.1 的设备，就是 VXLAN 所需的 VTEP 设备，它既有 IP地址，也有 MAC 地址。</p><p>可以看到，图中每台宿主机上名叫 flannel.1 的设备，就是 VXLAN 所需的 VTEP 设备，它既有 IP地址，也有 MAC 地址。</p><p>现在，我们的 container-1 的 IP 地址是 10.1.15.2，要访问的 container-2 的 IP 地址是10.1.16.3。</p><p>那么，与前面 UDP 模式的流程类似，当 container-1 发出请求之后，这个目的地址是 10.1.16.3的 IP 包，会先出现在 docker0 网桥，然后被路由到本机 flannel.1 设备进行处理。</p><p>为了能够将“原始 IP 包”封装并且发送到正确的宿主机，VXLAN 就需要找到这条“隧道”的出口，即：目的宿主机的 VTEP 设备。</p><p>而这个设备的信息，正是每台宿主机上的 flanneld 进程负责维护的。</p><p>当 一个新Node启动并加入 Flannel 网络之后，在 所有的节点上，flanneld就会添加一条去往对端的路由，凡是发往对端网段的 IP 包，都需要经过 flannel.1 设备发出。</p><p>在本例中，“源 VTEP 设备”收到“原始 IP 包”后，就要想办法把“原始 IP 包”加上一个目的 MAC 地址，封装成一个二层数据帧，然后发给“目的 VTEP 设备”</p><p>此时，根据前面的路由记录，我们已经知道了“目的 VTEP 设备”的 IP 地址。而要根据三层 IP 地址查询对应的二层 MAC 地址，这正是 ARP表的功能。而这里要用到的 ARP 记录，也是 flanneld 进程在 Node 2 节点启动时，自动添加在 Node 1 上的。我们可以通过 ip 命令看到它，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在 Node 1 上</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ip neigh show dev flannel.1</span></span><br><span class="line">10.1.16.0 lladdr 5e:f8:4f:00:e3:37 PERMANENT</span><br></pre></td></tr></table></figure><p>有了这个“目的 VTEP 设备”的 MAC 地址，Linux 内核就可以开始二层封包工作了。这个二层帧的格式，如下所示：</p><p><img src="https://slions.gitee.io/picbed/img/f_vxlan2.png"></p><p>可以看到，Linux 内核会把“目的 VTEP 设备”的 MAC 地址，填写在图中的 Inner EthernetHeader 字段，得到一个二层数据帧。</p><p>需要注意的是，上述封包过程只是加一个二层头，不会改变“原始 IP 包”的内容。所以图中的Inner IP Header 字段，依然是 container-2 的 IP 地址，即 10.1.16.3。</p><p>但是，上面提到的这些 VTEP 设备的 MAC 地址，对于宿主机网络来说并没有什么实际意义。所以上面封装出来的这个数据帧，并不能在我们的宿主机二层网络里传输。为了方便叙述，我们把它称为“内部数据帧”。</p><p>所以接下来，Linux 内核还需要再把“内部数据帧”进一步封装成为宿主机网络里的一个普通的数据帧，好让它“载着”“内部数据帧”，通过宿主机的 eth0 网卡进行传输。</p><p>我们把这次要封装出来的、宿主机对应的数据帧称为“外部数据帧”（Outer Ethernet Frame）。为了实现这个“搭便车”的机制，Linux 内核会在“内部数据帧”前面，加上一个特殊的 VXLAN头，用来表示这个“乘客”实际上是一个 VXLAN 要使用的数据帧。</p><p>而这个 VXLAN 头里有一个重要的标志叫作VNI，它是 VTEP 设备识别某个数据帧是不是应该归自己处理的重要标识。而在 Flannel 中，VNI 的默认值是 1，这也是为何，宿主机上的 VTEP 设备都叫作 flannel.1 的原因，这里的“1”，其实就是 VNI 的值。</p><p>然后，Linux 内核会把这个数据帧封装进一个 UDP 包里发出去。</p><p>在宿主机看来，它会以为自己的 flannel.1 设备只是在向另外一台宿主机的 flannel.1 设备，发起了一次普通的 UDP 链接。它哪里会知道，这个 UDP 包里面，其实是一个完整的二层数据帧。</p><p>不过，不要忘了，一个 flannel.1 设备只知道另一端的 flannel.1 设备的 MAC 地址，却不知道对应的宿主机地址是什么。</p><p>也就是说，这个 UDP 包该发给哪台宿主机呢？</p><p>在这种场景下，flannel.1 设备实际上要扮演一个“网桥”的角色，在二层网络进行 UDP 包的转发。而在 Linux 内核里面，“网桥”设备进行转发的依据，来自于一个叫作 FDB（Forwarding Database）的转发数据库。</p><p>不难想到，这个 flannel.1“网桥”对应的 FDB 信息，也是 flanneld 进程负责维护的。它的内容可以通过 bridge fdb 命令查看到，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在 Node 1 上，使用“目的 VTEP 设备”的 MAC 地址进行查询</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> bridge fdb show flannel.1 | grep 5e:f8:4f:00:e3:37</span></span><br><span class="line">5e:f8:4f:00:e3:37 dev flannel.1 dst 10.168.0.3 self permanent</span><br></pre></td></tr></table></figure><p>可以看到，在上面这条 FDB 记录里，指定了这样一条规则，即：</p><p>发往我们前面提到的“目的 VTEP 设备”（MAC 地址是 5e:f8:4f:00:e3:37）的二层数据帧，应该通过 flannel.1 设备，发往 IP 地址为10.168.0.3 的主机。显然，这台主机正是 Node 2，UDP 包要发往的目的地就找到了。</p><p>所以接下来的流程，就是一个正常的、宿主机网络上的封包工作。</p><p>我们知道，UDP 包是一个四层数据包，所以 Linux 内核会在它前面加上一个 IP 头，即原理图中的Outer IP Header，组成一个 IP 包。并且，在这个 IP 头里，会填上前面通过 FDB 查询出来的目的主机的 IP 地址，即 Node 2 的 IP 地址 10.168.0.3。</p><p>然后，Linux 内核再在这个 IP 包前面加上二层数据帧头，即原理图中的 Outer Ethernet Header，并把 Node 2 的 MAC 地址填进去。这个 MAC 地址本身，是 Node 1 的 ARP 表要学习的内容，无需 Flannel 维护。这时候，我们封装出来的“外部数据帧”的格式，如下所示：</p><p><img src="https://slions.gitee.io/picbed/img/f_vxlan3.png"></p><p>这样，封包工作就宣告完成了。</p><p>接下来，Node 1 上的 flannel.1 设备就可以把这个数据帧从 Node 1 的 eth0 网卡发出去。显然，这个帧会经过宿主机网络来到 Node 2 的 eth0 网卡。</p><p>这时候，Node 2 的内核网络栈会发现这个数据帧里有 VXLAN Header，并且 VNI=1。所以 Linux内核会对它进行拆包，拿到里面的内部数据帧，然后根据 VNI 的值，把它交给 Node 2 上的flannel.1 设备。</p><p>而 flannel.1 设备则会进一步拆包，取出“原始 IP 包”。接下来就是docker正常的网络流转了。最终，IP 包就进入到了 container-2 容器的 Network Namespace里。</p><h2 id="host-gw"><a href="#host-gw" class="headerlink" title="host-gw"></a>host-gw</h2><p>与 udp和vxlan 模式不同，host-gw是一种纯三层网络方案。</p><p><img src="https://slions.gitee.io/picbed/img/f_gw1.png"></p><p>假设现在，Node 1 上的 Infra-container-1，要访问 Node 2 上的 Infra-container-2。</p><p>设置 Flannel 使用 host-gw 模式：</p><p><img src="https://slions.gitee.io/picbed/img/f_gw0.png"></p><p>重启flannel后，flanneld 会在宿主机上创建这样一条规则，以Node 1 为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ip route</span></span><br><span class="line">...</span><br><span class="line">10.244.1.0/24 via 10.168.0.3 dev eth0</span><br></pre></td></tr></table></figure><p>可以看到，host-gw 模式的工作原理，其实就是将每个 Flannel 子网（Flannel Subnet，比如：10.244.1.0/24）的“下一跳”，设置成了该子网对应的宿主机的 IP 地址。</p><p>也就是说，这台“主机”（Host）会充当这条容器通信路径里的“网关”（Gateway）。这也正是“host-gw”的含义。</p><p>当然，Flannel 子网和主机的信息，都是保存在 Etcd 当中的。flanneld 只需要 WACTH 这些数据的变化，然后实时更新路由表即可。</p><h1 id="优略点"><a href="#优略点" class="headerlink" title="优略点"></a>优略点</h1><p><strong>udp模式</strong>：使用设备flannel.0进行封包解包，不是内核原生支持，上下文切换较大，性能非常差。<br><strong>vxlan模式</strong>：使用flannel.1进行封包解包，内核原生支持，性能较强。<br><strong>host-gw模式</strong>：无需flannel.1这样的中间设备，无需额外的解封包操作，直接宿主机当作子网的下一跳地址，性能最强。但又因host-gw是把宿主机网卡当作网关，所以集群节点要在一个局域网内（二层联通性）。</p><p><strong>host-gw的性能损失大约在10%左右，而其他所有基于VXLAN“隧道”机制 的网络方案，性能损失在20%~30%左右。</strong></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>《深入解析容器跨主机网络》 张磊</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Docker默认的网络模式有三种：bridge、host、none，其中想实现不同宿主机上的容器相互访问是做不到的。对应”docker跨主通信”的需求，社区里涌现了大批的方案，其中&lt;code&gt;flannel&lt;/code&gt;是用的最多也是较为简单的。&lt;/p&gt;
&lt;h1 id=&quot;F</summary>
      
    
    
    
    <category term="docker" scheme="https://slions.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://slions.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker网络</title>
    <link href="https://slions.github.io/2022/03/21/docker%E7%BD%91%E7%BB%9C/"/>
    <id>https://slions.github.io/2022/03/21/docker%E7%BD%91%E7%BB%9C/</id>
    <published>2022-03-21T14:14:19.000Z</published>
    <updated>2022-03-21T14:42:52.349Z</updated>
    
    <content type="html"><![CDATA[<a href="/2021/07/13/network-namespace%E9%9A%94%E7%A6%BB%E6%B5%8B%E8%AF%95/" title="自己动手实现network namespace">自己动手实现network namespace</a>中演示了network namespace的实现方式，network namespace可以为命名空间内的所有进程提供了全新隔离的网络协议栈。而所谓“网络栈”，就包括了：网卡（Network Interface）、回环设备（Loopback Device）、路由表（Routing Table）和 iptables 规则。对于一个进程来说，这些要素，构成了它发起和响应网络请求的基本环境。<p>作为一个容器，它可以声明直接使用宿主机的网络栈（–net=host），即：不开启 Network Namespace，比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run –d –net=host --name nginx-host nginx</span></span><br></pre></td></tr></table></figure><p>直接使用主机网络模式虽然可以为容器提供良好的网络性能，但会引入共享网络资源的问题，比如端口冲突。所以，在大多数情况下，我们都希望容器进程能使用自己 Network Namespace 里的网络栈，即：拥有属于自己的 IP 地址和端口。</p><p>如何让隔离的容器进程跟其他 Network Namespace 里的容器进程进行交互呢？Linux 中可以通过虚拟网桥实现，docker中也是通过“网桥”实现的。</p><h1 id="Docker-Bridge"><a href="#Docker-Bridge" class="headerlink" title="Docker Bridge"></a>Docker Bridge</h1><p>当 Docker 启动时，会自动在主机上创建一个 docker0 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。</p><p>创建一个 Docker 容器的时候，同时会创建了一对 veth pair 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 eth0 ；另一端在本地并被挂载到docker0 网桥，名称以 veth 开头（例如vethAQI)。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。</p><p><img src="https://slions.gitee.io/picbed/img/dn1.png"></p><p>brctl show查看当前的网桥：</p><p><img src="https://slions.gitee.io/picbed/img/dn2.png"></p><p>上面显示中的接口是由对应的桥提供网络流转的，在宿主机上也可以看出只有bridge拥有ip地址，而挂在bridge上的vethxxx则没有ip。</p><p><img src="https://slions.gitee.io/picbed/img/dn3.png"></p><h1 id="网络流转拓扑"><a href="#网络流转拓扑" class="headerlink" title="网络流转拓扑"></a>网络流转拓扑</h1><p><img src="https://slions.gitee.io/picbed/img/dn4.png"></p><h2 id="容器与宿主机通信"><a href="#容器与宿主机通信" class="headerlink" title="容器与宿主机通信"></a>容器与宿主机通信</h2><p>在桥接模式下，Docker Daemon 将 veth0 附加到 docker0 网桥上，保证宿主机的报文有能力发往 veth0。再将 veth1 添加到 Docker 容器所属的网络命名空间，保证宿主机的网络报文若发往 veth0 可以立即被 veth1 收到。</p><h2 id="容器与外界通信"><a href="#容器与外界通信" class="headerlink" title="容器与外界通信"></a>容器与外界通信</h2><p>容器如果需要联网，则需要采用 NAT 方式。准确的说，是 NATP (网络地址端口转换) 方式。NATP 包含两种转换方式：SNAT 和 DNAT 。</p><h3 id="外部访问容器"><a href="#外部访问容器" class="headerlink" title="外部访问容器"></a>外部访问容器</h3><blockquote><p>目的 NAT (Destination NAT，DNAT): 修改数据包的目的地址。</p></blockquote><p>当宿主机以外的世界需要访问容器时，数据包的流向如下图所示：</p><p><img src="https://slions.gitee.io/picbed/img/dn5.png"></p><p>由于容器的 IP 与端口对外都是不可见的，所以数据包的目的地址为宿主机的 ip 和端口，为 192.168.1.10:24 。</p><p>数据包经过路由器发给宿主机 eth0，再经 eth0 转发给 docker0 网桥。由于存在 DNAT 规则，会将数据包的目的地址转换为容器的 ip 和端口，为 172.17.0.n:24 。</p><p>宿主机上的 docker0 网桥识别到容器 ip 和端口，于是将数据包发送附加到 docker0 网桥上的 veth0 接口，veth0 接口再将数据包发送给容器内部的 veth1 接口，容器接收数据包并作出响应。</p><p><img src="https://slions.gitee.io/picbed/img/dn6.png"></p><h3 id="容器访问外部"><a href="#容器访问外部" class="headerlink" title="容器访问外部"></a>容器访问外部</h3><blockquote><p>目的 NAT (Destination NAT，DNAT): 修改数据包的目的地址。</p></blockquote><p>当容器需要访问宿主机以外的世界时，数据包的流向为下图所示：</p><p><img src="https://slions.gitee.io/picbed/img/dn7.png"></p><p>此时数据包的源地址为容器的 ip 和端口，为 172.17.0.n:24，容器内部的 veth1 接口将数据包发往 veth0 接口，到达 docker0 网桥。</p><p>宿主机上的 docker0 网桥发现数据包的目的地址为外界的 IP 和端口，便会将数据包转发给 eth0 ，并从 eth0 发出去。由于存在 SNAT 规则，会将数据包的源地址转换为宿主机的 ip 和端口，为 192.168.1.10:24 。</p><p>由于路由器可以识别到宿主机的 ip 地址，所以再将数据包转发给外界，外界接受数据包并作出响应。这时候，在外界看来，这个数据包就是从 192.168.1.10:24 上发出来的，Docker 容器对外是不可见的。</p><p><img src="https://slions.gitee.io/picbed/img/dn8.png"></p><p>docker0 之所以能将对外报文转发到eth0，是因为在一个主机内，通过路由表规则进行转发，在主机内docker0可以reach到eth0所对应的IP。</p><p>当进行端口映射的时候我们可以查看到宿主机中多了一个进程，这就是前面所说的docker-proxy，每增加一个端口映射，宿主机就会多出一个docker-proxy进程，当其他的人访问这个主机的时候，docker-proxy就会自动找到对应容器的端口。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://blog.daocloud.io/4896.html">http://blog.daocloud.io/4896.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;a href=&quot;/2021/07/13/network-namespace%E9%9A%94%E7%A6%BB%E6%B5%8B%E8%AF%95/&quot; title=&quot;自己动手实现network namespace&quot;&gt;自己动手实现network namespace&lt;/a&gt;中演示了</summary>
      
    
    
    
    <category term="docker" scheme="https://slions.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://slions.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>ARP</title>
    <link href="https://slions.github.io/2022/03/20/ARP/"/>
    <id>https://slions.github.io/2022/03/20/ARP/</id>
    <published>2022-03-20T08:14:39.000Z</published>
    <updated>2022-03-20T08:35:25.539Z</updated>
    
    <content type="html"><![CDATA[<p><strong>地址解析协议</strong>（Address Resolution Protocol），其基本功能为透过目标设备的IP地址，查询目标设备的MAC地址，以保证通信的顺利进行。它是IPv4中网络层必不可少的协议，不过在IPv6中已不再适用，并被邻居发现协议（NDP）所替代。</p><h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><p>假设主机A和B在同一个网段，主机A要向主机B发送信息，具体的地址解析过程如下：</p><ol><li>主机A首先查看自己的ARP表，确定其中是否包含有主机B对应的ARP表项。如果找到了对应的MAC地址，则主机A直接利用ARP表中的MAC地址，对IP数据包进行帧封装，并将数据包发送给主机B。</li><li>如果主机A在ARP表中找不到对应的MAC地址，<strong>则将缓存该数据报文</strong>，然后以广播方式发送一个ARP请求报文。ARP请求报文中的发送端IP地址和发送端MAC地址为主机A的IP地址和MAC地址，目标IP地址和目标MAC地址为主机B的IP地址和ff-ff-ff-ff-ff-ff的MAC地址。由于ARP请求报文以<strong>广播方式</strong>发送，该网段上的所有主机都可以接收到该请求，但只有被请求的主机（即主机B）会对该请求进行处理。</li><li>主机B比较自己的IP地址和ARP请求报文中的目标IP地址，当两者相同时进行如下处理：将ARP请求报文中的发送端（即主机A）的IP地址和MAC地址存入自己的ARP表中。之后以<strong>单播方式</strong>发送ARP响应报文给主机A，其中包含了自己的MAC地址。</li><li>主机A收到ARP响应报文后，<strong>将主机B的MAC地址加入到自己的ARP表中以用于后续报文的转发</strong>，同时将IP数据包进行封装后发送出去。</li></ol><h1 id="ARP报文"><a href="#ARP报文" class="headerlink" title="ARP报文"></a>ARP报文</h1><img src="https://gitee.com/Slions/picbed/raw/master/img/arp1.png"/><p>一般说以太网地址就是指MAC地址。</p><ul><li>字段1是ARP请求的目的以太网地址，全1时代表广播地址。</li><li>字段2是发送ARP请求的以太网地址。</li><li>字段3以太网帧类型表示的是后面的数据类型，ARP请求和ARP应答这个值为0x0806。</li><li>字段4表示硬件地址的类型，硬件地址不只以太网一种，是以太网类型时此值为1。</li><li>字段5表示要映射的协议地址的类型，要对IPv4地址进行映射，此值为0x0800。</li><li>字段6和7表示硬件地址长度和协议地址长度，MAC地址占6字节，IP地址占4字节。</li><li>字段8是操作类型字段，值为1，表示进行ARP请求；值为2，表示进行ARP应答；值，表示进行RARP请求；值为4，表示进行RARP应答。</li><li>字段9是发送端ARP请求或应答的硬件地址，这里是以太网地址，和字段2相同。</li><li>字段10是发送ARP请求或应答的IP地址。</li><li>字段11和12是目的端的硬件地址和协议地址。</li></ul><p>图中红框圈起来的是一对ARP请求和ARP应答。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/arp2.png"/><h2 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h2><img src="https://gitee.com/Slions/picbed/raw/master/img/arp3.png"/><h2 id="应答报文"><a href="#应答报文" class="headerlink" title="应答报文"></a>应答报文</h2><p>ARP应答分组中，将ARP请求中的源和目的地址进行交换，此外，变化的还有字段8 Opcode。其余字段内容不会发生变化。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/arp4.png"/><h1 id="ARP表"><a href="#ARP表" class="headerlink" title="ARP表"></a>ARP表</h1><p>设备通过ARP解析到目的MAC地址后，将会在自己的ARP表中增加IP地址到MAC地址的映射表项，以用于后续到同一目的地报文的转发。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/arp5.png"/><h2 id="动态ARP表"><a href="#动态ARP表" class="headerlink" title="动态ARP表"></a>动态ARP表</h2><p>动态ARP表项由ARP协议通过ARP报文自动生成和维护，可以被老化，可以被新的ARP报文更新，可以被静态ARP表项覆盖。当到达老化时间、接口down时会删除相应的动态ARP表项。</p><h2 id="静态ARP表"><a href="#静态ARP表" class="headerlink" title="静态ARP表"></a>静态ARP表</h2><p>静态ARP表项通过手工配置和维护，不会被老化，不会被动态ARP表项覆盖。</p><p><strong>配置静态ARP表项可以增加通信的安全性</strong>。静态ARP表项可以限制和指定IP地址的设备通信时只使用指定的MAC地址，此时攻击报文无法修改此表项的IP地址和MAC地址的映射关系，从而保护了本设备和指定设备间的正常通信。</p><h1 id="免费ARP"><a href="#免费ARP" class="headerlink" title="免费ARP"></a>免费ARP</h1><p>免费ARP指主机发送ARP查找自己的IP地址，通常发生在系统引导期间进行接口配置时。与标准ARP的区别就是免费ARP分组的目的IP地址字段封装的是自己的IP地址，即向所在网络请求自己的MAC地址。</p><p>免费ARP的作用有：</p><ol><li>一个主机可以通过它来确定另一个主机是否设置了相同的 IP地址。</li></ol><p>正常情况下发送免费ARP请求不会收到ARP应答，如果收到了一个ARP应答，则说明网络中存在与本机相同的IP地址的主机，发生了地址冲突。</p><ol start="2"><li>   更新其他主机高速缓存中旧的硬件地址信息。</li></ol><p>如果发送免费ARP的主机正好改变了硬件地址，如更换了接口卡。<br>其他主机接收到这个ARP请求的时候，发现自己的ARP高速缓存表中存在对应的IP地址，但是MAC地址不匹配，那么就需要利用接收的ARP请求来更新本地的ARP高速缓存表表项。</p><ol start="3"><li>网关利用免费ARP防止ARP攻击</li></ol><p>有些网关设备在一定的时间间隔内向网络主动发送免费ARP报文，让网络内的其他主机更新ARP表项中的网关MAC地址信息，以达到防止或缓解ARP攻击的效果。</p><ol start="4"><li>利用免费ARP进行ARP攻击</li></ol><p>ARP协议并不只在发送了ARP请求才接收ARP应答，计算机只要接收到ARP应答数据包，就会使用应答中的IP和MAC地址对本地的ARP缓存进行更新。<br>主机可以构造虚假的免费ARP应答，将ARP的源MAC地址设为错误的MAC地址，并把这个虚假的免费ARP应答发送到网络中，那么所有接收到这个免费ARP应答的主机都会更新本地ARP表项中相应IP地址对应的MAC地址。更新成功后，这些主机的数据报文就会被转发到错误的MAC地址，从而实现了ARP欺骗的攻击。</p><h1 id="代理ARP"><a href="#代理ARP" class="headerlink" title="代理ARP"></a>代理ARP</h1><p>代理ARP就是通过使用一个主机(通常为router)，来作为指定的设备使用自己的 MAC 地址来对另一设备的ARP请求作出应答。</p><p>为什么需要代理ARP？</p><p>先要了解，路由器的重要功能之一就是把局域网的广播包限制在该网内，阻止其扩散，否则会造成网络风暴。</p><p>ARP请求是个广播包，它询问的对象如果在同一个局域网内，就会收到应答。但是如果询问的对象不在同一个局域网该如何处理？路由器就提供了代理ARP为这个问题提供了解决方案。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/arp6.png"/><p>两台主机A和B处于同一网段但不同的广播段（不在同一物理网络上）时，主机A发送ARP请求主机B的MAC地址时，因为路由器不转发广播包的原因，ARP请求只能到达路由器。如果路由器启用了代理ARP功能，并知道主机B属于它连接的网络，那么路由器就用自己接口的MAC地址代替主机B的MAC地址来对主机A进行ARP应答。主机A接收ARP应答，但并不知道代理ARP的存在。</p><p>代理ARP的<strong>优缺点</strong></p><p><strong>优点</strong>：代理ARP能在不影响路由表的情况下添加一个新的Router，使子网对该主机变得透明化。一般代理ARP应该使用在主机没有配置默认网关或没有任何路由策略的网络上。</p><p><strong>缺点</strong>：从工作工程可以看到，这其实是一种ARP欺骗。而且，通过两个物理网络之间的路由器的代理ARP功能其实互相隐藏了物理网络，这导致无法对网络拓扑进行网络概括。此外，代理ARP增加了使用它的那段网络的ARP流量，主机需要更大的ARP缓存空间，也不会为不使用ARP进行地址解析的网络工作。</p><h1 id="ARP攻击"><a href="#ARP攻击" class="headerlink" title="ARP攻击"></a>ARP攻击</h1><p>我们知道，当PC1对PC2正常通信的时候（先别管攻击者PC3），PC2、PC1会先后建立对方的IP和MAC地址的映射（即建立ARP缓存表），同时对于交换机而言，它也具有记忆功能，会基于源MAC地址建立一个CAM缓存表（记录MAC对应接口的信息），理解为当PC1发送消息至交换机的Port1时，交换机会把源MAC（也就是MAC1）记录下来，添加一条MAC1和Port1的映射，之后交换机可以根据MAC帧的目的MAC进行端口转发，这个时候PC3只是处于监听状态，会把PC1的广播丢弃。</p><p>正常的PC3会把广播包丢弃，同样的PC3可以抓住这一环节的漏洞，把不属于自己的广播包接收，同时回应一个虚假的回应包，告诉PC1我就是PC2</p><p>（IP2-MAC3），这样PC1会收到两个回应包（一个正确的IP2-MAC2，一个虚假的IP2-MAC3），但是PC1并不知道到底哪个是真的，所以PC1会做出判断，并且判断后到达的为真，那么怎么让虚假的回应包后到达呢，PC3可以连续不断的发送这样的回应包，总会把哪个正确的回应包覆盖掉。</p><p>而后PC1会建立IP2-MAC3这样一条ARP缓存条目，以后当PC1给PC2发送信息的时候，PC1依据OSI模型从上至下在网络层给数据封装目的IP为IP2的包头，在链路层通过查询ARP缓存表封装目的MAC为MAC3的数据帧，送至交换机，根据查询CAM表，发现MAC3对应的接口为Port3，就这样把信息交付到了PC3，完成了一次ARP攻击。</p><p>一般情况下，受到ARP攻击的计算机会出现两种现象：</p><ol><li>不断弹出“本机的XXX段硬件地址与网络中的XXX段地址冲突”的对话框。</li><li>计算机不能正常上网，出现网络中断的症状。</li></ol><p>因为这种攻击是利用ARP请求报文进行“欺骗”的，所以防火墙会误以为是正常的请求数据包，不予拦截。因此普通的防火墙很难抵挡这种攻击。</p><h1 id="ARP老化时间"><a href="#ARP老化时间" class="headerlink" title="ARP老化时间"></a>ARP老化时间</h1><img src="https://gitee.com/Slions/picbed/raw/master/img/arp7.png"/><h1 id="命令解析"><a href="#命令解析" class="headerlink" title="命令解析"></a>命令解析</h1><p>arp指令用来管理系统的arp缓冲区，可以显示、删除、添加静态mac地址。ARP以各种方式操纵内核的ARP缓存。主要选项是清除地址映射项并手动设置。为了调试目的，ARP程序还允许对ARP缓存进行完全转储。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-v          显示详细信息--verbose；</span><br><span class="line">-n          以数字地址形式显示；</span><br><span class="line">-i          If选择界面；</span><br><span class="line">-H          type设置和查询arp缓存时检查 type 类型的地址；</span><br><span class="line">-a          [hostname]  显示指定 hostname 的所有入口；</span><br><span class="line">-d          hostname  删除指定 hostname 的所有入口；</span><br><span class="line">-D          使用ifa硬件地址界面；</span><br><span class="line">-s          hostname hw_addr  手工加入 hostname 的地址映射；</span><br><span class="line">-f          filename  从指定文件中读入 hostname 和硬件地址信息</span><br></pre></td></tr></table></figure><p><strong>常用示例</strong>：</p><p>添加静态映射：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp -i eth0 -s 192.168.1.6 ff:ee:ee:ee:ee:ee</span><br></pre></td></tr></table></figure><p>以数字方式显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arp -vn</span><br><span class="line">Address                  HWtype  HWaddress          Flags Mask            Iface</span><br><span class="line">10.0.2.2                 ether   52:54:00:12:35:02   C                     eth0</span><br><span class="line">192.168.1.6              ether   ff:ee:ee:ee:ee:ee   CM                    eth0</span><br></pre></td></tr></table></figure><p>删除一个arp表项，这里，删除之后只是硬件地址没有了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp -d 10.1.10.118</span><br></pre></td></tr></table></figure><p>指定回复的MAC地址，当eth0收到IP地址为10.0.0.2的请求时，将会用eth1的MAC地址回答。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp -i eth0 -Ds 10.0.0.2 eth1 pub</span><br></pre></td></tr></table></figure><blockquote><p>以上输出结果中用”C”表示ARP缓存内容，”M”表示永久性表项，”P”表示公共的表项。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;地址解析协议&lt;/strong&gt;（Address Resolution Protocol），其基本功能为透过目标设备的IP地址，查询目标设备的MAC地址，以保证通信的顺利进行。它是IPv4中网络层必不可少的协议，不过在IPv6中已不再适用，并被邻居发现协议（N</summary>
      
    
    
    
    <category term="Network" scheme="https://slions.github.io/categories/Network/"/>
    
    
    <category term="Network" scheme="https://slions.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>排查是否存在ip地址占用现象</title>
    <link href="https://slions.github.io/2022/03/20/%E6%8E%92%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8ip%E5%9C%B0%E5%9D%80%E5%8D%A0%E7%94%A8%E7%8E%B0%E8%B1%A1/"/>
    <id>https://slions.github.io/2022/03/20/%E6%8E%92%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8ip%E5%9C%B0%E5%9D%80%E5%8D%A0%E7%94%A8%E7%8E%B0%E8%B1%A1/</id>
    <published>2022-03-20T05:39:11.000Z</published>
    <updated>2022-03-20T07:41:56.088Z</updated>
    
    <content type="html"><![CDATA[<p>arping干嘛用的？</p><p>arping主要干的活就是查看ip的MAC地址及IP占用的问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-A ARP回复模式，更新邻居</span><br><span class="line">-b 保持广播</span><br><span class="line">-D 复制地址检测模式</span><br><span class="line">-f 得到第一个回复就 退出</span><br><span class="line">-q 不显示警告信息</span><br><span class="line">-U 主动的ARP模式，更新邻居</span><br><span class="line">-c&lt;数据包的数目&gt; 发送的数据包的数目</span><br><span class="line">-w&lt;超时时间&gt; 设置超时时间</span><br><span class="line">-I&lt;网卡&gt; 使用指定的以太网设备，默认情况下使用eth0</span><br><span class="line">-s 指定源IP地址</span><br><span class="line">-h 显示帮助信息</span><br><span class="line">-V 显示版本信息</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arping -I eth1 -c 3 -f -D 172.x.x.x</span><br></pre></td></tr></table></figure><img src="https://gitee.com/Slions/picbed/raw/master/img/ipp1.png"/><p>Received 0 response(s)   说明这个IP地址没有被局域网占用</p><p>Received 1 response(s)   已被占用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;arping干嘛用的？&lt;/p&gt;
&lt;p&gt;arping主要干的活就是查看ip的MAC地址及IP占用的问题。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    <category term="Network" scheme="https://slions.github.io/categories/Network/"/>
    
    
    <category term="Network" scheme="https://slions.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>改变系统默认dns解析顺序</title>
    <link href="https://slions.github.io/2022/03/20/%E6%94%B9%E5%8F%98%E7%B3%BB%E7%BB%9F%E9%BB%98%E8%AE%A4dns%E8%A7%A3%E6%9E%90%E9%A1%BA%E5%BA%8F/"/>
    <id>https://slions.github.io/2022/03/20/%E6%94%B9%E5%8F%98%E7%B3%BB%E7%BB%9F%E9%BB%98%E8%AE%A4dns%E8%A7%A3%E6%9E%90%E9%A1%BA%E5%BA%8F/</id>
    <published>2022-03-20T05:38:35.000Z</published>
    <updated>2022-03-20T06:56:02.647Z</updated>
    
    <content type="html"><![CDATA[<p>linux中，往往解析一个域名时，先会找/etc/hosts文件，如果/etc/hosts文件没有对应，才会去找DNS，如何让主机先找DNS呢？</p><p>在<code>/etc/nsswitch.conf</code>这个文件里定义:</p><p>编辑<code>/etc/nsswitch.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hosts:   files dns   //找到这段，改成下面这样</span><br><span class="line">hosts:   dns files</span><br></pre></td></tr></table></figure><p>其中dns代表/etc/resolv.conf，files代表/etc/hosts，这样，主机就会先去找DNS，再去找hosts。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;linux中，往往解析一个域名时，先会找/etc/hosts文件，如果/etc/hosts文件没有对应，才会去找DNS，如何让主机先找DNS呢？&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;/etc/nsswitch.conf&lt;/code&gt;这个文件里定义:&lt;/p&gt;
&lt;p&gt;编辑&lt;code&gt;/</summary>
      
    
    
    
    <category term="Network" scheme="https://slions.github.io/categories/Network/"/>
    
    
    <category term="Network" scheme="https://slions.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>查看端口被占用的四种方式</title>
    <link href="https://slions.github.io/2022/03/20/%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://slions.github.io/2022/03/20/%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2022-03-20T05:38:16.000Z</published>
    <updated>2022-03-20T06:53:04.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="netstat-anlp或ss"><a href="#netstat-anlp或ss" class="headerlink" title="netstat -anlp或ss"></a>netstat -anlp或ss</h1><img src="https://gitee.com/Slions/picbed/raw/master/img/s1.png"/><h1 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h1><img src="https://gitee.com/Slions/picbed/raw/master/img/s2.png"/><h1 id="fuser"><a href="#fuser" class="headerlink" title="fuser"></a>fuser</h1><img src="https://gitee.com/Slions/picbed/raw/master/img/s3.png"/><h1 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h1><img src="https://gitee.com/Slions/picbed/raw/master/img/s4.png"/>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;netstat-anlp或ss&quot;&gt;&lt;a href=&quot;#netstat-anlp或ss&quot; class=&quot;headerlink&quot; title=&quot;netstat -anlp或ss&quot;&gt;&lt;/a&gt;netstat -anlp或ss&lt;/h1&gt;&lt;img src=&quot;https://g</summary>
      
    
    
    
    <category term="Network" scheme="https://slions.github.io/categories/Network/"/>
    
    
    <category term="Network" scheme="https://slions.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>RARP</title>
    <link href="https://slions.github.io/2022/03/20/RARP/"/>
    <id>https://slions.github.io/2022/03/20/RARP/</id>
    <published>2022-03-20T05:37:49.000Z</published>
    <updated>2022-03-20T06:49:58.449Z</updated>
    
    <content type="html"><![CDATA[<p><strong>反向地址转换</strong>协议简称RARP。</p><p>RARP是许多无盘系统在引导时用来获取IP地址的。RARP实现起来要比ARP复杂，因为RARP请求是在硬件层上广播的。这意味着他们不经过路由器进行转发。为了能让无盘系统在RARP关机的情况下也能引导，通常要在一个网络上（一根电缆）提供多个RARP服务器。</p><p>允许局域网的物理机器从网关服务器的 ARP 表或者缓存上请求其 IP 地址。网络管理员在局域网网关路由器里创建一个表以映射物理地址（MAC）和与其对应的 IP 地址。</p><p>当设置一台新的机器时，其 RARP 客户机程序需要向路由器上的 RARP 服务器请求相应的 IP 地址。假设在路由表中已经设置了一个记录，RARP 服务器将会返回 IP 地址给机器，此机器就会存储起来以便日后使用。 RARP 可以使用于以太网、光纤分布式数据接口及令牌环 LAN。</p><h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><ol><li>发送主机发送一个本地的RARP广播，在此广播包中，声明自己的MAC地址并且请求任何收到此请求的RARP服务器分配一个IP地址；</li><li>本地网段上的RARP服务器收到此请求后，检查其RARP列表，查找该MAC地址对应的IP地址；</li><li>如果存在，RARP服务器就给源主机发送一个响应数据包并将此IP地址提供给对方主机使用；</li><li>如果不存在，RARP服务器对此不做任何的响应；</li><li>源主机收到从RARP服务器的响应信息，就利用得到的IP地址进行通讯；如果一直没有收到RARP服务器的响应信息，表示初始化失败。</li></ol><blockquote><p>如果在第1-3中被ARP病毒攻击，则服务器做出的反映就会被占用，源主机同样得不到RARP服务器的响应信息，此时并不是服务器没有响应而是服务器返回的源主机的IP被占用。</p></blockquote><p>发送的是广播包，所以，正常情况下，如果多个服务器都对该广播服务，那冲突是不可避免的。</p><p><strong>解决策略</strong></p><p>方法一：所有服务器分配的IP地址一样<br>方法二：再一个局域网里为什么存在多个服务器，可以只保留一个<br>方法三：通过VLAN进行控制</p><p>是可以设置一个服务器为主服务器，收到请求后立即应答，其他的在收到后延时应答，或者在多次收到同样的请求的时候才应答，此时说明可能住服务器关机了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;反向地址转换&lt;/strong&gt;协议简称RARP。&lt;/p&gt;
&lt;p&gt;RARP是许多无盘系统在引导时用来获取IP地址的。RARP实现起来要比ARP复杂，因为RARP请求是在硬件层上广播的。这意味着他们不经过路由器进行转发。为了能让无盘系统在RARP关机的情况下也能</summary>
      
    
    
    
    <category term="Network" scheme="https://slions.github.io/categories/Network/"/>
    
    
    <category term="Network" scheme="https://slions.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>ping和traceroute</title>
    <link href="https://slions.github.io/2022/03/20/ping%E5%92%8Ctraceroute/"/>
    <id>https://slions.github.io/2022/03/20/ping%E5%92%8Ctraceroute/</id>
    <published>2022-03-20T05:37:38.000Z</published>
    <updated>2022-03-20T08:07:44.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h1><p>ping 程序的主要目的是测试主机是否可达，它发送 ICMP 回显请求报文给目的主机，返回 ICMP 回显应答。</p><h2 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h2><p>ping 程序一般会周期性持续地发送 ICMP 请求报文，除非用户手动终止，或指定了发包个数，回显请求和回显应答通过序列号（icmp_seq）进行匹配，下图中序列号依次为 1、2、..</p><p>ping 程序通过数据报中记录的发送请求时间值和接收到回显应答报文的当前时间值，计算往返耗时（time）</p><img src="https://gitee.com/Slions/picbed/raw/master/img/ping1.png"/><blockquote><p>为什么 ping 第一次一般会产生更多耗时：</p><p> 因为 ping 第一次的时候，需要首先进行 ARP 解析，获取 IP 地址对应的 MAC 地址（同时将映射关系缓存），</p><p> 而下次 ping 的时候会直接从 ARP 高速缓存读取，少了一个步骤，自然时间就缩短了。</p></blockquote><h2 id="ping报文"><a href="#ping报文" class="headerlink" title="ping报文"></a>ping报文</h2><p>Request的报文类型为8。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/ping2.png"/><p>Reply的类型为0。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/ping3.png"/><p>通过具体的ping报文可以看到ping报文的大小为84字节。其中ICMP报文56个字节，再加上20个字节的IP首部和8个字节的ICMP首部。因此IP报文的总长度为84字节。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/ping4.png"/><p>可以改变ICMP的报文大小，通过-s命令， 将ICMP报文大小设置为32字节。加上20字节的IP首部以及8字节的ICMP首部，总共60个字节。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/ping5.png"/><p>Ping程序中还可以通过设置ping的次数，通过-c。在ping了3次以后，ping程序自动停止。</p><h2 id="IP记录路由选项"><a href="#IP记录路由选项" class="headerlink" title="IP记录路由选项"></a>IP记录路由选项</h2><p>ping程序还可以记录所经过路径的IP地址。这个通过-R的方法来实现。Ping程序在发送出去的IP数据报中设置IP RR选项。这样每个处理该数据报的路由器都把它的IP地址放入选项字段中。当数据包达到目的端时，IP地址清单就复制到ICMP回显应答中。当ping程序收到回显应答时，它就打印出这份IP地址清单。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/ping6.png"/><p><strong>弊端：</strong></p><p>由于IP首部中的首部长度字段只有4bit，因此IP首部最长只能包含15个32bit的字=60字节。IP首部为20个字节。RR选项用去3个字节。这样只剩下37个字节来存放IP地址清单，一个IP地址为4个字节，因此最大也就只能存放9个IP地址。在当前的互联网场景下，9个IP地址太少了。一般情况下都满足不了要求。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/ping7.png"/><h1 id="Traceroute"><a href="#Traceroute" class="headerlink" title="Traceroute"></a>Traceroute</h1><p>前面讲到IP可以记录路由选项。但是IP首部中留给选项空间有限，不可能存放太多的路径，最多只能存放9个地址，对于现在的网络来说远远不够，那么如果我们想探究网络路径可以用traceroute命令。</p><h2 id="工作机制-1"><a href="#工作机制-1" class="headerlink" title="工作机制"></a>工作机制</h2><p>通过封装一份 UDP 数据报（指定一个不可能使用的端口，30000以上），依次将数据报的 TTL 值置为 1、2、3…，并发送给目的主机。</p><ol><li>当路径上第一个路由器收到 TTL 值为 1 的数据报时，首先将该数据报的 TTL 值减 1，发现 TTL 值为 0，而自己并非该数据报的目的主机，就会向源主机发送一个 ICMP 超时报文，traceroute 收到该超时报文，就得到了路径上第一台路由器的地址；</li><li>然后照此原理，traceroute 发送 TTL 为 2 的数据报时，会收到路径上第二台路由器返回的 ICMP 超时报文，记录第二台路由器的地址；</li><li>直到报文到达目的主机，目的主机不会返回 ICMP 超时，但由于端口无法使用，就会返回一份端口不可达报文给源主机，源主机收到端口不可达报文，证明数据报已经到达了目的地，停止后续的 UDP 数据报发送，将记录的路径依次打印出来，使命完成，结束任务。</li></ol><img src="https://gitee.com/Slions/picbed/raw/master/img/traceroute1.png"/><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>Windows下使用的是ICMP报文，而linux下使用的是UDP报文。</p><p>首先来看windows的报文。从报文中可以看出ttl不断的在增长。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/traceroute2.png"/><p>而且主机发出的报文全都是ICMP报文。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/traceroute3.png"/><p>Linux下的报文可以看到主机发出的报文都是UDP报文，而且每个报文都带有一个目的端口，端口每次都在增长。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/traceroute4.png"/><p>带的是一个UDP报文，而非ICMP报文</p><img src="https://gitee.com/Slions/picbed/raw/master/img/traceroute5.png"/><p>但是从对端反馈回的报文都是ICMP报文。且最终目的地址反馈一个port unreachable的报文。这个端口不可达的报文在windows系统中并没有找到。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/traceroute6.png"/><p>从上面的报文对比可以看到windows下和linux下的traceroute报文是不一样的。Windows下是纯粹使用ICMP报文。直到找到目的地址，并记录经过的路径。</p><p>而linux下是发出一个UDP报文。且同样也设置TTL时长，但选择一个不可能的值作为UDP端口(大于30000),使目的主机的任何一个应用程序都不可能使用这个端口。最终目的主机会产生一份端口不可达的错误。此时就判断结束。具体流程参考下图</p><img src="https://gitee.com/Slions/picbed/raw/master/img/traceroute7.png"/><h2 id="命令输出解析"><a href="#命令输出解析" class="headerlink" title="命令输出解析"></a>命令输出解析</h2><img src="https://gitee.com/Slions/picbed/raw/master/img/traceroute9.png"/><p>记录按序列号从1开始，每个纪录就是一跳 ，每跳表示一个网关，我们看到每行有三个时间，单位是 ms，其实就是-q的默认参数。探测数据包向每个网关发送三个数据包后，网关响应后返回的时间；如果您用 traceroute -q 4 <a href="http://www.123.com/">www.123.com</a> ，表示向每个网关发送4个数据包。</p><h2 id="traceroute约束与缺陷"><a href="#traceroute约束与缺陷" class="headerlink" title="traceroute约束与缺陷"></a>traceroute约束与缺陷</h2><h3 id="约束："><a href="#约束：" class="headerlink" title="约束："></a>约束：</h3><ol><li>不能保证现在的路由也是将来所要采用的路由，甚至两份连续的 IP 数据报都可能采用不同的路由；</li><li>不能保证 ICMP 报文的路由与 traceoute 程序发送的 UDP 数据报采用同一路由，时间测量可能不准；</li><li>返回的 ICMP 报文中的信源 IP 地址是 UDP 数据报到达的路由器接口的 IP 地址；</li></ol><img src="https://gitee.com/Slions/picbed/raw/master/img/traceroute8.png"/><p>当从网络1某主机执行 traceroute 程序到网络3某主机，返回的路径将是 if1 和 if3 的地址；而反方向，将打印出 if4 和 if2 的地址。</p><h3 id="缺陷："><a href="#缺陷：" class="headerlink" title="缺陷："></a>缺陷：</h3><ol><li>中间路由器有可能做了限制，不返回 ICMP 超时报文，traceroute 就无法获得其地址了，只能打印出 * 或 no reply</li><li>目的主机可能由于安全原因不会向源主机返回端口不可达的 ICMP 报文，尽管探测数据报已经到达了目的主机，但 traceroute 程序收不到端口不可达报文，就仍会持续发送请求 …</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>如果在局域网中的不同网段之间，我们可以通过traceroute 来排查问题所在，是主机的问题还是网关的问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ping&quot;&gt;&lt;a href=&quot;#Ping&quot; class=&quot;headerlink&quot; title=&quot;Ping&quot;&gt;&lt;/a&gt;Ping&lt;/h1&gt;&lt;p&gt;ping 程序的主要目的是测试主机是否可达，它发送 ICMP 回显请求报文给目的主机，返回 ICMP 回显应答。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Network" scheme="https://slions.github.io/categories/Network/"/>
    
    
    <category term="Network" scheme="https://slions.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>ip选路</title>
    <link href="https://slions.github.io/2022/03/20/ip%E9%80%89%E8%B7%AF/"/>
    <id>https://slions.github.io/2022/03/20/ip%E9%80%89%E8%B7%AF/</id>
    <published>2022-03-20T05:37:09.000Z</published>
    <updated>2022-03-20T06:41:54.570Z</updated>
    
    <content type="html"><![CDATA[<p>选路是IP最重要的功能之一。需要进行选路的数据报可以由本地主机产生，也可以由其他主机产生。在后一种情况下，主机必须配置成一个路由器，否则通过网络接口接收到的数据报，如果目的地址不是本机就要被丢弃（例如，悄无声息地被丢弃）。</p><h1 id="选路原理"><a href="#选路原理" class="headerlink" title="选路原理"></a>选路原理</h1><p>ip搜索路由表的步骤：</p><ol><li>搜索匹配的主机地址；</li><li>搜索匹配的网络地址；</li><li>搜索默认表项（默认表项一般在路由表中被指定为一个网络表项，其网络号为0）。匹配主机地址步骤始终发生在匹配网络地址步骤之前。</li></ol><p>IP层进行的选路实际上是一种选路机制，它搜索路由表并决定向哪个网络接口发送分组。这区别于选路策略，它只是一组决定把哪些路由放入路由表的规则。I P执行选路机制，而路由守护程序则一般提供选路策略。</p><h1 id="简单路由表"><a href="#简单路由表" class="headerlink" title="简单路由表"></a>简单路由表</h1><p>首先来看一看一些典型的主机路由表。在主机s v r 4上，先执行带-r选项的netstat命令列出路由表，然后以-n选项再次执行该命令，以数字格式打印出I P地址（我们这样做是因为路由表中的一些表项是网络地址，而不是主机地址。如果没有- n选项，netstat命令将搜索文件/etc/networks并列出其中的网络名。这样会与另一种形式的名字—网络名加主机名相混淆）。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/ip route1.png"/><p>对于一个给定的路由器，可以打印出五种不同的标志（flag)：</p><ul><li><strong>U</strong> 该路由可以使用。</li><li><strong>G</strong> 该路由是到一个网关（路由器）。如果没有设置该标志，说明目的地是直接相连的。</li><li><strong>H</strong> 该路由是到一个主机，也就是说，目的地址是一个完整的主机地址。如果没有设置该标志，说明该路由是到一个网络，而目的地址是一个网络地址：一个网络号，或者网络号与子网号的组合。</li><li><strong>D</strong> 该路由是由重定向报文创建的。</li><li><strong>M</strong> 该路由已被重定向报文修改。</li></ul><p>标志G是非常重要的，因为由它区分了间接路由和直接路由（对于直接路由来说是不设置标志G的）IP地址指明的是最终的目的地，但是链路层地址指明的是网关（即下一站路由器）。简单的说，直接路由时MAC地址和IP地址都是目的地址的MAC和IP地址；而间接路由时MAC地址为网关的MAC地址，而IP地址则还是目的IP地址。</p><p> <strong>Refcnt</strong>: 正在使用路由的活动进程个数。<br> <strong>Use</strong>: 通过该路由发送的分组数。<br> <strong>Interface</strong>: 网络接口。</p><blockquote><p><strong>基本概念</strong></p><p>一般，我们在配置好一个网络接口的时候，一个路由就被直接创建好了。当然我们也可以手动添加路由。用route add命令就可以了。</p><p>而当一个IP包在某一个路由器的时候发现没有路由可走，那么该路由器就会给源主机发送“主机不可达”或者“网络不可达”的ICMP包来报错。如果是被转发的数据报，那么就给原始发送端发送一份I C M P主机不可达的差错报文。</p><p>注意，一般的操作系统默认是没有路由功能的（不能转发数据包），这需要自己配置。</p></blockquote><h1 id="ICMP重定向差错"><a href="#ICMP重定向差错" class="headerlink" title="ICMP重定向差错"></a>ICMP重定向差错</h1><p>当I P数据报应该被发送到另一个路由器时，收到数据报的路由器就要发送I C M P重定向差</p><p>错报文给I P数据报的发送端。这在概念上是很简单的。只有当主机可以选择路由器发送分组的情况下，我们才可能看到I C M P重定向报文。</p><ol><li>我们假定主机发送一份I P数据报给R 1。这种选路决策经常发生，因为R 1是该主机的默认路由。</li><li>R1收到数据报并且检查它的路由表，发现R 2是发送该数据报的下一站。当它把数据报发送给R2时，R 1检测到它正在发送的接口与数据报到达接口是相同的（即主机和两个路由器所在的L A N）。这样就给路由器发送重定向报文给原始发送端提供了线索。</li><li>R1 发送一份I C M P重定向报文给主机，告诉它以后把数据报发送给R 2而不是R 1。</li></ol><img src="https://gitee.com/Slions/picbed/raw/master/img/ip route2.png"/><h1 id="ICMP的IP重定向报文和路由发现报文"><a href="#ICMP的IP重定向报文和路由发现报文" class="headerlink" title="ICMP的IP重定向报文和路由发现报文"></a>ICMP的IP重定向报文和路由发现报文</h1><p>当IP包在某一个地方转向的时候，都回给发送IP报的源主机一个ICMP重定向报文，而源主机就可以利用这个信息来更新自己的路由表，这样，随着网络通信的逐渐增多，路由表也就越来越完备，数据转发的速度也会越来越快。我们需要注意的是：</p><ul><li>重定向报文只能由路由器发出。</li><li>重定向报文为主机所用，而不是为路由器所用。</li></ul><p>在主机引导的时候，一般会发送在网内广播一个路由请求的ICMP报文，而多个路由器则会回应一个路由通告报文。而且，路由其本身不定期的在网络内发布路由通告报文，这样，根据这些报文，每一个主机都会有机会建立自己的路由表而实现网络通信。路由器在一份通告报文中可以通告多个地址，并且给出每一个地址的优先等级，这个优先等级是该IP作为默认路由的等级，至于怎么算的就不深究了。</p><p>路由器一般会在450-600秒的时间间隔内发布一次通告，而一个给定的通告报文的寿命是30分钟。而主机在引导的时候会每三秒发送一次请求报文，一旦接受到一个有效的通告报文，就停止发送请求报文。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;选路是IP最重要的功能之一。需要进行选路的数据报可以由本地主机产生，也可以由其他主机产生。在后一种情况下，主机必须配置成一个路由器，否则通过网络接口接收到的数据报，如果目的地址不是本机就要被丢弃（例如，悄无声息地被丢弃）。&lt;/p&gt;
&lt;h1 id=&quot;选路原理&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="Network" scheme="https://slions.github.io/categories/Network/"/>
    
    
    <category term="Network" scheme="https://slions.github.io/tags/Network/"/>
    
  </entry>
  
</feed>
