<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://slions.github.io/atom.xml" rel="self"/>
  
  <link href="https://slions.github.io/"/>
  <updated>2021-08-30T12:24:39.069Z</updated>
  <id>https://slions.github.io/</id>
  
  <author>
    <name>Jingyu Shi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>expect使用</title>
    <link href="https://slions.github.io/2021/08/30/expect%E4%BD%BF%E7%94%A8/"/>
    <id>https://slions.github.io/2021/08/30/expect%E4%BD%BF%E7%94%A8/</id>
    <published>2021-08-30T07:54:09.000Z</published>
    <updated>2021-08-30T12:24:39.069Z</updated>
    
    <content type="html"><![CDATA[<p>使用ssh和scp时常常需要交互式的输入yes和密码，对于自动化运维中这种还需要人工点击完成的情况就比较烦了，linux的expect工具可以优雅的解决此问题。</p><p>expect是建立在tcl基础上的一个工具，可以让需要交互的任务自动化的完成，相当于是模拟用户进行交互性操作。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y expect</span></span><br></pre></td></tr></table></figure><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ol><li>​    定义脚本的执行shell，类似于bash等shell功能。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">！/usr/bin/expect</span></span><br></pre></td></tr></table></figure><ol start="2"><li>​    设置超时时间，单位为秒，设置为-1意为永不超时。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set timeout 30</span><br></pre></td></tr></table></figure><ol start="3"><li>​    spawn</li></ol><p>spawn是进入expect环境后才能执行的命令，不能直接在默认的shell环境中进行执行，主要功能是传递交互指令。</p><ol start="4"><li>​    expect</li></ol><p>同样是expect内部命令，判断输出结果中是否包含某个字符串，没有即立刻返回，否则就等待一段时间后退出，等待的时间由timeout指定。</p><ol start="5"><li>​    send</li></ol><p>发送交互值，代替我们手动输入，命令字符串后面加上<code>\r</code>代表敲回车。</p><ol start="6"><li>​    interact</li></ol><p>执行完后保持交互状态，把控制权交给控制台。</p><ol start="7"><li>​    exp_continue</li></ol><p>继续执行接下来的交互操作。</p><ol start="8"><li>​    $argv</li></ol><p>expect可以接收从bash传递的参数，可以使用<code>[lindex $argv n]</code>,n从0开始</p><p><strong>示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# cat interact</span><br><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/expect</span></span><br><span class="line">set timeout 30</span><br><span class="line">set passwd &quot;123&quot;</span><br><span class="line">spawn ssh 192.168.100.11</span><br><span class="line">expect &#123;</span><br><span class="line">  &quot;(yes/no)&quot; &#123; send &quot;yes\r&quot;,exp_continue &#125;</span><br><span class="line">  &quot;password:&quot; &#123; send &quot;$passwd\r&quot; &#125;</span><br><span class="line">&#125;</span><br><span class="line">expect &quot;#&quot; &#123;send &quot;cat /etc/sysconfig/network-scripts/ifcfg-ens33\r&quot;&#125;</span><br><span class="line">interact</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# chmod +x interact</span><br><span class="line">[root@slions_pc1 ~]# ./interact</span><br><span class="line">spawn ssh 192.168.100.11</span><br><span class="line">root@192.168.100.11&#x27;s password:</span><br><span class="line">Last login: Mon Aug 30 19:34:19 2021 from 192.168.100.10</span><br><span class="line">[root@slions_pc2 ~]# cat /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=285fd0e1-1041-4470-abc1-2c97ee6764cf</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.100.11</span><br><span class="line">PREFIX=24</span><br><span class="line">GATEWAY=192.168.100.2</span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line">[root@slions_pc2 ~]# exit</span><br><span class="line">登出</span><br><span class="line">Connection to 192.168.100.11 closed.</span><br><span class="line">[root@slions_pc1 ~]#</span><br></pre></td></tr></table></figure><h1 id="expect使用场景"><a href="#expect使用场景" class="headerlink" title="expect使用场景"></a>expect使用场景</h1><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# cat expect_ssh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/expect</span></span><br><span class="line">set timeout -1</span><br><span class="line">set passwd [lindex $argv 0]</span><br><span class="line">set port [lindex $argv 1]</span><br><span class="line">set dest_ip [lindex $argv 2]</span><br><span class="line">set cmd [lindex $argv 3]</span><br><span class="line"></span><br><span class="line">if &#123;$argc &lt; 4&#125; &#123;</span><br><span class="line">    #do something</span><br><span class="line">    send_user &quot;usage: $argv0 &lt;remote_passwd&gt; &lt;remote_port&gt; &lt;remote_addr&gt; &lt;remote_cmd&gt; \n&quot;</span><br><span class="line">    exit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">spawn ssh -p $port $dest_ip $cmd</span><br><span class="line">expect &#123;</span><br><span class="line">  &quot;(yes/no)?&quot;</span><br><span class="line">  &#123;</span><br><span class="line">    send &quot;yes\r&quot;</span><br><span class="line">    expect &quot;password:&quot; &#123; send &quot;$passwd\r&quot; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &quot;password:&quot;</span><br><span class="line">  &#123;</span><br><span class="line">    send &quot;$passwd\r&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# chmod +x expect_ssh</span><br><span class="line">[root@slions_pc1 ~]# ./expect_ssh 123 22 192.168.100.11 &#x27;lsblk&#x27;</span><br><span class="line">spawn ssh -p 22 192.168.100.11 lsblk</span><br><span class="line">root@192.168.100.11&#x27;s password:</span><br><span class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               8:0    0   20G  0 disk</span><br><span class="line">├─sda1            8:1    0    1G  0 part /boot</span><br><span class="line">└─sda2            8:2    0   19G  0 part</span><br><span class="line">  ├─centos-root 253:0    0   18G  0 lvm  /</span><br><span class="line">  └─centos-swap 253:1    0 1020M  0 lvm  [SWAP]</span><br><span class="line">sr0              11:0    1   10G  0 rom</span><br></pre></td></tr></table></figure><p>改用bash脚本中的写法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# cat expect.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">password=$1</span><br><span class="line">port=$2</span><br><span class="line">dest_ip=$3</span><br><span class="line">cmd=$4</span><br><span class="line">/usr/bin/expect &lt;&lt;EOF</span><br><span class="line">set timeout -1</span><br><span class="line">spawn ssh -p $port $dest_ip $cmd</span><br><span class="line">expect &#123;</span><br><span class="line">    &quot;(yes/no)&quot; &#123; send &quot;yes\r&quot;; exp_continue &#125;</span><br><span class="line">    &quot;password:&quot; &#123; send &quot;$password\r&quot; &#125;</span><br><span class="line">&#125;</span><br><span class="line">expect eof</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# cat expect_scp</span><br><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/expect</span></span><br><span class="line">set timeout -1</span><br><span class="line">set passwd [lindex $argv 0]</span><br><span class="line">set port [lindex $argv 1]</span><br><span class="line">set src_file [lindex $argv 2]</span><br><span class="line">set dest_file [lindex $argv 3]</span><br><span class="line"></span><br><span class="line">if &#123;$argc &lt; 4&#125; &#123;</span><br><span class="line">    #do something</span><br><span class="line">    send_user &quot;usage: $argv0 &lt;remote_passwd&gt; &lt;remote_port&gt; &lt;src_file&gt; &lt;dest_file&gt; \n&quot;</span><br><span class="line">    exit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">spawn scp -P $port $src_file $dest_file</span><br><span class="line">    expect &#123;</span><br><span class="line">        &quot;(yes/no)?&quot;</span><br><span class="line">        &#123;</span><br><span class="line">            send &quot;yes\r&quot;</span><br><span class="line">            expect &quot;*assword:&quot; &#123; send &quot;$passwd\r&quot;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &quot;*assword:&quot;</span><br><span class="line">        &#123;</span><br><span class="line">            send &quot;$passwd\r&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">expect &quot;100%&quot;</span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# chmod +x expect_scp</span><br><span class="line">[root@slions_pc1 ~]# ./expect_scp 123 22 192.168.100.11:/etc/passwd /root/192.168.100.11.passwd_file</span><br><span class="line">spawn scp -P 22 192.168.100.11:/etc/passwd /root/192.168.100.11.passwd_file</span><br><span class="line">root@192.168.100.11&#x27;s password:</span><br><span class="line">passwd                                                                                                                                                 100% 1099   706.8KB/s   00:00</span><br></pre></td></tr></table></figure><h2 id="ssh免密"><a href="#ssh免密" class="headerlink" title="ssh免密"></a>ssh免密</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# cat ssh.file</span><br><span class="line">192.168.100.10 123</span><br><span class="line">192.168.100.11 123</span><br><span class="line">[root@slions_pc1 ~]# cat sshcopy.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">sed -ri &#x27;35a\StrictHostKeyChecking no&#x27; /etc/ssh/ssh_config</span><br><span class="line">systemctl restart sshd</span><br><span class="line"></span><br><span class="line">if [ ! -f ~/.ssh/id_rsa ]</span><br><span class="line">then</span><br><span class="line">        ssh-keygen -P &quot;&quot; -t rsa -f ~/.ssh/id_rsa</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ ! -f ssh.file ]</span><br><span class="line">then</span><br><span class="line">        echo -e &quot;$&#123;RED_COL&#125;请确认你的ssh.file已经生成$&#123;RESET_COL&#125;&quot;</span><br><span class="line">        break</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">while read line</span><br><span class="line">do</span><br><span class="line">        &#123;</span><br><span class="line">        USER=`whoami`</span><br><span class="line">        IP=`echo $line |awk &#x27;&#123;print $1&#125;&#x27;`</span><br><span class="line">        PASSWORD=`echo $line |awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        /usr/bin/expect &lt;&lt;-EOF</span><br><span class="line">        set timeout -1</span><br><span class="line">        spawn ssh-copy-id $USER@$IP</span><br><span class="line">        expect &#123;</span><br><span class="line">                        &quot;&#123;yes/no&#125;&quot; &#123; send &quot;yes\r&quot;; exp_continue &#125;</span><br><span class="line">                        &quot;password:&quot; &#123; send &quot;$PASSWORD\r&quot; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        expect eof</span><br><span class="line">        EOF</span><br><span class="line">        &#125;&amp;</span><br><span class="line">done &lt; ssh.file</span><br><span class="line">wait</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用ssh和scp时常常需要交互式的输入yes和密码，对于自动化运维中这种还需要人工点击完成的情况就比较烦了，linux的expect工具可以优雅的解决此问题。&lt;/p&gt;
&lt;p&gt;expect是建立在tcl基础上的一个工具，可以让需要交互的任务自动化的完成，相当于是模拟用户进行</summary>
      
    
    
    
    <category term="linux系统" scheme="https://slions.github.io/categories/linux%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="linux" scheme="https://slions.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>（五）ansible常用模块</title>
    <link href="https://slions.github.io/2021/08/29/%EF%BC%88%E4%BA%94%EF%BC%89ansible%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    <id>https://slions.github.io/2021/08/29/%EF%BC%88%E4%BA%94%EF%BC%89ansible%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</id>
    <published>2021-08-29T04:10:07.000Z</published>
    <updated>2021-08-29T11:19:12.834Z</updated>
    
    <content type="html"><![CDATA[<p>ansible基于模块工作，ansible 2.9.24版本已经有3387个模块了，当然这些模块不需要也没精力全懂，但了解些常用模块的使用方式对日常运维过程中大有脾益。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ansible]# ansible --version</span><br><span class="line">ansible 2.9.24</span><br><span class="line">  config file = /etc/ansible/ansible.cfg</span><br><span class="line">  configured module search path = [u&#x27;/root/.ansible/plugins/modules&#x27;, u&#x27;/usr/share/ansible/plugins/modules&#x27;]</span><br><span class="line">  ansible python module location = /usr/lib/python2.7/site-packages/ansible</span><br><span class="line">  executable location = /usr/bin/ansible</span><br><span class="line">  python version = 2.7.5 (default, Oct 30 2018, 23:45:53) [GCC 4.8.5 20150623 (Red Hat 4.8.5-36)]</span><br><span class="line">[root@slions_pc1 ansible]# ansible-doc -l|wc -l</span><br><span class="line">3387</span><br></pre></td></tr></table></figure><h1 id="命令相关的模块"><a href="#命令相关的模块" class="headerlink" title="命令相关的模块"></a>命令相关的模块</h1><h2 id="command"><a href="#command" class="headerlink" title="command"></a>command</h2><p>ansible ad-hoc的默认模块，用于在被控主机执行命令，其中要注意的是：<code>&quot;&lt;&quot;</code>, <code>&quot;&gt;&quot;</code>, <code>&quot;|&quot;</code>, <code>&quot;;&quot;</code>, <code>&quot;&amp;&quot;</code>,<code>&quot;$&quot;</code>等特殊字符不能在<code>command</code>模块中使用，如果需要使用，则用<code>shell</code>模块。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ansible]# ansible-doc -s command</span><br><span class="line">- name: Execute commands on targets</span><br><span class="line">  command:</span><br><span class="line">      chdir:                 # 在执行命令之前，先切换到该目录</span><br><span class="line">      creates:               # 当指定的文件存在时，就不执行对应命令</span><br><span class="line">      free_form:             # 要执行的Linux指令，一般使用Ansible的-a参数代替。</span><br><span class="line">      removes:               # 当指定的文件不存在时，就不执行对应命令</span><br></pre></td></tr></table></figure><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p>专门用来执行<code>shell</code>命令的模块，和<code>command</code>模块一样，参数基本一样，都有<code>chdir,creates,removes</code>等参数，但是支持解析特殊 shell 符号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ansible]# ansible-doc -s shell</span><br><span class="line">- name: Execute shell commands on targets</span><br><span class="line">  shell:</span><br><span class="line">      chdir:                 # 在执行命令之前，先切换到该目录</span><br><span class="line">      creates:               # 当指定的文件存在时，就不执行对应命令</span><br><span class="line">      free_form:             # 要执行的Linux指令，一般使用Ansible的-a参数代替。</span><br><span class="line">      removes:               # 当指定的文件不存在时，就不执行对应命令</span><br></pre></td></tr></table></figure><p>在ansible中使⽤<code>shell</code>或<code>command</code>模块⼀定要注意，它们默认不满足幂等性，很多操作会重复执⾏，但有些操作是不允许重复执⾏的。例如mysql的初始化命令mysql_install_db，它只能在第⼀次配置的过程中初始化⼀次，其他任何时候如⾮需要则不允许执⾏。这时候要实现幂等性，可以通过模块的<strong>creates和removes</strong>选项进⾏判断，但⽆论如何，在执⾏这两个模块的时候都需要考虑要执⾏的命令是否应该实现幂等性。</p><h2 id="raw"><a href="#raw" class="headerlink" title="raw"></a>raw</h2><p>执行底层 shell 命令。<code>command</code> 和<code> shell</code> 模块都是通过目标主机上的 python 代码启动  <code>/bin/bash</code> 来执行命令的，但目标主机上可能没有安装 python，这时只能使用 <code>raw </code>模块在远程主机上直接启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ansible]# ansible-doc -s raw</span><br><span class="line">- name: Executes a low-down and dirty command</span><br><span class="line">  raw:</span><br><span class="line">      executable:            # 切换shell来执行命令，需要使用命令的绝对路径,如/bin/bash</span><br><span class="line">      free_form:             # 要执行的Linux指令，一般使用Ansible的-a参数代替。</span><br></pre></td></tr></table></figure><h2 id="script"><a href="#script" class="headerlink" title="script"></a>script</h2><p>在远程主机上执行脚本文件 ，在执行脚本前，ansible会将本地脚本传输到远程主机，然后再执行。执行脚本的时候，其采用的是远程主机上的shell环境。和 <code>raw</code> 模块一样，不要求目标主机上已经装好 python</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ansible]# ansible-doc -s script</span><br><span class="line">- name: Runs a local script on a remote node after transferring it</span><br><span class="line">  script:</span><br><span class="line">      chdir:                 # 执行之前，先cd到指定目录在执行命令</span><br><span class="line">      creates:               # 当指定的文件存在时，就不执行对应命令</span><br><span class="line">      executable:            # 切换shell来执行命令，需要使用命令的绝对路径，如/bin/bash</span><br><span class="line">      removes:               # 当指定的文件不存在时，就不执行对应命令</span><br></pre></td></tr></table></figure><h1 id="文件相关的模块"><a href="#文件相关的模块" class="headerlink" title="文件相关的模块"></a>文件相关的模块</h1><h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><p>用于对文件的处理，创建，删除，权限控制等，file算是最常用的模块之一了，支持的参数比较多，以下列举常用的。需要注意的是，<code>file</code>模块可以递归创建⽬录，但是不能在不存在的⽬录中创建⽂件，只能先创建⽬录，再在此目录中创建⽂件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">force          # 需要在两种情况下强制创建软连接，一种是源文件不存在但之后会建立的情况下；另一种是目标连接已存在，需要先取消之前的软连接，有两个选项：yes|no</span><br><span class="line">group          # 设置文件或目录的属组</span><br><span class="line">mode           # 设置文件或目录的权限</span><br><span class="line">owner          # 设置文件或目录的属主</span><br><span class="line">path=          # 必选项，定义文件或目录的路径</span><br><span class="line">recurse        # 递归设置文件的属性，只对目录有效</span><br><span class="line">src            # 要被链接到的路径，只应用与state=link的情况</span><br><span class="line">state          # directory:如果⽬录不存在则递归创建</span><br><span class="line">               # file:⽂件不存在时，不会被创建(默认值)</span><br><span class="line">               # touch:touch由path指定的⽂件，即创建⼀个新⽂件，或修改其mtime和atime</span><br><span class="line">               # link:修改或创建软链接</span><br><span class="line">               # hard:修改或创建硬链接</span><br><span class="line">               # absent:⽬录和其中的⽂件会被递归删除，⽂件或链接将取消链接状态</span><br></pre></td></tr></table></figure><h2 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h2><p>可以复制目录或文件，修改目录或文件属性，生成文件内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">backup          # 创建一个备份文件包括时间戳信息，如果以某种方式重创错了，还可以拿回原始文件</span><br><span class="line">content         # 取代src=，表示直接用此处指定的信息生成为目标文件内容；</span><br><span class="line">dest=           # 远程节点存放文件的路径，必须是绝对路径</span><br><span class="line">directory_mode  # 递归复制设置目录权限，默认为系统默认权限</span><br><span class="line">remote_src      # 如果这个值设置为True，将到远程/目标主机的机器上搜索</span><br><span class="line">force           # 如果目标主机包含该文件，但内容不同，如果设置为yes，则强制覆盖，如果设置为no，则只有当目标主机的目标位置不存在该文件时，才复制。默认为yes</span><br><span class="line">group           # 复制到远程主机后，指定文件或目录的属组</span><br><span class="line">mode            # 复制到远程主机后，指定文件或目录权限,类似与 `chmod&#x27;指明如 0644</span><br><span class="line">owner           # 复制到远程主机后，指定文件或目录属主</span><br><span class="line">src             # 指定复制的源文件，可以是相对路径或者绝对路径，如果给出的源是目录，那么会把目录下的所有文件都复制过去</span><br></pre></td></tr></table></figure><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><p>用于从被管理机器上面拉取文件，拉取下来的内容会保留目录结构，可用于收集被管理机器的日志文件等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dest                # 用来存放文件的目录，例如存放目录为backup，源文件名称为/etc/profile在主机pythonserver中，那么保存为/backup/pythonserver/etc/profile</span><br><span class="line">fail_on_missing     # 当源文件不存在的时候，标识为失败</span><br><span class="line">flat                # 允许覆盖默认行为从hostname/path到/file的，如果dest以/结尾，它将使用源文件的基础名称</span><br><span class="line">src                 # 在远程拉取的文件，并且必须是一个file，不能是目录</span><br><span class="line">validate_checksum   # 当文件fetch之后进行md5检查</span><br></pre></td></tr></table></figure><h1 id="用户相关的模块"><a href="#用户相关的模块" class="headerlink" title="用户相关的模块"></a>用户相关的模块</h1><h2 id="user"><a href="#user" class="headerlink" title="user"></a>user</h2><p>用于对用户账号的管理，用户的创建、删除、家目录、属组等设置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">comment          # 用户的描述信息</span><br><span class="line">createhome       # 是否创建家目录</span><br><span class="line">force            # 在使用`state=absent&#x27;是, 行为与`userdel --force&#x27;一致.</span><br><span class="line">group            # 指定基本组，此组要是存在的</span><br><span class="line">groups           # 指定附加组，如果指定为(&#x27;groups=&#x27;)表示删除所有组</span><br><span class="line">home             # 指定用户家目录</span><br><span class="line">move_home        # 如果设置为`home=&#x27;时, 试图将用户主目录移动到指定的目录</span><br><span class="line">name=            # 指定用户名</span><br><span class="line">password         # 此参数用于指定用户的密码。但是这个密码不能是明文的密码，而是一个对明文密码”加密后”的字符串，相当于/etc/shadow 文件中的密码字段，是一个对明文密码进行哈希后的字符串，你可以在 python 的命令提示符下输入如下命令，生成明文密码对应的加密字符串。import crypt; crypt.crypt(&#x27;666666&#x27;)</span><br><span class="line">remove           # 当 state 的值设置为 absent 时，表示要删除远程主机中的用户。但是在删除用户时，不会删除用户的家目录等信息，这是因为 remove 参数的默认值为 no，如果设置为yes，在删除用户的同时，会删除用户的家目录。</span><br><span class="line">shell            # 指定默认shell</span><br><span class="line">state            # 设置帐号状态，不指定为创建，指定值为absent表示删除</span><br><span class="line">system           # 当创建一个用户，设置这个用户是系统用户。这个设置不能更改现有用户。</span><br><span class="line">uid              # 指定用户的uid</span><br><span class="line">update_password  # 更新用户密码</span><br></pre></td></tr></table></figure><h2 id="group"><a href="#group" class="headerlink" title="group"></a>group</h2><p>用于对用户组的管理，用户组的创建、删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gid         # 设置组的GID号</span><br><span class="line">name=       # 管理组的名称</span><br><span class="line">state       # 指定组状态，默认为创建，设置值为absent为删除</span><br><span class="line">system      # 设置值为yes，表示为创建系统组</span><br></pre></td></tr></table></figure><h1 id="软件包相关的模块"><a href="#软件包相关的模块" class="headerlink" title="软件包相关的模块"></a>软件包相关的模块</h1><h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><p>软件包管理，下载、安装、卸载、升级等操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">name            # 指定要操作的软件包名字</span><br><span class="line">download_dir    # 指定下载软件包的存放路径，需要配合download_only一起使用</span><br><span class="line">download_only   # 只下载软件包，而不进行安装，和yum --downloadonly一样</span><br><span class="line">disablerepo     # 不启用某个源</span><br><span class="line">enablerepo      # 启用某个源</span><br><span class="line">list:</span><br><span class="line">    installed   # 列出所有已安装的软件包</span><br><span class="line">    updates     # 列出所有可以更新的软件包</span><br><span class="line">    repos       # 列出所有的yum仓库</span><br><span class="line">state:   </span><br><span class="line">    installed, present   # 安装软件包(两者任选其一都可以)</span><br><span class="line">    removed, absent      # 卸载软件包</span><br><span class="line">    latest      # 安装最新软件包</span><br></pre></td></tr></table></figure><h2 id="yum-repository"><a href="#yum-repository" class="headerlink" title="yum_repository"></a>yum_repository</h2><p>yum源的管理，配置与删除。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">name</span>           <span class="comment"># 指定repo的名称，对应于repo文件中的[name]</span></span><br><span class="line"><span class="string">description</span>    <span class="comment"># repo的描述信息，对应于repo文件中的name: xxx</span></span><br><span class="line"><span class="string">baseurl</span>        <span class="comment"># 指定该repo的路径</span></span><br><span class="line"><span class="string">file</span>           <span class="comment"># 指定repo的文件名，不需要加上.repo后缀，会自动加上</span></span><br><span class="line"><span class="string">reposdir</span>       <span class="comment"># repo文件所在的目录，默认为/etc/yum.repos.d目录</span></span><br><span class="line"><span class="string">enabled</span>        <span class="comment"># 是否启用该repo，对应于repo文件中的enabled</span></span><br><span class="line"><span class="string">gpgcheck</span>       <span class="comment"># 该repo是否启用gpgcheck，对应于repo文件中的gpgcheck</span></span><br><span class="line"><span class="string">state</span>          <span class="comment"># present表示保证该repo存在，absent表示移除该repo</span></span><br></pre></td></tr></table></figure><h1 id="计划任务相关的模块"><a href="#计划任务相关的模块" class="headerlink" title="计划任务相关的模块"></a>计划任务相关的模块</h1><h2 id="cron"><a href="#cron" class="headerlink" title="cron"></a>cron</h2><p>用于指定计划任务，和<code>crontab -e</code>一样。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">backup            # 如果设置，创建一个crontab备份</span><br><span class="line">cron_file         # 如果指定, 使用这个文件cron.d，而不是单个用户crontab</span><br><span class="line">job               # 指明运行的命令是什么</span><br><span class="line">day               # 日应该运行的工作( 1-31, *, */2, etc )</span><br><span class="line">hour              # 小时 ( 0-23, *, */2, etc )</span><br><span class="line">minute            # 分钟( 0-59, *, */2, etc )</span><br><span class="line">month             # 月( 1-12, *, */2, etc )</span><br><span class="line">weekday           # 周 ( 0-6 for Sunday-Saturday, *, etc )</span><br><span class="line">name              # 定时任务描述</span><br><span class="line">reboot            # 任务在重启时运行，不建议使用，建议使用special_time</span><br><span class="line">special_time      # 特殊的时间范围，参数：reboot（重启时）,annually（每年）,monthly（每月）,weekly（每周）,daily（每天）,hourly（每小时）</span><br><span class="line">state             # 指定状态，prsent表示添加定时任务，也是默认设置，absent表示删除定时任务</span><br><span class="line">user              # 以哪个用户的身份执行</span><br></pre></td></tr></table></figure><h1 id="服务相关的模块"><a href="#服务相关的模块" class="headerlink" title="服务相关的模块"></a>服务相关的模块</h1><h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><p>服务模块，用于对服务进行管理，服务的启动、关闭、开机自启等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name            # 指定需要管理的服务名</span><br><span class="line">enabled         # 指定是否开机自启动</span><br><span class="line">state:          # 指定服务状态</span><br><span class="line">    started     # 启动服务</span><br><span class="line">    stopped     # 停止服务</span><br><span class="line">    restarted   # 重启服务</span><br><span class="line">    reloaded    # 重载服务</span><br></pre></td></tr></table></figure><h2 id="systemd"><a href="#systemd" class="headerlink" title="systemd"></a>systemd</h2><p>服务模块，用于对服务进行管理，服务的启动、关闭、开机自启等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name            # 指定需要管理的服务名</span><br><span class="line">state:          # 指定服务状态</span><br><span class="line">    started     # 启动服务</span><br><span class="line">    stopped     # 停止服务</span><br><span class="line">    restarted   # 重启服务</span><br><span class="line">    reloaded    # 重载服务</span><br><span class="line">enabled         # 是否需要开机启动</span><br><span class="line">daemon_reload   # systemd 读取配置文件，每次修改了文件，最好都运行一次，确保应用了</span><br></pre></td></tr></table></figure><h1 id="文件内容修改相关的模块"><a href="#文件内容修改相关的模块" class="headerlink" title="文件内容修改相关的模块"></a>文件内容修改相关的模块</h1><h2 id="lineinfile"><a href="#lineinfile" class="headerlink" title="lineinfile"></a>lineinfile</h2><p>单行修改。文件内容修改、在某行前面添加一行、在某行后面添加一行、删除某一行、末尾加入一行、替换或添加某一行（如果有多行文本都能被匹配，则只有最后面被匹配到的那行文本才会被替换）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">path          # 指定要操作的文件。</span><br><span class="line">line          # 使用此参数指定文本内容。</span><br><span class="line">regexp        # 使用正则表达式匹配对应的行，当替换文本时，如果有多行文本都能被匹配，则只有最后面被匹配到的那行文本才会被替换，当删除文本时，如果有多行文本都能被匹配，这么这些行都会被删除。</span><br><span class="line">state         # absent表示删除，默认为present。</span><br><span class="line">backrefs      # 默认情况下，当根据正则替换文本时，即使regexp参数中的正则存在分组，在line参数中也不能对正则中的分组进行引用，除非将backrefs参数的值设置为yes。backrefs=yes表示开启后向引用，这样，line参数中就能对regexp参数中的分组进行后向引用了，这样说不太容易明白，可以参考后面的示例命令理解。backrefs=yes除了能够开启后向引用功能，还有另一个作用，默认情况下，当使用正则表达式替换对应行时，如果正则没有匹配到任何的行，那么line对应的内容会被插入到文本的末尾，不过，如果使用了backrefs=yes，情况就不一样了，当使用正则表达式替换对应行时，同时设置了backrefs=yes，那么当正则没有匹配到任何的行时，则不会对文件进行任何操作，相当于保持原文件不变。</span><br><span class="line">insertafter    # 将文本插入到“指定的行”之后，如果正则没有匹配到任何行，则插入到文件末尾，当使用backrefs参数时，此参数会被忽略。</span><br><span class="line">insertbefore   # 将文本插入到“指定的行”之前，如果正则没有匹配到任何行，则插入到文件末尾，当使用backrefs参数时，此参数会被忽略。</span><br><span class="line">backup         # 是否在修改文件之前对文件进行备份。</span><br><span class="line">create         # 当要操作的文件并不存在时，是否创建对应的文件。</span><br></pre></td></tr></table></figure><h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><p>多行修改。根据我们指定的正则表达式替换文件中的字符串，文件中所有被匹配到的字符串都会被替换。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">path          # 指定要操作的文件</span><br><span class="line">regexp        # 使用正则表达式匹配对应的行</span><br><span class="line">replace       # 指定最终要替换成的字符串。</span><br><span class="line">backup        # 是否在修改文件之前对文件进行备份，最好设置为yes。</span><br></pre></td></tr></table></figure><h1 id="系统信息相关的模块"><a href="#系统信息相关的模块" class="headerlink" title="系统信息相关的模块"></a>系统信息相关的模块</h1><h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><p>收集远程主机的一些基本信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter        # 用于进行条件过滤。如果设置，仅返回匹配过滤条件的信息。</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 常用的过滤选项</span></span><br><span class="line">ansible_all_ipv4_addresses         # 所有的ipv4地址</span><br><span class="line">ansible_all_ipv6_addresses         # 所有的ipv6地址</span><br><span class="line">ansible_architecture               # 系统的架构</span><br><span class="line">ansible_date_time                  # 系统时间</span><br><span class="line">ansible_default_ipv4               # 系统的默认ipv4地址</span><br><span class="line">ansible_distribution               # 系统名称</span><br><span class="line">ansible_distribution_file_variety  # 系统的家族</span><br><span class="line">ansible_distribution_major_version # 系统的版本</span><br><span class="line">ansible_domain                     # 系统所在的域</span><br><span class="line">ansible_fqdn                       # 系统的主机名</span><br><span class="line">ansible_hostname                   # 系统的主机名,简写</span><br><span class="line">ansible_os_family                  # 系统的家族</span><br><span class="line">ansible_processor_cores            # cpu的核数</span><br><span class="line">ansible_processor_count            # cpu的颗数</span><br><span class="line">ansible_processor_vcpus            # cpu的个数</span><br></pre></td></tr></table></figure><h2 id="sysctl"><a href="#sysctl" class="headerlink" title="sysctl"></a>sysctl</h2><p>修改系统的内核参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name                 # 变量名</span><br><span class="line">value                #  值</span><br><span class="line">reload               # 文件被更新时，是否使用 sysctl -p reload 文件</span><br><span class="line">state                # 是在文件中 移除(absent)或者设置(present)</span><br><span class="line">sysctl_file          # 如果不是默认文件，指定其他文件</span><br><span class="line">sysctl_set           # 使用sysctl 命令设置，不一定需要reload 文件</span><br></pre></td></tr></table></figure><h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><p><a href="https://docs.ansible.com/ansible/2.8/modules/modules_by_category.html">https://docs.ansible.com/ansible/2.8/modules/modules_by_category.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ansible基于模块工作，ansible 2.9.24版本已经有3387个模块了，当然这些模块不需要也没精力全懂，但了解些常用模块的使用方式对日常运维过程中大有脾益。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    <category term="ansible回炉" scheme="https://slions.github.io/categories/ansible%E5%9B%9E%E7%82%89/"/>
    
    
    <category term="ansible" scheme="https://slions.github.io/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>（四）剧本文件playbook</title>
    <link href="https://slions.github.io/2021/08/28/%EF%BC%88%E5%9B%9B%EF%BC%89%E5%89%A7%E6%9C%AC%E6%96%87%E4%BB%B6playbook/"/>
    <id>https://slions.github.io/2021/08/28/%EF%BC%88%E5%9B%9B%EF%BC%89%E5%89%A7%E6%9C%AC%E6%96%87%E4%BB%B6playbook/</id>
    <published>2021-08-28T15:46:18.000Z</published>
    <updated>2021-08-29T02:24:03.235Z</updated>
    
    <content type="html"><![CDATA[<p>我们之前的例子都是使用<code>ansible &lt;host-pattern&gt; [-m module_name] [-a args]</code>这种语法来完成的。对于这种每次使用一个模块，只能执行一个任务的方式，称为<code>ad-hoc</code>(点对点模式)，相当与被控节点在bash中执行一句shell命令。如果想要简单使用ansible的话，ad-hoc配合shell脚本可以满足大部分情况了。</p><p>ansible之所以能成为当今自动化运维的一杆大旗是基于它提供了另一种任务方式——<code>playbook</code>。</p><p>playbook是剧本的意思，而之前提到的inventory就像是演员表，ansible的程序执行可以形象的看成拍电影，其中playbook中的每一个play就相当于是电影的每个片段，每一个play都可以有多个任务（tasks），相当于电影片段中的每一幕。每个play中可以定义专属的变量，对应电影片段中的场景布置，每个play中都需要指定执行该play的主机，即当期上场的演员名单。等等的这些组织多个任务多种行为的方式，正是ansible强大的地方——“编排”，而编写这些playbook的我们，即是整个电影的导演。</p><h1 id="playbook示例"><a href="#playbook示例" class="headerlink" title="playbook示例"></a>playbook示例</h1><h2 id="环境清单"><a href="#环境清单" class="headerlink" title="环境清单"></a>环境清单</h2><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统版本</th><th>内核版本</th><th>角色</th></tr></thead><tbody><tr><td>slions_pc1</td><td>192.168.100.10</td><td>CentOS  7.6.1810</td><td>3.10.0-957.el7.x86_64</td><td>控制节点</td></tr><tr><td>slions_pc2</td><td>192.168.100.11</td><td>CentOS  7.6.1810</td><td>3.10.0-957.el7.x86_64</td><td>被控节点</td></tr><tr><td>slions_pc3</td><td>192.168.100.12</td><td>CentOS  7.6.1810</td><td>3.10.0-957.el7.x86_64</td><td>被控节点</td></tr></tbody></table><p>所有的主机上都已启动sshd服务并保持默认配置（监听22端口）。</p><p>为了后续控制目标节点方便些，事先在控制节点将所有节点的DNS解析配置好了。并且配置了控制节点到被控节点间的免密。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# cat /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.100.10 slions_pc1</span><br><span class="line">192.168.100.11 slions_pc2</span><br><span class="line">192.168.100.12 slions_pc3</span><br></pre></td></tr></table></figure><h2 id="inventory文件"><a href="#inventory文件" class="headerlink" title="inventory文件"></a>inventory文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ansible]# cat /etc/ansible/hosts</span><br><span class="line">[leader]</span><br><span class="line">slions_pc1</span><br><span class="line">slions_pc2</span><br><span class="line"></span><br><span class="line">[worker]</span><br><span class="line">slions_pc3</span><br></pre></td></tr></table></figure><h2 id="playbook文件"><a href="#playbook文件" class="headerlink" title="playbook文件"></a>playbook文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ansible]# cat demo.yml</span><br><span class="line">---</span><br><span class="line">- name: play1</span><br><span class="line">  hosts: leader</span><br><span class="line">  gather_facts: false</span><br><span class="line">  tasks:</span><br><span class="line">  - name: task1 in play1</span><br><span class="line">    debug:</span><br><span class="line">      msg: &quot;output task1 in play1&quot;</span><br><span class="line">  - name: task2 in play1</span><br><span class="line">    debug:</span><br><span class="line">      msg: &quot;output task2 in play1&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- name: play2</span><br><span class="line">  hosts: worker</span><br><span class="line">  gather_facts: false</span><br><span class="line">  tasks:</span><br><span class="line">  - name: task1 in play2</span><br><span class="line">    debug:</span><br><span class="line">      msg: &quot;output task1 in play2&quot;</span><br><span class="line">  - name: task2 in play2</span><br><span class="line">    debug:</span><br><span class="line">      msg: &quot;output task2 in play2&quot;</span><br></pre></td></tr></table></figure><p>使用ansible-playbook命令执行这个playbook：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ansible]# ansible-playbook demo.yml</span><br><span class="line"></span><br><span class="line">PLAY [play1] ****************************************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [task1 in play1] *******************************************************************************************************************************************************************</span><br><span class="line">ok: [slions_pc1] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;output task1 in play1&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [slions_pc2] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;output task1 in play1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TASK [task2 in play1] *******************************************************************************************************************************************************************</span><br><span class="line">ok: [slions_pc1] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;output task2 in play1&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [slions_pc2] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;output task2 in play1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY [play2] ****************************************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [task1 in play2] *******************************************************************************************************************************************************************</span><br><span class="line">ok: [slions_pc3] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;output task1 in play2&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TASK [task2 in play2] *******************************************************************************************************************************************************************</span><br><span class="line">ok: [slions_pc3] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;output task2 in play2&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************************************************************************************</span><br><span class="line">slions_pc1                 : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span><br><span class="line">slions_pc2                 : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span><br><span class="line">slions_pc3                 : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从输出可以直观的看到，执行完”play 1”之后，执行”play 2”，在一个 play 之中,所有 hosts 会获取相同的任务指令，且PLAY和TASK后面都指明了play的名称、task的名称。</p><p>最后输出的是每个主机执行任务的状态统计，比如某个主机节点执行成功的任务有几个，失败的有几个。</p><h1 id="playbook语法：yaml"><a href="#playbook语法：yaml" class="headerlink" title="playbook语法：yaml"></a>playbook语法：yaml</h1><p>Playbooks 的格式是YAML，它以非常简洁的方式实现了json格式的事件描述，如果之前接触过kubernetes，对yaml应该就非常熟悉了。具体的语法可以百度查看，以下列举一些常用的规则。</p><ul><li>使用缩进表示层级关系</li><li>缩进不允许使用tab建，只能使用空格键</li><li>缩进空格数目不重要，只要相同层级的元素左对齐即可，程序判别配置的级别是通过缩进结合换行实现的</li><li>在单一一个<code>playbook</code>文件中，可以连续三个连子号(<code>---</code>)区分多个<code>play</code></li><li>使用#号注释代码</li><li><code>YAML</code>文件内容和<code>Linux</code>系统大小写判断方式保持一致，是区分大小写的</li></ul><p>YAML支持三种数据结构：</p><ul><li>对象：key/value格式，也称为哈希结构、字典结构或关联数组</li><li>数组：也称为列表</li><li>标量(scalars)：单个值</li></ul><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>一组键值对，使用冒号隔开key和value。注意，冒号后必须至少一个空格。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">slions</span></span><br></pre></td></tr></table></figure><p>等价于json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;slions&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>等价于json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;pig&quot;</span>]</span><br></pre></td></tr></table></figure><p>也可以使用行内数组(内联语法)的写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line">[<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;pig&quot;</span>]</span><br></pre></td></tr></table></figure><p>再例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">animal1:</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">animal2:</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>等价于json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;<span class="attr">&quot;animal1&quot;</span>: <span class="string">&quot;cat&quot;</span>&#125;, </span><br><span class="line">  &#123;<span class="attr">&quot;animal2&quot;</span>: <span class="string">&quot;pig&quot;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>将对象和数组混合：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">animal:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>等价于json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;animal&quot;</span>: [<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;pig&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">animal:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">wangcai</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">dog</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">black</span></span><br></pre></td></tr></table></figure><p>等价于json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;animal&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;wangcai&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;kind&quot;</span>: <span class="string">&quot;dog&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="number">3</span>, </span><br><span class="line">    <span class="attr">&quot;color&quot;</span>: <span class="string">&quot;black&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以使用行内对象的写法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">animal: &#123;name: wangcai, kind: dog, age: <span class="number">3</span>, color: black&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串续行"><a href="#字符串续行" class="headerlink" title="字符串续行"></a>字符串续行</h2><p>字符串可以写成多行，从第二行开始，必须至少有一个单空格缩进。换行符会被转为空格。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">str:</span> <span class="string">hello</span></span><br><span class="line">  <span class="string">world</span></span><br></pre></td></tr></table></figure><p>等价于json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;str&quot;</span>: <span class="string">&quot;hello world&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以使用<code>&gt;</code>换行，它类似于上面的多层缩进写法。此外，还可以使用<code>|</code>在换行时保留换行符。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">str1:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  hello</span></span><br><span class="line"><span class="string">  world</span></span><br><span class="line"><span class="string"></span><span class="attr">str2:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">  hello</span></span><br><span class="line"><span class="string">  world</span></span><br></pre></td></tr></table></figure><p>等价于json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;str1&#x27;: &#x27;hello world&#x27;, &#x27;str2&#x27;: &#x27;hello\nworld\n&#x27;&#125;</span><br></pre></td></tr></table></figure><h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p>YAML中某个key有时候不想为其赋值，可以直接写key但不写value，另一种方式是直接写null，还有一种比较少为人知的方式：波浪号~。</p><p>下面几种方式全是等价的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">key1:</span> </span><br><span class="line"><span class="attr">key2:</span> <span class="literal">null</span></span><br><span class="line"><span class="attr">key3:</span> <span class="literal">Null</span></span><br><span class="line"><span class="attr">key4:</span> <span class="literal">NULL</span></span><br><span class="line"><span class="attr">key5:</span> <span class="string">~</span></span><br></pre></td></tr></table></figure><h2 id="YAML中的单双引号和转义"><a href="#YAML中的单双引号和转义" class="headerlink" title="YAML中的单双引号和转义"></a>YAML中的单双引号和转义</h2><p>YAML中的字符串是可以不用使用引号包围的，但是如果包含了特殊符号，则需要使用引号包围。</p><p>单引号包围字符串时，会将特殊符号保留。</p><p>双引号包围字符串时，反斜线需要额外进行转义。</p><p>例如，下面几对书写方式是等价的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">key1:</span> <span class="string">&#x27;\.yml&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">key2:</span> <span class="string">&quot;\\.yml&quot;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">key3:</span> <span class="string">\.yml</span></span><br></pre></td></tr></table></figure><p>等价于json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; <span class="attr">&quot;key1&quot;</span>: <span class="string">&quot;\\.yml&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">&quot;key2&quot;</span>: <span class="string">&quot;\\.yml&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">&quot;key3&quot;</span>: <span class="string">&quot;\\.yml&quot;</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="playbook写法"><a href="#playbook写法" class="headerlink" title="playbook写法"></a>playbook写法</h1><p>将下面这个ad-hoc模式的ansible任务改成等价的playbook模式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ansible leader -m copy -a <span class="string">&#x27;src=/etc/passwd dest=/tmp&#x27;</span></span></span><br></pre></td></tr></table></figure><p>playbook:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">leader</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">copy:</span> <span class="string">src=/etc/passwd</span> <span class="string">dest=/tmp</span></span><br></pre></td></tr></table></figure><p>playbook中，每个play都需要放在数组中，所以在playbook的顶层使用列表的方式<code>- xxx</code>:来表示这是一个play（此处是<code>- hosts:</code>）。</p><p><strong>每个play都必须包含</strong><code>hosts</code><strong>和</strong><code>tasks</code><strong>指令</strong>。</p><ul><li><code>hosts</code>指令用来指定要执行该play的目标主机，可以是主机名，也可以是主机组，还支持正则表达式或者是变量的形式来更灵活的指定目标主机。</li><li><code>tasks</code>指令用来指定这个play中包含的任务，可以是一个或多个任务，任务也需要放在play的数组中，所以tasks指令内使用<code>- xxx</code>:的方式来表示每一个任务（此处是<code>- copy:</code>）。</li></ul><p><code>gather_facts</code>是一个play级别的指令设置，它是一个负责收集目标主机信息的任务，由setup模块提供。默认情况下，每个play都会先执行这个特殊的任务，收集完信息之后才开始执行其它任务。但是，收集目标主机信息的效率很低，如果能够确保playbook中不会使用到所收集的信息，可以显式指定<code>gather_facts: false</code>来禁止这个默认执行的收集任务，这对效率的提升是非常可观的。</p><p>此外每个play和每个task都可以使用<code>name</code>指令来命名，也建议尽量为每个play和每个task都命名，且名称具有唯一性。</p><p>所以上面的playbook可以改写为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">this</span> <span class="string">is</span> <span class="string">a</span> <span class="string">play</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">leader</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">/etc/passwd</span> <span class="string">to</span> <span class="string">/tmp</span></span><br><span class="line">      <span class="attr">copy:</span> <span class="string">src=/etc/passwd</span> <span class="string">dest=/tmp</span></span><br></pre></td></tr></table></figure><h1 id="playbook中的主机"><a href="#playbook中的主机" class="headerlink" title="playbook中的主机"></a>playbook中的主机</h1><p>play中的hosts指令通过pattern的方式来筛选节点，pattern的指定方式有以下几种规则：</p><ol><li><p>直接指定inventory中定义的主机名或者是主机组名，如<code>hosts: slions_pc1</code>、<code>hosts: leader</code></p></li><li><p>指定主机组名时，可使用索引的方式表示组中的第几个主机，如<code>hosts: leader[0]</code></p></li><li><p>可以使用冒号或者逗号来分开多个pattern，如<code>hosts: slions_pc3:leader</code></p></li><li><p>支持范围表示，如：<code>hosts: slions_pc[1:3]</code></p></li><li><p>支持通配符，如：<code>hosts: *</code></p></li><li><p>支持正则表达式，需使用<code>~</code>开头，如：<code>hosts: ~slions_pc(1|2)</code></p></li><li><p>pattern前面加一个&amp;符号表示取交集，如<code>leader:&amp;worker</code>会匹配同时存在于leader和worker中的主机</p></li><li><p>pattern前面加一个!符号表示取差集，如<code>leader:!worker</code>匹配存在与leader组但不在worker组中的主机</p></li></ol><h1 id="playbook模块参数的传递方式"><a href="#playbook模块参数的传递方式" class="headerlink" title="playbook模块参数的传递方式"></a>playbook模块参数的传递方式</h1><p>tasks中的模块参数有几种写法,都是等价的，保持整体统一就好。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">this</span> <span class="string">is</span> <span class="string">a</span> <span class="string">play</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">leader</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">copy:</span> <span class="string">src=/etc/passwd</span> <span class="string">dest=/tmp</span></span><br><span class="line">    </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">copy:</span></span><br><span class="line">      <span class="string">src=/etc/passwd</span></span><br><span class="line">      <span class="string">dest=/tmp</span></span><br><span class="line"> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">copy:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      src=/etc/passwd</span></span><br><span class="line"><span class="string">      dest=/tmp</span></span><br><span class="line"><span class="string"></span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">copy:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      src=/etc/passwd</span></span><br><span class="line"><span class="string">      dest=/tmp</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string"></span>  <span class="bullet">-</span> <span class="attr">copy:</span> </span><br><span class="line">      <span class="attr">src:</span> <span class="string">/etc/passwd</span></span><br><span class="line">      <span class="attr">dest:</span> <span class="string">/tmp</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">copy:</span> </span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">/etc/passwd</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/tmp</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们之前的例子都是使用&lt;code&gt;ansible &amp;lt;host-pattern&amp;gt; [-m module_name] [-a args]&lt;/code&gt;这种语法来完成的。对于这种每次使用一个模块，只能执行一个任务的方式，称为&lt;code&gt;ad-hoc&lt;/code&gt;(点对</summary>
      
    
    
    
    <category term="ansible回炉" scheme="https://slions.github.io/categories/ansible%E5%9B%9E%E7%82%89/"/>
    
    
    <category term="ansible" scheme="https://slions.github.io/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>（三）主机清单inventory</title>
    <link href="https://slions.github.io/2021/08/24/%EF%BC%88%E4%B8%89%EF%BC%89%E4%B8%BB%E6%9C%BA%E6%B8%85%E5%8D%95inventory/"/>
    <id>https://slions.github.io/2021/08/24/%EF%BC%88%E4%B8%89%EF%BC%89%E4%B8%BB%E6%9C%BA%E6%B8%85%E5%8D%95inventory/</id>
    <published>2021-08-24T13:43:29.000Z</published>
    <updated>2021-08-24T15:06:28.015Z</updated>
    
    <content type="html"><![CDATA[<p>上一章在讲ansible基本用法时的几个例子中host都是localhost,是因为在没有对ansible进行任何配置时，ansible只能通过localhost来控制本机。</p><p>inventory⽤于定义ansible要管理的主机列表，可以定义单个主机和主机组。/etc/ansible/hosts就是默认的全局inventory，当然我们可以在配置文件中修改此配置项，但通常不会去修改这个配置项，如果在其它地方定义了inventory文件，可以直接在ansible的命令行中使用<code>-i</code>选项去指定自定义的inventory文件。既然ansible的意义就是批量控制远程节点执行任务，该如何配置inventory呢。</p><h1 id="配置inventory"><a href="#配置inventory" class="headerlink" title="配置inventory"></a>配置inventory</h1><p>ansible inventory文件遵循ini配置格式。</p><p>先看下我本地的一些示例：</p><h2 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">192.168.100.10</span><br><span class="line">slions_pc1 <span class="attr">ansible_password</span>=<span class="number">123</span></span><br><span class="line">my_pc1 <span class="attr">ansible_host</span>=<span class="number">192.168</span>.<span class="number">100.10</span></span><br><span class="line">192.168.100.10:22</span><br><span class="line">192.168.100.1<span class="section">[0:2]</span></span><br></pre></td></tr></table></figure><ul><li>第一行通过IP地址定义主机节点。</li><li>第二行通过主机名定义，后面添加了一个主机变量<code>ansible_password=xxx</code>，指明连接该节点时的密码，需要注意的时，如果使用密码进行连接，要取消ansible配置文件中<code>host_key_checking = False</code>的注释。</li><li>第三行使用了主机变量<code>ansible_host=IP</code>，需要注意的是，如果定义了该主机变量，那么其前⾯的主机名就称为别名。可以命名为任何名称，这里是my_pc1。使用了<code>ansible_host</code>时连接主机会使用其定义的ip地址进行连接，而不会进行dns解析。</li><li>第四行定义主机时还指明了端口号</li><li>第五行表示192.168.100.10,192.168.100.11,192.168.100.12三台主机</li></ul><p>范围展开的方式还支持字母范围。下面都是有效的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">范围表示      展开结果</span><br><span class="line">--------------------</span><br><span class="line">a[1:3]  --&gt;  a1,a2,a3</span><br><span class="line">[08:12] --&gt;  08,09,10,11,12</span><br><span class="line">a[a:c]  --&gt;  aa,ab,ac</span><br></pre></td></tr></table></figure><p>上面示例中使用了两个主机变量ansible_password和ansible_host，它们直接定义在主机的后面，这些变量都是连接目标主机时的行为控制变量，通常它们都能见名知意。Ansible支持很多个连接时的行为控制变量，而且不同版本的Ansible的行为控制变量名称可能还不同，比如在以前版本中指定端口号的行为变量是<code>ansible_ssh_password</code>。</p><p>下面解释几个常见的行为变量。</p><table><thead><tr><th>inventory变量名</th><th>变量解释</th></tr></thead><tbody><tr><td>ansible_host</td><td>ansible连接节点时的IP地址</td></tr><tr><td>ansible_port</td><td>连接对方的端口号，ssh连接时默认为22</td></tr><tr><td>ansible_user</td><td>连接对方主机时使用的主机名。不指定时，将使用执行ansible或ansible-playbook命令的用户</td></tr><tr><td>ansible_password</td><td>连接时的用户密码</td></tr><tr><td>ansible_connection</td><td>连接类型，有效值包括smart、ssh、paramiko、local、docker、winrm，默认为smart。smart表示智能选择ssh和paramiko，当SSH支持ControlPersist(即持久连接)时使用ssh，否则使用paramiko。local和docker是非基于ssh连接的方式，winrm是连接windows的插件</td></tr><tr><td>ansible_ssh_private_key_file</td><td>指定密钥认证ssh连接时的私钥文件</td></tr><tr><td>ansible_ssh_common_args</td><td>提供给ssh、sftp、scp命令的额外参数</td></tr><tr><td>ansible_become</td><td>允许进行权限提升</td></tr><tr><td>ansible_become_method</td><td>指定提升权限的方式，例如可使用sudo/su/runas等方式</td></tr><tr><td>ansible_become_user</td><td>提升为哪个用户的权限，默认提升为root</td></tr><tr><td>ansible_become_password</td><td>提升为指定用户权限时的密码</td></tr><tr><td></td><td></td></tr></tbody></table><p>想要了解更多的参数可以查阅官方文档<a href="https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#connecting-to-hosts-behavioral-inventory-parameters">连接行为控制变量</a></p><h2 id="主机组"><a href="#主机组" class="headerlink" title="主机组"></a>主机组</h2><p>ansible支持通过定义主机组来管理远程节点，每个组内可以定义多个主机，每个主机都可以定义在任何一个或多个主机组内。</p><p>示例如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mygroup1]</span></span><br><span class="line">192.168.100.10</span><br><span class="line">192.168.100.11</span><br><span class="line">192.168.100.12</span><br><span class="line"></span><br><span class="line"><span class="section">[mygroup2]</span></span><br><span class="line">192.168.100.1<span class="section">[0:2]</span></span><br></pre></td></tr></table></figure><p>Ansible默认预定义了两个主机组：</p><ul><li>all分组，包含所有分组内的节点</li><li>ungrouped分组，包含所有不在分组内的节点</li></ul><p>这两个分组都不包含localhost这个特殊的节点。</p><p>定义了inventory之后，可以使用<code>ansible --list</code>或<code>ansible--playbook --list</code>命令来查看主机组的信息，还可以使用更为专业的<code>ansible-inventory</code>命令来查看主机组信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# ansible mygroup1  --list</span><br><span class="line">  hosts (3):</span><br><span class="line">    192.168.100.10</span><br><span class="line">    192.168.100.11</span><br><span class="line">    192.168.100.12</span><br><span class="line">[root@slions_pc1 ~]# ansible-inventory mygroup2  --graph</span><br><span class="line">@mygroup2:</span><br><span class="line">  |--192.168.100.10</span><br><span class="line">  |--192.168.100.11</span><br><span class="line">  |--192.168.100.12</span><br><span class="line">[root@slions_pc1 ~]# ansible-inventory   --graph</span><br><span class="line">@all:</span><br><span class="line">  |--@mygroup1:</span><br><span class="line">  |  |--192.168.100.10</span><br><span class="line">  |  |--192.168.100.11</span><br><span class="line">  |  |--192.168.100.12</span><br><span class="line">  |--@mygroup2:</span><br><span class="line">  |  |--192.168.100.10</span><br><span class="line">  |  |--192.168.100.11</span><br><span class="line">  |  |--192.168.100.12</span><br><span class="line">  |--@ungrouped:</span><br><span class="line">  |  |--my_pc1</span><br><span class="line">  |  |--slions_pc1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用ansible-inventory以json格式列出所有主机的信息</span></span><br><span class="line">[root@slions_pc1 ~]# ansible-inventory   --list</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_meta&quot;: &#123;</span><br><span class="line">        &quot;hostvars&quot;: &#123;</span><br><span class="line">            &quot;192.168.100.10&quot;: &#123;</span><br><span class="line">                &quot;ansible_port&quot;: 22</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;192.168.100.11&quot;: &#123;</span><br><span class="line">                &quot;ansible_port&quot;: 22</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;192.168.100.12&quot;: &#123;</span><br><span class="line">                &quot;ansible_port&quot;: 22</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;my_pc1&quot;: &#123;</span><br><span class="line">                &quot;ansible_host&quot;: &quot;192.168.100.10&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;slions_pc1&quot;: &#123;</span><br><span class="line">                &quot;ansible_password&quot;: 123,</span><br><span class="line">                &quot;ansible_user&quot;: &quot;root&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;all&quot;: &#123;</span><br><span class="line">        &quot;children&quot;: [</span><br><span class="line">            &quot;mygroup1&quot;,</span><br><span class="line">            &quot;mygroup2&quot;,</span><br><span class="line">            &quot;ungrouped&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;mygroup1&quot;: &#123;</span><br><span class="line">        &quot;hosts&quot;: [</span><br><span class="line">            &quot;192.168.100.10&quot;,</span><br><span class="line">            &quot;192.168.100.11&quot;,</span><br><span class="line">            &quot;192.168.100.12&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;mygroup2&quot;: &#123;</span><br><span class="line">        &quot;hosts&quot;: [</span><br><span class="line">            &quot;192.168.100.10&quot;,</span><br><span class="line">            &quot;192.168.100.11&quot;,</span><br><span class="line">            &quot;192.168.100.12&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;ungrouped&quot;: &#123;</span><br><span class="line">        &quot;hosts&quot;: [</span><br><span class="line">            &quot;my_pc1&quot;,</span><br><span class="line">            &quot;slions_pc1&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主机组中的主机也可以使用之前提到的连接行为控制变量。</p><h2 id="组嵌套"><a href="#组嵌套" class="headerlink" title="组嵌套"></a>组嵌套</h2><p>ansible还支持主机组嵌套，可以通过<code>[GROUP:children]</code>的方式定义一个主机组，并在其中包含子组。</p><p>示例如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mygroup1]</span></span><br><span class="line">192.168.100.10</span><br><span class="line">192.168.100.11</span><br><span class="line">192.168.100.12</span><br><span class="line"></span><br><span class="line"><span class="section">[mygroup2]</span></span><br><span class="line">192.168.100.1<span class="section">[0:2]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[mygroup:children]</span></span><br><span class="line">mygroup1</span><br><span class="line">mygroup2</span><br></pre></td></tr></table></figure><p>当然还可以递归嵌套。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mygroup1]</span></span><br><span class="line">192.168.100.10</span><br><span class="line">192.168.100.11</span><br><span class="line">192.168.100.12</span><br><span class="line"></span><br><span class="line"><span class="section">[mygroup2]</span></span><br><span class="line">192.168.100.1<span class="section">[0:2]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[mygroup3]</span></span><br><span class="line">192.168.100.13</span><br><span class="line"></span><br><span class="line"><span class="section">[mygroup:children]</span></span><br><span class="line">mygroup1</span><br><span class="line">mygroup2</span><br><span class="line"></span><br><span class="line"><span class="section">[recursive:children]</span></span><br><span class="line">mygroup</span><br><span class="line">mygroup3</span><br></pre></td></tr></table></figure><h2 id="主机普通变量"><a href="#主机普通变量" class="headerlink" title="主机普通变量"></a>主机普通变量</h2><p>在定义inventory时，除了可以指定连接的行为控制变量，也可以指定Ansible的普通变量，以便在ansible执行任务时使用。</p><p>示例：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slions_pc1 <span class="attr">ansible_password</span>=<span class="number">123</span> ansible_user=root myvar=<span class="string">&quot;hello slions_pc1&quot;</span></span><br></pre></td></tr></table></figure><p>执行命令使用<code>debug</code>模块来查看变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# ansible slions_pc1 -m debug -a &#x27;var=myvar&#x27;</span><br><span class="line">slions_pc1 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;myvar&quot;: &quot;hello slions_pc1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主机组变量"><a href="#主机组变量" class="headerlink" title="主机组变量"></a>主机组变量</h2><p>顾名思义，肯定也有主机组变量。</p><p>示例：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mygroup1]</span></span><br><span class="line">192.168.100.10</span><br><span class="line">192.168.100.11</span><br><span class="line">192.168.100.12</span><br><span class="line"></span><br><span class="line"><span class="section">[mygroup1:vars]</span></span><br><span class="line"><span class="attr">mygroupvar</span>=<span class="string">&quot;hi&quot;</span></span><br></pre></td></tr></table></figure><p>上面<code>[mygroup1:vars]</code>表示为mygroup1组内所有主机定义变量mygroupvar=”hi”。而<code>[all:vars]</code>和<code>[ungrouped:vars]</code>分别表示为all和ungrouped这两个特殊的主机组内的所有主机定义变量。</p><h2 id="多个inventory文件"><a href="#多个inventory文件" class="headerlink" title="多个inventory文件"></a>多个inventory文件</h2><p>ansible支持定义多个inventory文件并放在一个目录下。</p><p>例如，创建一个名为/etc/ansible/inventorys的目录，在其中定义a和b两个inventory文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/ansible/inventorys/</span><br><span class="line">├── a</span><br><span class="line">└── b</span><br></pre></td></tr></table></figure><p>现在要使用多个inventory的功能，需要将inventory指定为目录路径。</p><p>可以通过修改Ansible配置文件，将inventory指令设置为对应的目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inventory      = /etc/ansible/inventorys</span><br></pre></td></tr></table></figure><p>或者，执行ansible或ansible-playbook命令使用<code>-i /etc/ansible/inventorys</code>选项指定的路径。</p><p>执行下面的命令将列出所有主机：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-inventory -i /etc/ansible/inventorys --graph all</span><br></pre></td></tr></table></figure><p>inventory指定为目录时，inventory文件最好不要带有后缀，就像示例中的a和b文件。因为Ansible当使用目录作为inventory时，默认将忽略一些后缀的文件不去解析。需要修改配置文件中的<code>inventory_ignore_extensions</code>项来禁止忽略指定后缀(如ini后缀)的文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#inventory_ignore_extensions = ~, .orig, .bak, .ini, .cfg, .retry, .pyc, .pyo</span><br><span class="line">inventory_ignore_extensions = ~, .orig, .bak, .cfg, .retry, .pyc, .pyo</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上一章在讲ansible基本用法时的几个例子中host都是localhost,是因为在没有对ansible进行任何配置时，ansible只能通过localhost来控制本机。&lt;/p&gt;
&lt;p&gt;inventory⽤于定义ansible要管理的主机列表，可以定义单个主机和主机组。</summary>
      
    
    
    
    <category term="ansible回炉" scheme="https://slions.github.io/categories/ansible%E5%9B%9E%E7%82%89/"/>
    
    
    <category term="ansible" scheme="https://slions.github.io/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>实现科学上网</title>
    <link href="https://slions.github.io/2021/08/23/%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>https://slions.github.io/2021/08/23/%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</id>
    <published>2021-08-23T08:23:54.000Z</published>
    <updated>2021-08-23T11:39:03.956Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/shadowsocks/">shadowsocks</a>是当前比较受欢迎的科学上网工具。</p><h1 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h1><h2 id="准备代理服务器"><a href="#准备代理服务器" class="headerlink" title="准备代理服务器"></a>准备代理服务器</h2><p>首先需要有一台可以连接外网的服务器，我本地环境是在腾讯云上的虚机（香港）。操作系统为Centos 7.6,1c 2g的资源。</p><h2 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装shadowsocks</h2><p>linux环境大多数情况都自带了pip工具，使用pip工具安装shadowsocks。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> pip3 install shadowsocks</span></span><br><span class="line">WARNING: Running pip install with root privileges is generally not a good idea. Try `pip3 install --user` instead.</span><br><span class="line">Collecting shadowsocks</span><br><span class="line">  Downloading http://mirrors.tencentyun.com/pypi/packages/02/1e/e3a5135255d06813aca6631da31768d44f63692480af3a1621818008eb4a/shadowsocks-2.8.2.tar.gz</span><br><span class="line">Installing collected packages: shadowsocks</span><br><span class="line">  Running setup.py install for shadowsocks ... done</span><br><span class="line">Successfully installed shadowsocks-2.8.2</span><br></pre></td></tr></table></figure><h2 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h2><p>编写shadowsocks配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &gt;&gt;shadowsocks.json&lt;&lt;<span class="string">EOF</span></span></span><br><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server_port&quot;: 7295,</span><br><span class="line">    &quot;password&quot;: &quot;a7295&quot;,</span><br><span class="line">    &quot;method&quot;: &quot;aes-256-cfb&quot;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>server</td><td>服务监听地址</td></tr><tr><td>server_port</td><td>服务监听端口</td></tr><tr><td>password</td><td>服务密码</td></tr><tr><td>method</td><td>加密方式，可选<code>aes-128-cfb, aes-192-cfb, aes-256-cfb, bf-cfb, cast5-cfb, des-cfb, rc4-md5, chacha20, salsa20, rc4, table</code></td></tr></tbody></table><p><code>server_port</code>、<code>password</code>、<code>method</code>在配置 shadowsocks 客户端时需要保持一致。</p><h2 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h2><p>shadowsocks是通过ssserver命令启动的，首先看下当前环境此命令的执行路径。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">which</span> ssserver</span></span><br><span class="line">/usr/local/bin/ssserver</span><br></pre></td></tr></table></figure><p>编写systemd service文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &gt;&gt; /etc/systemd/system/shadowsocks.service &lt;&lt;<span class="string">EOF</span></span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStart=/usr/local/bin/ssserver -c /root/shadowsocks.json</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>设置开机自启。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> shadowsocks</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl start shadowsocks</span></span><br></pre></td></tr></table></figure><p>至此shadowsocks服务端就配置好了，需要注意的是：客户端会通过shadowsocks服务器的7295端口来连接外网，请提前开通相应的网络策略。</p><p><img src="https://slions.gitee.io/picbed/img/vpn.png"></p><h1 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h1><p>windows版本的shadowsocks请自行下载，以下只说如何配置。</p><p>打开下载的Shadowsocks，将如下信息按照之前服务端的配置填写好，其中服务器的地址是你虚机的外网地址，代理端口 1~65535 只要不被占用就可以。填写完点击确定。</p><p><img src="https://slions.gitee.io/picbed/img/shadowsocks.png"></p><p>右键托盘图标-启动系统代理服务，然后可以在托盘菜单中的系统代理模式中选择pac模式(只会代理根目录中PAC.txt文件中包含的网站)和全局模式(代理所有网站)。</p><p>之后就可以科学上网了。</p><p><img src="https://slions.gitee.io/picbed/img/youtube.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/shadowsocks/&quot;&gt;shadowsocks&lt;/a&gt;是当前比较受欢迎的科学上网工具。&lt;/p&gt;
&lt;h1 id=&quot;服务端配置&quot;&gt;&lt;a href=&quot;#服务端配置&quot; class=&quot;headerlink&quot; title=&quot;服</summary>
      
    
    
    
    <category term="科学上网" scheme="https://slions.github.io/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    
    <category term="shadowsocks" scheme="https://slions.github.io/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>hexo特殊符号的转义问题</title>
    <link href="https://slions.github.io/2021/08/22/Hexo%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7%E7%9A%84%E8%BD%AC%E4%B9%89%E9%97%AE%E9%A2%98/"/>
    <id>https://slions.github.io/2021/08/22/Hexo%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7%E7%9A%84%E8%BD%AC%E4%B9%89%E9%97%AE%E9%A2%98/</id>
    <published>2021-08-22T14:52:29.000Z</published>
    <updated>2021-08-23T11:33:49.711Z</updated>
    
    <content type="html"><![CDATA[<p>最近写ansible相关文章时，发现hexo与Jinja2的语法有冲突。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">line: 93,</span><br><span class="line">location: &#x27;_posts/（二）ansible初体验.md [Line 93, Column 133]&#x27;,</span><br><span class="line">type: &#x27;unexpected token: &#125;&#125;&#x27;</span><br></pre></td></tr></table></figure><p>它的模板语法 &#123;&#123;&#125;&#125;和 &#123;&#37;&#37;&#125; 与hexo的模板使用的符号一样，如果你出现了跟它冲突的代码，不是在<strong>代码块</strong>中的，就会被 Hexo 进行编译，这时候需要使用转义字符来代替。</p><p>常见的转义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">! &amp;#33; — 惊叹号 Exclamation mark</span><br><span class="line">” &amp;#34; &amp;quot; 双引号 Quotation mark</span><br><span class="line"># &amp;#35; — 数字标志 Number sign</span><br><span class="line">$ &amp;#36; — 美元标志 Dollar sign</span><br><span class="line">% &amp;#37; — 百分号 Percent sign</span><br><span class="line">&amp; &amp;#38; &amp;amp; Ampersand</span><br><span class="line">‘ &amp;#39; — 单引号 Apostrophe</span><br><span class="line">( &amp;#40; — 小括号左边部分 Left parenthesis</span><br><span class="line">) &amp;#41; — 小括号右边部分 Right parenthesis</span><br><span class="line">* &amp;#42; — 星号 Asterisk</span><br><span class="line">+ &amp;#43; — 加号 Plus sign</span><br><span class="line">&lt; &amp;#60; &amp;lt; 小于号 Less than</span><br><span class="line">= &amp;#61; — 等于符号 Equals sign</span><br><span class="line">- &amp;#45; &amp;minus; — 减号</span><br><span class="line">&gt; &amp;#62; &amp;gt; 大于号 Greater than</span><br><span class="line">? &amp;#63; — 问号 Question mark</span><br><span class="line">@ &amp;#64; — Commercial at</span><br><span class="line">[ &amp;#91; - 中括号左边部分 Left square bracket</span><br><span class="line">\ &amp;#92; - 反斜杠 Reverse solidus (backslash)</span><br><span class="line">] &amp;#93; — 中括号右边部分 Right square bracket</span><br><span class="line">&#123; &amp;#123; — 大括号左边部分 Left curly brace</span><br><span class="line">| &amp;#124; — 竖线Vertical bar</span><br><span class="line">&#125; &amp;#125; — 大括号右边部分 Right curly brace</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近写ansible相关文章时，发现hexo与Jinja2的语法有冲突。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b</summary>
      
    
    
    
    <category term="hexo使用" scheme="https://slions.github.io/categories/hexo%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="hexo" scheme="https://slions.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>（二）ansible初体验</title>
    <link href="https://slions.github.io/2021/08/22/%EF%BC%88%E4%BA%8C%EF%BC%89ansible%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://slions.github.io/2021/08/22/%EF%BC%88%E4%BA%8C%EF%BC%89ansible%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2021-08-22T10:25:14.000Z</published>
    <updated>2021-08-22T14:51:09.140Z</updated>
    
    <content type="html"><![CDATA[<p>上篇简单介绍了ansible的概念与架构，也提到了如果想要简单的实现一些批量管控主机的功能，可以轻松上手。这边就主要介绍下如何实现最简单的功能。</p><p>从之前的架构图上看能知道，ansible分为了控制节点机与被控节点，首先需要在控制节点上安装ansible软件。</p><blockquote><p>Ansible的模块是用Python来执行的，且默认远程连接的方式是ssh，所以控制节点和被控制端都需要有Python环境，并且被控制端需要启动sshd服务，但通常这两个条件在安装Linux系统时就已经具备了。所以使用Ansible的安装过程只有一个：在控制节点安装Ansible。</p></blockquote><h1 id="环境描述"><a href="#环境描述" class="headerlink" title="环境描述"></a>环境描述</h1><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统版本</th><th>内核版本</th><th>角色</th></tr></thead><tbody><tr><td>slions_pc1</td><td>192.168.100.10</td><td>CentOS  7.6.1810</td><td>3.10.0-957.el7.x86_64</td><td>控制节点</td></tr><tr><td>slions_pc2</td><td>192.168.100.11</td><td>CentOS  7.6.1810</td><td>3.10.0-957.el7.x86_64</td><td>被控节点</td></tr><tr><td>slions_pc3</td><td>192.168.100.12</td><td>CentOS  7.6.1810</td><td>3.10.0-957.el7.x86_64</td><td>被控节点</td></tr></tbody></table><p>所有的主机上都已启动sshd服务并保持默认配置（监听22端口）。</p><p>为了后续控制目标节点方便些，事先在控制节点将所有节点的DNS解析配置好了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# cat /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.100.10 slions_pc1</span><br><span class="line">192.168.100.11 slions_pc2</span><br><span class="line">192.168.100.12 slions_pc3</span><br></pre></td></tr></table></figure><h1 id="安装ansible"><a href="#安装ansible" class="headerlink" title="安装ansible"></a>安装ansible</h1><p>安装ansible的方式有好多种，不同系统的安装方式可参考：<a href="https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html">官方文档</a></p><p>我这里就直接使用yum安装了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install epel-release.noarch -y</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install ansible -y</span></span><br></pre></td></tr></table></figure><p><strong>配置命令补全</strong></p><p>从Ansible 2.9版本开始，它支持命令的选项补全功能，它依赖于python的argcomplete插件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum  install python-argcomplete -y</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> activate-global-python-argcomplete</span></span><br></pre></td></tr></table></figure><p>最后，退出当前Shell重新进入，或者简单的直接执行如下命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">exec</span> <span class="variable">$SHELL</span></span></span><br></pre></td></tr></table></figure><p>然后就可以按tab一次或两次补全参数或提示参数。</p><h1 id="配置主机互信"><a href="#配置主机互信" class="headerlink" title="配置主机互信"></a>配置主机互信</h1><p>Ansible默认是基于ssh连接的，所以要控制其它节点首先需要建立好ssh连接，而建立ssh连接要么需要提供密码，要么需要配置好认证方式。为了方便后文的测试，这里先配置好控制节点和其它被控节点之间的主机互信。</p><p>为了避免配置主机互信过程中的交互式询问，这里使用ssh-keyscan工具添加主机认证信息以及sshpass工具(安装Ansible时会自动安装sshpass，也可以yum -y install sshpass安装)直接指定ssh连接密码。</p><p>在控制节点生成密钥对。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -f ~/.ssh/id_rsa -N <span class="string">&#x27;&#x27;</span></span></span><br></pre></td></tr></table></figure><p>将各节点的主机信息写入控制节点的~/.ssh/known_hosts文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="keyword">for</span> host <span class="keyword">in</span> 192.168.100.&#123;11,12&#125; slions_pc&#123;2,3&#125;;<span class="keyword">do</span> ssh-keyscan -t rsa <span class="variable">$host</span> &gt;&gt; ~/.ssh/known_hosts 2&gt;/dev/null;<span class="keyword">done</span></span></span><br></pre></td></tr></table></figure><p>将控制节点上的ssh公钥分发给各节点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  <span class="keyword">for</span> host <span class="keyword">in</span> 192.168.100.&#123;11,12&#125; slions_pc&#123;2,3&#125;;<span class="keyword">do</span> sshpass -p <span class="string">&#x27;123&#x27;</span> ssh-copy-id root@<span class="variable">$host</span> &amp;&gt;/dev/null;<span class="keyword">done</span></span></span><br></pre></td></tr></table></figure><p>以上就完成了ssh主机互信。</p><h1 id="ansible初体验"><a href="#ansible初体验" class="headerlink" title="ansible初体验"></a>ansible初体验</h1><h2 id="ansible语法"><a href="#ansible语法" class="headerlink" title="ansible语法"></a>ansible语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible &lt;host-pattern&gt; [-f forks] [-m module_name] [-a args]</span><br></pre></td></tr></table></figure><p>其中：<br>host-pattern     # 被控节点，可以是all，或者配置文件中的主机组名<br>-f forks               # 指定并行处理的进程数<br>-m module        # 指定使用的模块，默认模块为command<br>-a args                # 指定模块的参数</p><p>举个例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# ansible localhost -m command -a &#x27;echo hello world!&#x27;</span><br><span class="line">localhost | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><p>上面的命令是使控制节点自身输出hello world！</p><h2 id="ansible模块"><a href="#ansible模块" class="headerlink" title="ansible模块"></a>ansible模块</h2><p>ansible有上千个模块，如何能快速找到想要的那个模块呢，当然百度是最快的了。ansible也提供了对应的命令来帮助我们快速寻找，可以使用<code>ansible-doc</code>。</p><p>其中<code>ansible-doc -l |grep &#39;xxx&#39;</code>命令可以筛选模块，例如筛选具有复制功能的模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# ansible-doc -l|grep &#x27;copy&#x27;</span><br><span class="line">vsphere_copy                                                  Copy a file to a VMware datastore</span><br><span class="line">win_copy                                                      Copies files to remote locations on windows hosts</span><br><span class="line">bigip_file_copy                                               Manage files in datastores on a BIG-IP</span><br><span class="line">ec2_ami_copy                                                  copies AMI between AWS regions, return new image id</span><br><span class="line">win_robocopy                                                  Synchronizes the contents of two directories using Robocopy</span><br><span class="line">copy                                                          Copy files to remote locations</span><br><span class="line">na_ontap_lun_copy                                             NetApp ONTAP copy LUNs</span><br><span class="line">icx_copy                                                      Transfer files from or to remote Ruckus ICX 7000 series switches</span><br><span class="line">unarchive                                                     Unpacks an archive after (optionally) copying it from the local machine</span><br><span class="line">ce_file_copy                                                  Copy a file to a remote cloudengine device over SCP on HUAWEI CloudEngine switches</span><br><span class="line">postgresql_copy                                               Copy data between a file/program and a PostgreSQL table</span><br><span class="line">ec2_snapshot_copy                                             copies an EC2 snapshot and returns the new Snapshot ID</span><br><span class="line">nxos_file_copy                                                Copy a file to a remote NXOS device</span><br><span class="line">netapp_e_volume_copy                                          NetApp E-Series create volume copy pairs</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据描述，大概找出是否有想要的模块。</p><p>找到模块后，想要看看它的功能描述以及用法，可以继续使用ansible-doc命令。</p><p>详细的模块描述手册： <code>ansible-doc &lt;$module_name&gt;</code></p><p>只包含模块参数用法的模块描述手册: <code>ansible-doc -s &lt;$module_name&gt;</code></p><p>就如很多编程语言一样，最先开始的是学会输出<code>hello world</code>，最后通过一个<code>debug</code>模块来实现。</p><p>查看debug模块的用法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# ansible-doc -s debug</span><br><span class="line">- name: Print statements during execution</span><br><span class="line">  debug:</span><br><span class="line">      msg:                   # The customized message that is printed. If omitted, prints a generic message.</span><br><span class="line">      var:                   # A variable name to debug. Mutually exclusive with the `msg&#x27; option. Be aware that this option already runs in Jinja2 context and has an implicit `&#123;&#123; &#125;&#125;&#x27;</span><br><span class="line">                               wrapping, so you should not be using Jinja2 delimiters unless you are looking for double interpolation.</span><br><span class="line">      verbosity:             # A number that controls when the debug is run, if you set to 3 it will only run debug when -vvv or above</span><br></pre></td></tr></table></figure><p>常用的就2个参数，msg与var，这两个参数是互斥的，只能使用其中一个。msg可以输出字符串，也可以输出变量的值，var只能输出变量的值。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# ansible localhost -m debug -a &#x27;msg=&quot;hello world&quot;&#x27;</span><br><span class="line">localhost | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;hello world&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ansible中也支持使用变量，这里仅演示最简单的设置变量和引用变量的方式。ansible命令的-e选项或–extra-vars选项可以设置变量。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# ansible localhost -m debug -e &#x27;str=&quot;hello world&quot;&#x27;  -a &#x27;var=str&#x27;</span><br><span class="line">localhost | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;str&quot;: &quot;hello world&quot;</span><br><span class="line">&#125;</span><br><span class="line">[root@slions_pc1 ~]# ansible localhost -m debug -e &#x27;str=&quot;hello world&quot;&#x27;  -a &#x27;msg=&#123;&#123;str&#125;&#125;&#x27;</span><br><span class="line">localhost | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;hello world&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ansible的字符串是可以不用引号去包围的，例如str=hello是允许的，但如果字符串中包含了特殊符号，则可能需要使用引号去包围，例如此处的示例出现了会产生歧义的空格。此外，要区分变量名和普通的字符串，需要在变量名上加一点标注：用 &#123;&#123; &#125;&#125;包围Ansible的变量，这其实是Jinja2模板的语法。其实不难理解，它的用法和Shell下引用变量使用$符号或${}是一样的，例如echo “hello ${var}”。</p><h1 id="ansible配置文件"><a href="#ansible配置文件" class="headerlink" title="ansible配置文件"></a>ansible配置文件</h1><p>我们通过yum安装后的ansible会提供默认的ansible配置文件，位置在<code>/etc/ansible/ansible.cfg</code>。</p><p>实际上，ansible支持4种方式指定配置文件，它们的解析顺序是：</p><ul><li><p><code>ANSIBLE_CFG</code>: 环境变量中指定的配置文件</p></li><li><p><code>ansible.cfg</code>: 当前目录下的ansible.cfg</p></li><li><p><code>~/ansible.cfg</code>: 家目录下的ansible.cfg</p></li><li><p><code>/etc/ansible/ansible.cfg</code>: 默认的全局配置文件</p></li></ul><p>Ansible配置文件采用ini风格进行配置，每一项配置都使用key=value的方式进行配置。</p><p>下面是截取了部分配置文件的配置信息，暂时没有必要都了解，用到哪里时百度即可。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[defaults]</span></span><br><span class="line"><span class="attr">inventory</span> = /etc/ansible/hosts    <span class="comment">#这个参数表示资源清单inventory文件配置，资源清单就是一些ansible需要链接管理的主机列表。</span></span><br><span class="line"><span class="attr">forks</span> = <span class="number">5</span>   <span class="comment">#设置默认情况下Ansible最多能有多少个进程同时工作，默认设置最多5个进程并行处理。具体需要设置多少个，可以根据控制主机的性能和被管理节点的数量来确定。</span></span><br><span class="line"><span class="attr">sudo_user</span> = root  <span class="comment">#这个设置默认执行命令的用户，在playbook中重新设置这个参数。</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">22</span> <span class="comment">#这个是指定链接被管节点的管理端口，默认22。除非设置了特殊的SSH端口，不然这个参数一般是不需要修改的。</span></span><br><span class="line"><span class="attr">host_key_checking</span> = <span class="literal">false</span>  <span class="comment">#设置是否检查SSH主机的秘钥。可以设置为True或者False。</span></span><br><span class="line"><span class="attr">timeout</span> = <span class="number">60</span>  <span class="comment">#设置SSH链接的超时间隔，单位是秒。</span></span><br><span class="line"><span class="attr">log_path</span> = /var/log/ansible.log  <span class="comment">#系统默认是不记录日志的，如果想把Ansible系统的输出记录到日志文件中，需要设置log_path来指定一个存储Ansible日志的文件</span></span><br><span class="line"><span class="attr">poll_interval</span> = <span class="number">15</span> <span class="comment">#异步执行任务的时候多久检查一次任务装填</span></span><br><span class="line"><span class="attr">transport</span> = smart  <span class="comment">#选择远程的工具   默认情况下就是smart(智能)模式  自动选择连接方式</span></span><br><span class="line">module_set_locale  <span class="comment">#设置本地的环境变量  </span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上篇简单介绍了ansible的概念与架构，也提到了如果想要简单的实现一些批量管控主机的功能，可以轻松上手。这边就主要介绍下如何实现最简单的功能。&lt;/p&gt;
&lt;p&gt;从之前的架构图上看能知道，ansible分为了控制节点机与被控节点，首先需要在控制节点上安装ansible软件。&lt;</summary>
      
    
    
    
    <category term="ansible回炉" scheme="https://slions.github.io/categories/ansible%E5%9B%9E%E7%82%89/"/>
    
    
    <category term="ansible" scheme="https://slions.github.io/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>（一）ansible入门</title>
    <link href="https://slions.github.io/2021/08/22/%EF%BC%88%E4%B8%80%EF%BC%89ansible%E5%85%A5%E9%97%A8/"/>
    <id>https://slions.github.io/2021/08/22/%EF%BC%88%E4%B8%80%EF%BC%89ansible%E5%85%A5%E9%97%A8/</id>
    <published>2021-08-22T07:03:45.000Z</published>
    <updated>2021-08-22T10:44:55.783Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ansible是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（puppet、cfengine、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。</p><p>—— 百度百科</p></blockquote><p>简而言之，ansible融合了众多老牌运维工具的优点，通过一台ansible控制节点，就能实现批量配置、部署与运维多主机操作，进而减少重复性的工作，提高运维效率。目前已然成为了大厂标配技能，运维人员的敲门砖。</p><p>ansible与ssh工具相比，虽说都可以完成远程控制其他主机执行任务，但ansible可以实现批量整合不同主机上执行的不同任务，同时让用户可以去协调这些任务的执行策略。</p><p>ansible基于模块工作，它只提供了一种运行框架，就如各种命令于shell的意义一样。</p><p>ansible的优点很多，轻量化、基于python便于二次开发什么的，但最吸引人的是兼容性、无代理与幂等性。</p><ul><li><p>兼容性：</p><p>ansible几乎不受到平台和系统的限制，只需要python环境即可，基本上各种的Linux操作系统已经内置了python。</p></li><li><p>无代理</p><p>Agentless，即无Agent的存在，它就像普通命令一样，并非C/S软件，只需在某个作为控制节点上安装一次Ansible即可，通常它基于ssh连接来控制远程主机，远程主机上不需要安装Ansible或其它额外的服务。</p></li><li><p>幂等性</p><p>ansible绝大多数模块都具备幂等性。所谓幂等性，指的是多次操作或多次执行不影响结果。比如算术运算时数值加0是幂等的，无论加多少次结果都不会改变，而数值加1是非幂等的，每次加1结果都会改变。</p></li></ul><p><strong>ansible架构：</strong></p><p><img src="https://slions.gitee.io/picbed/img/ansible.jpg"></p><p><strong>基本执行流程：</strong></p><ol><li><p>Ansible读取playbook剧本，剧本中会记录对哪些主机执行哪些任务</p></li><li><p>Ansible通过主机清单找到要执行的主机，然后调用具体的模块 </p></li><li><p>Ansible会通过连接插件连接对应的主机并推送对应的任务列表 </p></li><li><p>最后被管理的主机会将Ansible发送过来的任务解析为本地Shell命令执行</p></li></ol><p>快速上手ansible是非常简单的，只需要了解常用的几个模块，就可以实现简单的批量操作远程主机。想要学透是比较困难的，涉及到的知识板块既零散又旁多，光是模块已经上千个了。所以多数情况只需要用到那个功能就查找相关的实现方式即可。比起各种繁杂的模块与用法，更多的应该关注任务整体的流程与逻辑，并根据自己的实际需求来写出一个可复用程度高的playbook。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;ansible是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（puppet、cfengine、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。&lt;/p&gt;
&lt;p&gt;—— 百度百科&lt;/p&gt;</summary>
      
    
    
    
    <category term="ansible回炉" scheme="https://slions.github.io/categories/ansible%E5%9B%9E%E7%82%89/"/>
    
    
    <category term="ansible" scheme="https://slions.github.io/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>走近分布式一致性协议（下篇）</title>
    <link href="https://slions.github.io/2021/08/14/%E8%B5%B0%E8%BF%91%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%EF%BC%88%E4%B8%8B%E7%AF%87%EF%BC%89/"/>
    <id>https://slions.github.io/2021/08/14/%E8%B5%B0%E8%BF%91%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%EF%BC%88%E4%B8%8B%E7%AF%87%EF%BC%89/</id>
    <published>2021-08-14T07:42:00.000Z</published>
    <updated>2021-08-15T13:10:39.350Z</updated>
    
    <content type="html"><![CDATA[<a href="/2021/08/14/%E8%B5%B0%E8%BF%91%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%EF%BC%88%E4%B8%8A%E7%AF%87%EF%BC%89/" title="上篇">上篇</a>简述了几种一致性协议（二阶段提交、三阶段提交、paxos和zab）的实现原理与优缺点，这篇了解下raft与复制状态机。<h2 id="Raft协议"><a href="#Raft协议" class="headerlink" title="Raft协议"></a>Raft协议</h2><p>类似于zookeeper的zab协议（Paxos算法），Raft也是用于保证分布式环境下多节点数据的一致性，但更易于理解。</p><p>在Raft体系中，有一个强leader，由它全权负责接收客户端的请求命令，并将命令作为日志条目赋值给其他服务器，在确认安全的时候，将日志命令提交执行。当leader故障时，会选举产生一个新的leader。在强leader的帮助下，Raft将一致性问题分解为了三个子问题：</p><ol><li>leader选举：当已有的leader故障时必须选出一个新的leader。</li><li>日志复制：leader接受来自客户端的命令，记录为日志，并复制给集群中的其他服务器，并强制其他节点的日志与leader保持一致。</li><li>安全措施：通过一些措施确保系统的安全性，如确保所有状态机按照相同顺序执行相同命令的措施。</li></ol><h3 id="Raft基本流程"><a href="#Raft基本流程" class="headerlink" title="Raft基本流程"></a>Raft基本流程</h3><p>一个Raft集群拥有多个奇数台服务器，我们一般是三台，这样可以容忍一台服务器出现故障。服务器可能会处于如下三种角色：领导者（leader）、候选人（candidate）、跟随者（follower），正常运行的情况下，会有一个leader，其他全为follower，<strong>follower只会响应leader和candidate的请求，而客户端的请求则全部由leader处理</strong>，即使有客户端请求了一个follower也会将请求重定向到leader。candidate代表候选人，出现在选举leader阶段，选举成功后candidate将会成为新的leader。可能出现的状态转换关系如下图：</p><p><img src="https://gitee.com/Slions/picbed/raw/master/img/raft7.png"></p><p>从图中可以看出，集群刚启动时，所有节点都是follower，之后在time out信号的驱使下，follower会转变成candidate去拉取选票，获得大多数选票后就会成为leader，这时候如果其他候选人发现了新的leader已经诞生，就会自动转变为follower；而如果另一个time out信号发出时，还没有选举出leader，将会重新开始一次新的选举。可见，time out信号是促使角色转换得关键因素，类似于操作系统中得中断信号。</p><p><strong>term</strong></p><p>在Raft协议中，将时间分成了一些任意长度的时间片，称为term，term使用连续递增的编号的进行识别。</p><p>每一个term都从新的选举开始，candidate们会努力争取称为leader。一旦获胜，它就会在剩余的term时间内保持leader状态。</p><p>term也起到了系统中逻辑时钟的作用，每一个server都存储了当前term编号，在server之间进行交流的时候就会带有该编号，如果一个server的编号小于另一个的，那么它会将自己的编号更新为较大的那一个；如果leader或者candidate发现自己的编号不是最新的了，就会自动转变为follower；如果接收到的请求的term编号小于自己的当前term将会拒绝执行。</p><p><strong>rpc</strong></p><p>server之间的交流是通过RPC进行的。只需要实现两种RPC就能构建一个基本的Raft集群：</p><ul><li>RequestVote RPC：它由选举过程中的candidate发起，用于拉取选票</li><li>AppendEntries RPC：它由leader发起，用于复制日志或者发送心跳信号。</li></ul><p>每个Raft节点将会根据自己节点的状态数据来对这两种RPC请求进行处理，我们先看一下每个Raft节点保存那些状态数据:</p><p><img src="https://gitee.com/Slions/picbed/raw/master/img/raft01.png"></p><p><img src="https://gitee.com/Slions/picbed/raw/master/img/raft02.png"></p><p><img src="https://gitee.com/Slions/picbed/raw/master/img/raft03.png"></p><h3 id="Leader选举"><a href="#Leader选举" class="headerlink" title="Leader选举"></a>Leader选举</h3><p>Raft通过<strong>心跳机制</strong>发起leader选举。节点都是从follower状态开始的，如果收到了来自leader或candidate的RPC，那它就保持follower状态，避免争抢成为candidate。Leader会发送空的AppendEntries RPC作为心跳信号来确立自己的地位，（心跳间隔时间）如果follower一段时间(选举超时时间)没有收到心跳，它就会认为leader已经挂了，发起新的一轮选举。</p><p>选举发起后，一个follower会增加自己的当前term编号并转变为candidate。它会首先投自己一票，然后向其他所有节点并行发起RequestVote RPC，之后candidate状态将可能发生如下三种变化:</p><ul><li>赢得选举称为leader: 如果它在一个term内收到了大多数的选票，将会在接下的剩余term时间内称为leader，然后就可以通过发送心跳确立自己的地位。(每一个server在一个term内只能投一张选票，并且按照先到先得的原则投出)</li><li>其他server称为leader：在等待投票时，可能会收到其他server发出AppendEntries RPC心跳信号，说明其他leader已经产生了。这时通过比较自己的term编号和RPC过来的term编号，如果比对方大，说明leader的term过期了，就会拒绝该RPC，并继续保持候选人身份; 如果对方编号不比自己小,则承认对方的地位,转为follower。</li><li>选票被瓜分,选举失败：如果没有candidate获取大多数选票, 则没有leader产生, candidate们等待超时后发起另一轮选举。为了防止下一次选票还被瓜分,必须采取一些额外的措施, <strong>raft采用随机election timeout的机制防止选票被持续瓜分</strong>。通过将timeout随机设为一段区间上的某个值, 因此很大概率会有某个candidate率先超时然后赢得大部分选票.（随机重试机制）</li></ul><p><img src="https://gitee.com/Slions/picbed/raw/master/img/raft05.png"></p><h3 id="日志复制"><a href="#日志复制" class="headerlink" title="日志复制"></a>日志复制</h3><p>一旦leader被选举成功，就可以对客户端提供服务了。客户端提交每一条命令都会被按<strong>顺序</strong>记录到leader的日志中，每一条命令都包含term编号和顺序索引，然后向其他节点并行发送<strong>AppendEntries RPC</strong>用以复制命令(如果命令丢失会<strong>不断重发</strong>)，当复制成功也就是大多数节点成功复制后，leader就会提交命令，即执行该命令并且将执行结果返回客户端，raft保证已经提交的命令最终也会被其他节点成功执行。leader会保存有当前已经提交的<strong>最高日志编号</strong>。顺序性确保了相同日志索引处的命令是相同的，而且之前的命令也是相同的。当发送AppendEntries RPC时，会<strong>包含leader上一条刚处理过的命令</strong>，接收节点如果发现上一条命令不匹配，就会拒绝执行。</p><h3 id="安全措施"><a href="#安全措施" class="headerlink" title="安全措施"></a>安全措施</h3><ul><li><p>日志复制原则</p><p>在Raft中，leader通过<strong>强制follower复制自己的日志</strong>来解决日志不一致的情形，那么冲突的日志将会被重写。为了让日志一致，先找到最新的一致的那条日志，然后把follower之后的日志全部删除，leader再把自己在那之后的日志一股脑推送给follower，这样就实现了一致。而寻找该条日志，可以通过AppendEntries RPC，该RPC中包含着<strong>下一次要执行的命令索引</strong>（nextIndex），如果能和follower的当前索引对上，那就执行，否则拒绝，然后leader将会逐次递减索引，直到找到相同的那条日志。</p></li><li><p>选举约束</p><p>比如某个follower在leader提交时宕机了，也就是少了几条命令，然后它又经过选举成了新的leader，这样它就会强制其他follower跟自己一样，使得其他节点上刚刚提交的命令被删除，导致客户端提交的一些命令被丢失了，raft的解决办法：Raft通过投票过程<strong>确保只有拥有全部已提交日志的candidate能成为leader</strong>。由于candidate为了拉选票需要通过RequestVote RPC联系其他节点，而之前提交的命令至少会存在于其中某一个节点上,因此只要candidate的日志至少和其他大部分节点的一样新就可以了, follower如果收到了不如自己新的candidate的RPC,就会将其丢弃。</p></li><li><p>如果命令已经被复制到了大部分节点上,但是还没来的及提交就崩溃了,这样后来的leader应该完成之前term未完成的提交. Raft通过让leader统计当前term内还未提交的命令已经被复制的数量是否<strong>半数以上</strong>, 然后进行提交。</p></li></ul><h3 id="日志压缩"><a href="#日志压缩" class="headerlink" title="日志压缩"></a>日志压缩</h3><p>随着日志大小的增长，会占用更多的内存空间，处理起来也会耗费更多的时间，对系统的可用性造成影响，因此必须想办法压缩日志大小。Snapshotting是最简单的压缩方法，系统的全部状态会写入一个snapshot保存起来，然后丢弃截止到snapshot时间点之前的所有日志。Raft中的snapshot内容如下图所示：</p><p><img src="https://gitee.com/Slions/picbed/raw/master/img/raft06.png"></p><p>每一个server都有自己的snapshot，它只保存当前状态，如上图中的当前状态为x=0,y=9，而last included index和last included term代表snapshot之前最新的命令，用于AppendEntries的状态检查。</p><p>虽然每一个server都保存有自己的snapshot，但是当follower严重落后于leader时，leader需要把自己的snapshot发送给follower加快同步，此时用到了一个新的RPC：<strong>InstallSnapshot RPC</strong>。follower收到snapshot时，需要决定如何处理自己的日志，如果收到的snapshot包含有更新的信息，它将<strong>丢弃自己已有的日志，按snapshot更新自己的状态</strong>，RPC的定义如下：</p><p><img src="https://gitee.com/Slions/picbed/raw/master/img/raft07.png"></p><p><img src="https://gitee.com/Slions/picbed/raw/master/img/raft08.png"></p><h1 id="复制状态机模型"><a href="#复制状态机模型" class="headerlink" title="复制状态机模型"></a>复制状态机模型</h1><p>当同一份数据存在多个副本的时候，怎么管理他们就成了重点。</p><p>复制状态机（Repilcated State Machine，RSM）的基本思想是一个分布式的复制状态机系统由多个复制单元组成，每个复制单元均是一个状态机，它的状态保存在一组状态变量中，状态机的状态能够并且只能通过外部命令来改变。（比paxos提出的时间都早，可以算是一致性协议的方法论了）</p><p>“一组状态变量”通常是基于操作日志来实现的，每一个复制单元存储一个包含一系列指令的日志，并且严格按照顺序逐条执行日志上的指令。</p><p><img src="https://gitee.com/Slions/picbed/raw/master/img/rsm01.png"></p><p>上图是一个复制状态机的实现，每个RSM都有一个replicated log，存储的是来自客户端的commands。每个RSM中replicate log中commads的顺序都是相同的，状态机按顺序处理replicate log中的command,并将处理的结果返回给客户端。由于状态机具有确定性，因此每个状态机的输出和状态都是相同的。</p><p>一致性模块（Consensus Module）用于保证每个server上Log的一致性！</p><blockquote><p>如果不做任何保障，直接将commad暴力写入，一旦服务器宕机或者出现什么其他故障，就会导致这个Log丢失，并且无法恢复。而出现故障的可能性是很高的，这就导致系统不可用。</p></blockquote><p>复制状态机它有一个很重要的性质——<strong>确定性</strong></p><blockquote><p>如果两个相同的、确定性的状态从同一状态开始，并且以相同的顺序获得相同的输入，那么这两个状态机将会生成相同的输出，并且结束在相同的状态</p></blockquote><p>GFS、HDFS、zookeeper和etcd等分布式系统都是基于复制状态机模型实现的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;a href=&quot;/2021/08/14/%E8%B5%B0%E8%BF%91%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%EF%BC%88%E4%B8%8A%E7%AF%87%E</summary>
      
    
    
    
    <category term="分布式一致性协议" scheme="https://slions.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="Distributed protocol" scheme="https://slions.github.io/tags/Distributed-protocol/"/>
    
  </entry>
  
  <entry>
    <title>走近分布式一致性协议（上篇）</title>
    <link href="https://slions.github.io/2021/08/14/%E8%B5%B0%E8%BF%91%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%EF%BC%88%E4%B8%8A%E7%AF%87%EF%BC%89/"/>
    <id>https://slions.github.io/2021/08/14/%E8%B5%B0%E8%BF%91%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%EF%BC%88%E4%B8%8A%E7%AF%87%EF%BC%89/</id>
    <published>2021-08-14T04:21:50.000Z</published>
    <updated>2021-08-15T13:09:40.390Z</updated>
    
    <content type="html"><![CDATA[<p>从互联网的发展可以看出由单机高耦合高资源逐步变成了现在的集群低耦合易扩展的架构，原先的做法都存在一台机器上，保证资源充足，网络稳定的情况下是最好的方案，但随着规模的不断扩大，网络的脆弱性，还有纵向扩展的局限性导致了分布式的出现。当分布式的概念出现后最重要的一点就是如何保证数据的一致性。</p><p>我们身边有很多类似的场景，比如火车票的售票系统，比如银行的转账，网上购物等等。</p><h1 id="一致性的级别"><a href="#一致性的级别" class="headerlink" title="一致性的级别"></a>一致性的级别</h1><ul><li><p>强一致性</p><p>始终一致，体验性最好但对系统的性能影响比较大。</p></li><li><p>弱一致性</p><p>不会承诺在系统写入之后什么时候能正确的读到该值，但会在某个时间级别后能达到数据的一致性。细分还能分成会话一致性与用户一致性。</p></li><li><p>最终一致性</p><p>是弱一致性的一个特例，会保证在一个时间内，达到数据一致性。</p></li></ul><h1 id="事务和分布式事务"><a href="#事务和分布式事务" class="headerlink" title="事务和分布式事务"></a>事务和分布式事务</h1><p>我们对于事务这个词听着比较熟悉，他在狭义上讲的是数据库事务，书上的解释是一系列对系统中数据进入访问与更新的操作所组成的一个程序执行逻辑单元。</p><p>事务有四个特性ACID，<code>原子性</code>，<code>一致性</code>，<code>隔离性</code>，<code>持久性</code>。</p><p>在单机的时代我们可以很容易的实现一套满足ACID的事务处理系统，但分布式数据库中，数据散落在不同的机器上，怎么对这些数据进行分布式的事务就成为了挑战。</p><p>CAP理论和BASE理论的提出：</p><p>CAP指的是一个分布式系统不可能同时满足一致性，可用性和分区容错性，最多只能满足其中的两项。</p><blockquote><p>可用性：有限的时间内返回结果</p><p>分区一致性：在遇到任何网络分区的情况下还能满足一致性和可用性，除非网络通信全断了。</p></blockquote><p>BASE理论是基于CAP演变来的，基本可用，弱状态和最终一致性。</p><h1 id="一致性协议"><a href="#一致性协议" class="headerlink" title="一致性协议"></a>一致性协议</h1><h2 id="二阶段提交协议"><a href="#二阶段提交协议" class="headerlink" title="二阶段提交协议"></a>二阶段提交协议</h2><p>分布式系统中，每个节点虽然可以知晓自己的操作时成功或者失败，却无法知道其他节点的操作的成功或失败。当一个事务跨越多个节点时，为了保持事务的ACID特性，需要引入一个作为<strong>协调者</strong>的组件来统一掌控所有节点(称作<strong>参与者</strong>)的操作结果并最终指示这些节点是否要把操作结果进行真正的提交(比如将更新后的数据写入磁盘等等)。</p><p>因此，二阶段提交的算法思路可以概括为：<strong>参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈情报决定各参与者是否要提交操作还是中止操作。</strong></p><p><img src="https://gitee.com/Slions/picbed/raw/master/img/%E4%BA%8C%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4.png"></p><h3 id="过程介绍"><a href="#过程介绍" class="headerlink" title="过程介绍"></a>过程介绍</h3><p>所谓的两个阶段是指：第一阶段：准备阶段(投票阶段)和第二阶段：提交阶段（执行阶段）。</p><ol><li><p>准备阶段</p><p>1.由协调者发起并传递带有事务信息的请求给各个参与者，询问是否可以提交事务，并等待返回结果。</p><p>2.各参与者执行事务操作，将Undo和Redo放入事务日志中（但是不提交）</p><p>3.如果参与者执行成功就返回YES（可以提交事务），失败NO(不能提交事务)</p></li><li><p>提交阶段</p><p>此阶段分两种情况：所有参与者均返回YES，有任何一个参与者返回NO</p><p>1.所有参与者均反馈YES时，即提交事务。</p><p>2.任何一个参与者反馈NO时，即中断事务。</p></li></ol><blockquote><p>提交事务：（所有参与者均反馈YES）</p><p>(1) 协调者向所有参与者发出正式提交事务的请求（即Commit请求）。</p><p>(2) 参与者执行Commit请求，并释放整个事务期间占用的资源。</p><p>(3) 各参与者向协调者反馈Ack完成的消息。</p><p>(4) 协调者收到所有参与者反馈的Ack消息后，即完成事务提交。</p><p>中断事务：（任何一个参与者反馈NO）</p><p>(1) 协调者向所有参与者发出回滚请求（即Rollback请求）。</p><p>(2) 参与者使用阶段1中的Undo信息执行回滚操作，并释放整个事务期间占用的资源。</p><p>(3) 各参与者向协调者反馈Ack完成的消息。</p><p>(4) 协调者收到所有参与者反馈的Ack消息后，即完成事务中断。</p></blockquote><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：原理简单，实现方便</p><p>缺点：同步阻塞，单点问题，脑裂问题</p><blockquote><p>在阶段2中，如果只有部分参与者接收并执行了Commit请求，会导致节点数据不一致。</p></blockquote><h2 id="三阶段提交协议"><a href="#三阶段提交协议" class="headerlink" title="三阶段提交协议"></a>三阶段提交协议</h2><h3 id="过程介绍-1"><a href="#过程介绍-1" class="headerlink" title="过程介绍"></a>过程介绍</h3><p>三阶段提交是在二基础提交上的改进，即将事务的提交过程分为CanCommit、PreCommit、do Commit三个阶段来进行处理。</p><ol><li><p>CanCommit</p><p> 1.协调者向所有参与者发出包含事务内容的CanCommit请求，询问是否可以提交事务，并等待所有参与者答复。</p><p> 2.参与者收到CanCommit请求后，如果认为可以执行事务操作，则反馈YES并进入预备状态，否则反馈NO。</p></li><li><p>PreCommit</p><p> 此阶段分为两种情况：</p><p> 1.所有参与者均受到请求并返回YES。</p><p> 2.有任何一个参与者返回NO，或者有任何一个参与者超时，协调者无法收到反馈，则事务中断。</p></li></ol><blockquote><p>事务预提交：（所有参与者均反馈YES时）</p><p>(1) 协调者向所有参与者发出PreCommit请求，进入准备阶段。</p><p>(2) 参与者收到PreCommit请求后，执行事务操作，将Undo和Redo信息记入事务日志中（但不提交）</p><p>(3) 各参与者向协调者反馈Ack响应或No响应，并等待最终指令。</p><p>中断事务：（任何一个参与者反馈NO，或者等待超时后协调者尚无法收到所有参与者的反馈时）</p><p>(1) 协调者向所有参与者发出abort请求。</p><p>(2) 无论收到协调者发出的abort请求，或者在等待协调者请求过程中出现超时，参与者均会中断事务。</p></blockquote><ol start="3"><li><p>do Commit</p><p>此阶段也存在两种情况：</p><p>1.所有参与者均反馈Ack响应，即执行真正的事务提交。</p><p>2.任何一个参与者反馈NO，或者等待超时后协调者尚无法收到所有参与者的反馈，即中断事务。</p></li></ol><blockquote><p>提交事务：（所有参与者均反馈Ack响应时）</p><p>(1) 如果协调者处于工作状态，则向所有参与者发出do Commit请求。</p><p>(2) 参与者收到do Commit请求后，会正式执行事务提交，并释放整个事务期间占用的资源。</p><p>(3) 各参与者向协调者反馈Ack完成的消息。</p><p>(4) 协调者收到所有参与者反馈的Ack消息后，即完成事务提交。</p><p>中断事务：（任何一个参与者反馈NO，或者等待超时后协调者尚无法收到所有参与者的反馈时）</p><p>(1) 如果协调者处于工作状态，向所有参与者发出abort请求。</p><p>(2) 参与者使用阶段1中的Undo信息执行回滚操作，并释放整个事务期间占用的资源。</p><p>(3) 各参与者向协调者反馈Ack完成的消息。</p><p>(4) 协调者收到所有参与者反馈的Ack消息后，即完成事务中断。</p></blockquote><p>注意：进入阶段三后，无论协调者出现问题，或者协调者与参与者网络出现问题，都会导致参与者无法接收到协调者发出的 do Commit请求或abort请求。此时，参与者都会在等待超时之后，继续执行事务提交。</p><p><img src="https://gitee.com/Slions/picbed/raw/master/img/%E4%B8%89%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4.png"></p><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：引入超时机制。同时在协调者和参与者中都引入超时机制。降低了阻塞范围，在等待超时后协调者或参与者会中断事务。避免了协调者单点问题，阶段3中协调者出现问题时，参与者会继续提交事务。</p><p>缺陷：脑裂问题依然存在，即在参与者收到PreCommit请求后等待最终指令，如果此时协调者无法与参与者正常通信，由于网络原因，协调者发送的abort响应没有及时被参与者接收到，那么参与者在等待超时之后执行了commit操作。这样就和其他接到abort命令并执行回滚的参与者之间存在数据不一致的情况。</p><h2 id="Paxos协议"><a href="#Paxos协议" class="headerlink" title="Paxos协议"></a>Paxos协议</h2><p>上面我们可以看到二阶段和三阶段都可能出现数据不一致的现象，直到提出了paxos后，就持续垄断了分布式一致性算法，Paxos这个名词几乎等同于分布式一致性。</p><p>简单的说下paxos的提出是作者假想了一个叫paxos的希腊城邦，城邦要采用民主提议和投票的方式选出一个最终的决议，但由于城邦的居民没人愿意把精力都放在这种事情上，所以他们只能不定时的参加提议，不定时的来了解提议和投票进展，不定时的表达自己的意见，paxos算法的目标就是让他们按照少数服从多数的方式来最终达成一致意见。</p><p>Paxos的最大特点就是难，不仅难以理解，更难以实现，所以现在大部分的一致性协议都是基于paxos的衍生实现，比如zab，raft。</p><p>在2PC或3PC中，主要有协调者和参与者两种角色，在Paxos中，有三种角色，提议者，接收者和学习者。但是Paxos的基本流程主要在提议者和接收者之间发生。</p><ul><li><p>提议者（proposer）：提出提案，提案包含一个提案ID和一个提议的值。</p></li><li><p>接收者(acceptor)：参与决策，就提议者提出的提案进行承诺接收，如半数以上的接收者同意提案，则提案被通过。</p></li><li><p>学习者(learner)：参与决策，当提议者和接收者达成最终一致后，学习其最终值。</p></li></ul><h3 id="过程介绍-2"><a href="#过程介绍-2" class="headerlink" title="过程介绍"></a>过程介绍</h3><p>第一阶段：因为存在多个“提议者”，如果都提意见，那么“接受者“到底应该接受谁？所以要先明确哪个提议者有权提出提议，未来”接受者“们就主要处理这个”提议者“的提议（提出提议时就尽量让意见统一，尽早形成多数派）。</p><p>第二阶段：由上阶段选出的提议者提出提议，”接受者“反馈意见。如果多数接受了一个提议，那么提议就通过了。</p><h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><ol><li>怎么明确谁应该是”合适“的提议者？通过编号。每个”提议者“在第一阶段先报个号，谁号大就当提议者。</li><li>每个”提议者“不会执着于让自己的提议通过，而是每个”提议者“会执着于让提议尽快的达成一致意见。所以如果”提议者“在选举时发现”接受者“之前已经接受过别的”提议者“的提议了，那就算自己赢得了本次选举，也会默默的把自己的提议改成前面”提议者“的提议。（为了尽快的意见统一）</li><li>号的大小很重要，号小的无论啥时候”接受者“都会直接拒绝。</li><li>如果你是提议者，在选举时发现”接受者1“说”他见的提议者的提议是方案1“，而”接受者2“说”他见的提议者的提议是方案2“，那么还是要通过对比”号的大小“，”接受者“在接收提案时会记录下”相关提议者号的大小和提议内容（如果有的话）“，所以只需要判断哪个提议者号大就把自己的提议改成哪个提议者的。</li></ol><h2 id="zab协议"><a href="#zab协议" class="headerlink" title="zab协议"></a>zab协议</h2><p>Zab借鉴了Paxos算法，但又不像Paxos那样，是一种通用的分布式一致性算法。它是特别为Zookeeper设计的支持崩溃恢复的原子广播协议。Zab协议的全称是 Zookeeper Atomic Broadcast （Zookeeper原子广播）。Zookeeper 是通过 Zab 协议来保证分布式事务的最终一致性。</p><p>基于该协议，zk实现了一种主备模型（即Leader和Follower模型）的系统架构来保证集群中各个副本之间数据的一致性。这里的主备系统架构模型，就是指只有一台客户端（Leader）负责处理外部的<strong>写事务请求</strong>，然后Leader客户端将<strong>数据同步</strong>到其他Follower节点。</p><p>Zookeeper 客户端会随机的链接到 zookeeper 集群中的一个节点，如果是读请求，就直接从当前节点中读取数据；如果是写请求，那么节点就会向 Leader 提交事务，Leader 接收到事务提交，会<strong>广播</strong>该事务，只要<strong>超过半数节点</strong>写入成功，该事务就会被<strong>提交</strong>。</p><p><img src="https://gitee.com/Slions/picbed/raw/master/img/%E4%B8%80%E8%87%B4%E6%80%A73.png"></p><h3 id="实现细节-1"><a href="#实现细节-1" class="headerlink" title="实现细节"></a>实现细节</h3><ol><li>使用一个单一的主进程（Leader）来接收并处理客户端的事务请求（也就是写请求），并采用了Zab的原子广播协议，将服务器数据的状态变更以<strong>事务proposal</strong>（事务提议）的形式广播到所有的副本（Follower）进程上去。</li><li>保证一个全局的变更序列被<strong>顺序引用</strong>。<br>Zab要保证同一个Leader发起的事务要按顺序被apply，同时还要保证只有先前Leader的事务被apply之后，新选举出来的Leader才能再次发起事务。</li><li>当主进程出现异常的时候，整个zk集群依旧能正常工作。</li></ol><h3 id="如何实现数据一致性"><a href="#如何实现数据一致性" class="headerlink" title="如何实现数据一致性"></a>如何实现数据一致性</h3><p>可以通过Zab 协议的两种基本的模式：<strong>崩溃恢复</strong>和<strong>消息广播</strong>来研究。</p><p>当整个集群启动过程中，或者当 Leader 服务器出现网络中弄断、崩溃退出或重启等异常时，Zab协议就会 进入崩溃恢复模式，选举产生新的Leader。</p><p>当选举产生了新的 Leader，同时集群中有过半的机器与该 Leader 服务器完成了状态同步（即数据同步）之后，Zab协议就会退出崩溃恢复模式，进入消息广播模式。</p><h4 id="消息广播"><a href="#消息广播" class="headerlink" title="消息广播"></a>消息广播</h4><p>1）客户端发起一个写操作请求。</p><p>2）Leader 服务器将客户端的请求转化为事务 Proposal 提案，同时为每个 Proposal 分配一个全局的ID，即zxid。</p><p>3）Leader 服务器为每个 Follower 服务器分配一个单独的队列，然后将需要广播的 Proposal 依次放到队列中取，并且根据 FIFO 策略进行消息发送。</p><p>4）Follower 接收到 Proposal 后，会首先将其以事务日志的方式写入本地磁盘中，写入成功后向 Leader 反馈一个 Ack 响应消息。</p><p>5）Leader 接收到超过半数以上 Follower 的 Ack 响应消息后，即认为消息发送成功，可以发送 commit 消息。</p><p>6）Leader 向所有 Follower 广播 commit 消息，同时自身也会完成事务提交。Follower 接收到 commit 消息后，会将上一条事务提交。</p><h4 id="崩溃恢复"><a href="#崩溃恢复" class="headerlink" title="崩溃恢复"></a>崩溃恢复</h4><p>Zab 协议崩溃恢复必须满足以下两个要求：<br>1）Zab 协议需要确保那些已经在 Leader 服务器上提交（Commit）的事务最终被所有的服务器提交。</p><blockquote><p>选择拥有 proposal 最大值（即 zxid 最大） 的节点作为新的 Leader</p></blockquote><p>2）Zab 协议需要确保丢弃那些只在 Leader 上被提出而没有被提交的事务。</p><blockquote><p>Zab 通过zxid 来实现这一目的。一个 zxid 是64位，高 32 是纪元（epoch）编号，每经过一次 Leader选举产生一个新的Leader，其epoch 号 +1。低 32 位是消息计数器，每接收到一条消息这个值 +1，新Leader 选举后这个值重置为 0。</p></blockquote><p>崩溃恢复主要包括两部分：<strong>Leader选举</strong>和<strong>数据恢复</strong>。</p><p><strong>Leader选举</strong></p><p>在 Zab 协议中，为了保证程序的正确运行，整个恢复过程结束后需要选举出一个新的 Leader 服务器。因此 Zab 协议需要一个高效且可靠的 Leader 选举算法，从而确保能够快速选举出新的 Leader 。</p><p>所以Zab通过<code>Fast Leader Election</code>（快速选举）来完成leader选择</p><p>成为 Leader 的条件：</p><p>1）选 epoch 最大的</p><p>2）若 epoch 相等，选 zxid 最大的</p><p>3）若 epoch 和 zxid 相等，选择 server_id 最大的（zoo.cfg中的myid）</p><blockquote><p>节点在选举开始时，都默认投票给自己，当接收其他节点的选票时，会根据上面的 Leader条件 判断并且更改自己的选票，然后重新发送选票给其他节点。当有一个节点的得票超过半数，该节点会设置自己的状态为 Leading ，其他节点会设置自己的状态为 Following。</p></blockquote><p><strong>数据恢复</strong></p><p>1）完成 Leader 选举后（新的 Leader 具有最高的zxid），在正式开始工作之前（接收事务请求，然后提出新的 Proposal），Leader 服务器会首先确认事务日志中的所有的 Proposal 是否已经被集群中过半的服务器 Commit。</p><p>2）Leader 服务器需要确保所有的 Follower 服务器能够接收到每一条事务的 Proposal ，并且能将所有已经提交的事务 Proposal 应用到内存数据中。等到 Follower 将所有尚未同步的事务 Proposal 都从 Leader 服务器上同步过啦并且应用到内存数据中以后，Leader 才会把该 Follower 加入到真正可用的 Follower 列表中。</p><h3 id="zab协议核心"><a href="#zab协议核心" class="headerlink" title="zab协议核心"></a>zab协议核心</h3><p>定义了事务请求的处理方式</p><p><img src="https://gitee.com/Slions/picbed/raw/master/img/zab4.png"></p><h3 id="zab协议原理"><a href="#zab协议原理" class="headerlink" title="zab协议原理"></a>zab协议原理</h3><p>Zab协议要求每个 Leader 都要经历三个阶段：<strong>发现，同步，广播</strong>。</p><p><img src="https://gitee.com/Slions/picbed/raw/master/img/zab5.png"></p><p>运行分析：</p><p>在zab协议的设计中，每一个进程都有可能处于以下三种状态之一。</p><ul><li>LOOKING： Leader选举阶段</li><li>FOLLOWING： Follower服务器和leader保存同步状态</li><li>LEADING： Leader服务器作为主进程领导状态</li></ul><p>代码实现中，多了一种状态：Observing 状态<br>这是 Zookeeper 引入 Observer 之后加入的，Observer 不参与选举，是只读节点，跟 Zab 协议没有关系。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从互联网的发展可以看出由单机高耦合高资源逐步变成了现在的集群低耦合易扩展的架构，原先的做法都存在一台机器上，保证资源充足，网络稳定的情况下是最好的方案，但随着规模的不断扩大，网络的脆弱性，还有纵向扩展的局限性导致了分布式的出现。当分布式的概念出现后最重要的一点就是如何保证数</summary>
      
    
    
    
    <category term="分布式一致性协议" scheme="https://slions.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="Distributed protocol" scheme="https://slions.github.io/tags/Distributed-protocol/"/>
    
  </entry>
  
  <entry>
    <title>heketi启动失败问题排查</title>
    <link href="https://slions.github.io/2021/08/08/heketi%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>https://slions.github.io/2021/08/08/heketi%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</id>
    <published>2021-08-08T02:19:09.000Z</published>
    <updated>2021-08-12T11:46:20.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h1><p>日常巡检时发现heketi服务异常，启动失败。查看heketi log报错为invalid page type: 19:10</p><h2 id="环境描述"><a href="#环境描述" class="headerlink" title="环境描述"></a>环境描述</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>内核版本</td><td>3.10.0-862.el7.x86_64</td></tr><tr><td>系统版本</td><td>CentOS Linux release 7.5.1804</td></tr><tr><td>kubernetes 版本</td><td>1.17.0</td></tr><tr><td>glusterfs版本</td><td>7.1</td></tr><tr><td>heketi版本</td><td>v9.0</td></tr></tbody></table><h1 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h1><p>查看glusterfs各服务运行状态，卷都在线且正常运行。</p><p>重启glusterfs与heketi无效。</p><p>查看heketi的服务启动文件 <code>/usr/bin/heketi-start.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># HEKETI_TOPOLOGY_FILE can be passed as an environment variable with the</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> filename of the initial topology.json. In <span class="keyword">case</span> the heketi.db does not exist</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yet, this file will be used to populate the database.</span></span><br><span class="line"></span><br><span class="line">: &quot;$&#123;HEKETI_PATH:=/var/lib/heketi&#125;&quot;</span><br><span class="line">: &quot;$&#123;BACKUPDB_PATH:=/backupdb&#125;&quot;</span><br><span class="line">LOG=&quot;$&#123;HEKETI_PATH&#125;/container.log&quot;</span><br><span class="line"></span><br><span class="line">info() &#123;</span><br><span class="line">    echo &quot;$*&quot; | tee -a &quot;$LOG&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">error() &#123;</span><br><span class="line">    echo &quot;error: $*&quot; | tee -a &quot;$LOG&quot; &gt;&amp;2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fail() &#123;</span><br><span class="line">    error &quot;$@&quot;</span><br><span class="line">    exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">info &quot;Setting up heketi database&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Ensure the data dir exists</span></span><br><span class="line">mkdir -p &quot;$&#123;HEKETI_PATH&#125;&quot; 2&gt;/dev/null</span><br><span class="line">if [[ $? -ne 0 &amp;&amp; ! -d &quot;$&#123;HEKETI_PATH&#125;&quot; ]]; then</span><br><span class="line">    fail &quot;Failed to create $&#123;HEKETI_PATH&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Test that our volume is writable.</span></span><br><span class="line">touch &quot;$&#123;HEKETI_PATH&#125;/test&quot; &amp;&amp; rm &quot;$&#123;HEKETI_PATH&#125;/test&quot;</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">    fail &quot;$&#123;HEKETI_PATH&#125; is read-only&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ ! -f &quot;$&#123;HEKETI_PATH&#125;/heketi.db&quot; ]]; then</span><br><span class="line">    info &quot;No database file found&quot;</span><br><span class="line">    out=$(mount | grep &quot;$&#123;HEKETI_PATH&#125;&quot; | grep heketidbstorage)</span><br><span class="line">    if [[ $? -eq 0 ]]; then</span><br><span class="line">        info &quot;Database volume found: $&#123;out&#125;&quot;</span><br><span class="line">        info &quot;Database file is expected, waiting...&quot;</span><br><span class="line">        check=0</span><br><span class="line">        while [[ ! -f &quot;$&#123;HEKETI_PATH&#125;/heketi.db&quot; ]]; do</span><br><span class="line">            sleep 5</span><br><span class="line">            if [[ $&#123;check&#125; -eq 5 ]]; then</span><br><span class="line">               fail &quot;Database file did not appear, exiting.&quot;</span><br><span class="line">            fi</span><br><span class="line">            ((check+=1))</span><br><span class="line">        done</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">stat &quot;$&#123;HEKETI_PATH&#125;/heketi.db&quot; 2&gt;/dev/null | tee -a &quot;$&#123;LOG&#125;&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> Workaround <span class="keyword">for</span> scenario <span class="built_in">where</span> a lock on the heketi.db has not been</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> released.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This code uses a non-blocking flock <span class="keyword">in</span> a loop rather than a blocking</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lock with timeout due to issues with current gluster and flock</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ( see rhbz<span class="comment">#1613260 )</span></span></span><br><span class="line">for _ in $(seq 1 60); do</span><br><span class="line">    flock --nonblock &quot;$&#123;HEKETI_PATH&#125;/heketi.db&quot; true</span><br><span class="line">    flock_status=$?</span><br><span class="line">    if [[ $flock_status -eq 0 ]]; then</span><br><span class="line">        break</span><br><span class="line">    fi</span><br><span class="line">    sleep 1</span><br><span class="line">done</span><br><span class="line">if [[ $flock_status -ne 0 ]]; then</span><br><span class="line">    fail &quot;Database file is read-only&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ -d &quot;$&#123;BACKUPDB_PATH&#125;&quot; ]]; then</span><br><span class="line">    if [[ -f &quot;$&#123;BACKUPDB_PATH&#125;/heketi.db.gz&quot; ]] ; then</span><br><span class="line">        gunzip -c &quot;$&#123;BACKUPDB_PATH&#125;/heketi.db.gz&quot; &gt; &quot;$&#123;BACKUPDB_PATH&#125;/heketi.db&quot;</span><br><span class="line">        if [[ $? -ne 0 ]]; then</span><br><span class="line">            fail &quot;Unable to extract backup database&quot;</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">    if [[ -f &quot;$&#123;BACKUPDB_PATH&#125;/heketi.db&quot; ]] ; then</span><br><span class="line">        cp &quot;$&#123;BACKUPDB_PATH&#125;/heketi.db&quot; &quot;$&#123;HEKETI_PATH&#125;/heketi.db&quot;</span><br><span class="line">        if [[ $? -ne 0 ]]; then</span><br><span class="line">            fail &quot;Unable to copy backup database&quot;</span><br><span class="line">        fi</span><br><span class="line">        info &quot;Copied backup db to $&#123;HEKETI_PATH&#125;/heketi.db&quot;</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">if</span> the heketi.db does not exist and HEKETI_TOPOLOGY_FILE is <span class="built_in">set</span>, start the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> heketi service <span class="keyword">in</span> the background and load the topology. Once <span class="keyword">done</span>, move the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> heketi service back to the foreground again.</span></span><br><span class="line">if [[ &quot;$(stat -c %s $&#123;HEKETI_PATH&#125;/heketi.db 2&gt;/dev/null)&quot; == 0 &amp;&amp; -n &quot;$&#123;HEKETI_TOPOLOGY_FILE&#125;&quot; ]]; then</span><br><span class="line">    # start hketi in the background</span><br><span class="line">    /usr/bin/heketi --config=/etc/heketi/heketi.json &amp;</span><br><span class="line"></span><br><span class="line">    # wait until heketi replies</span><br><span class="line">    while ! curl http://localhost:8080/hello; do</span><br><span class="line">        sleep 0.5</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    # load the topology</span><br><span class="line">    if [[ -n &quot;$&#123;HEKETI_ADMIN_KEY&#125;&quot; ]]; then</span><br><span class="line">        HEKETI_SECRET_ARG=&quot;--secret=&#x27;$&#123;HEKETI_ADMIN_KEY&#125;&#x27;&quot;</span><br><span class="line">    fi</span><br><span class="line">    heketi-cli --user=admin &quot;$&#123;HEKETI_SECRET_ARG&#125;&quot; topology load --json=&quot;$&#123;HEKETI_TOPOLOGY_FILE&#125;&quot;</span><br><span class="line">    if [[ $? -ne 0 ]]; then</span><br><span class="line">        # something failed, need to exit with an error</span><br><span class="line">        kill %1</span><br><span class="line">        fail &quot;failed to load topology from $&#123;HEKETI_TOPOLOGY_FILE&#125;&quot;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # bring heketi back to the foreground</span><br><span class="line">    fg %1</span><br><span class="line">else</span><br><span class="line">    # just start in the foreground</span><br><span class="line">    exec /usr/bin/heketi --config=/etc/heketi/heketi.json</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>从输出的日志信息可以看出，此时heketidb文件存在，但是再执行以下命令时失败</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/heketi --config=/etc/heketi/heketi.json</span><br></pre></td></tr></table></figure><p>github上发现了相关issue</p><p><a href="https://github.com/heketi/heketi/issues/1636">https://github.com/heketi/heketi/issues/1636</a></p><p><a href="https://github.com/heketi/heketi/issues/1378">https://github.com/heketi/heketi/issues/1378</a></p><p>相同点是都再重启heketi 服务后发生了 <code>invalid page type</code>的错误，heketi项目的贡献者提到了此报错是由于bolt db文件损坏，没有提及任何产生原因。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>根据描述可知无法采取简单的命令进行恢复，于是</p><ol><li><p>从本地健康的集群导出完整可用的heketidb，执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heketi db export --dbfile heketi.db --jsonfile heketi_new.json</span><br></pre></td></tr></table></figure><p>注意：经测试此时只能从正常的heketidb文件中导出，损坏的db文件无法导出json</p></li><li><p>此时导出的json文件中数据还是原来集群的，需要将问题集群的gfs node/brick/device等数据一一映射，操作大致为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">① 首先将json文件中的nodeentries与deviceentries处正确映射，此处的node id为随机生成的，不建议更改，以免混乱。device id是每个gfs节点的vg name，存储设备的大小需要进入每个gfs节点执行vgs查看，单位为KB,Bricks处是通过`lvs|grep brick |awk &#x27;&#123;print $1&#125;&#x27;`获得。</span><br><span class="line">② 进入gfs节点执行 gluster volume info，这里拿到volume的user.heketi.id就是之后json文件中的volumeentries id，Bricks处多副本的brick_XXXX是json文件中的volumeentries/Bricks,json文件中volume的gid对应了k8s pv卷中的gid</span><br><span class="line">③ 进入每个gfs节点执行lvs与lsblk得到json中需要的LvmThinPool、size、TpSize</span><br></pre></td></tr></table></figure><p>注意：clusterid与nodeid是由heketi生成的，其余需要与gfs环境一一对应。而且发现需将json文件中的数组按照数字/字母大小排列。</p></li><li><p>将heketi_new.json导成dbfile,执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heketi db import --dbfile heketi.db --jsonfile heketi01.json</span><br></pre></td></tr></table></figure><p>将此db文件替换损坏的db,重启heketi服务</p></li><li><p>执行 <code>heketi-cli db check</code>检测是否正常</p></li></ol><h1 id="暴力测试"><a href="#暴力测试" class="headerlink" title="暴力测试"></a>暴力测试</h1><p>关于此问题的github只是有人提出了恢复方案，指出为boltdb损坏，没有谈及触发条件，特进行了以下模拟测试。</p><table><thead><tr><th>测试方法</th><th>测试结果</th><th>是否达到期望</th></tr></thead><tbody><tr><td>heketi.db写入脏数据</td><td>服务报错，数据格式错误</td><td>×</td></tr><tr><td>heketi.db增加错误的字段</td><td>服务报错，json格式不正确或未知的字段</td><td>×</td></tr><tr><td>清空heketi.db 数据，并写入数据</td><td>服务报错，显示db文件丢失</td><td>×</td></tr><tr><td>创建卷时，重启heketi</td><td>服务正常运行</td><td>×</td></tr><tr><td>扩容卷时，重启heketi</td><td>服务正常运行</td><td>×</td></tr><tr><td>heketi.db文件设置为只读权限</td><td>服务报错，显示db只读</td><td>×</td></tr><tr><td>删除.glusterfs文件</td><td>服务报错，显示db文件丢失</td><td>×</td></tr><tr><td>无限重启heketi服务</td><td>等待10分钟后停止脚本，服务正常运行</td><td>×</td></tr><tr><td>无限创建(删除)volume</td><td>等待10分钟后停止脚本，服务正常运行</td><td>×</td></tr><tr><td>修改heketi.json配置文件</td><td>服务报错，显示heketi错误</td><td>×</td></tr><tr><td>杀掉heketi进程</td><td>服务正常运行，创建卷不成功，重启即可</td><td>×</td></tr><tr><td>将gfs服务停止，创建卷后。并重启gfs集群</td><td>服务正常运行，创建卷不成功，重启即可</td><td>×</td></tr><tr><td>模拟网络延迟(创建卷，删除卷，重启服务等操作)</td><td>服务正常运行</td><td>×</td></tr><tr><td>删除部分db数据</td><td>服务正常运行</td><td>×</td></tr><tr><td>调整glusterfs与heketi资源触发自动重启</td><td>服务正常运行</td><td>×</td></tr><tr><td>删除heketijson中的几个id信息，导入db文件</td><td>服务启动失败，服务报错Id not found</td><td>×</td></tr><tr><td>模拟zk读写数据文件时重启glusterfs与heketi</td><td>服务正常运行</td><td>×</td></tr><tr><td>模拟客户端读写数据文件时重启glusterfs与heketi</td><td>服务正常运行</td><td>×</td></tr><tr><td>heketi设置0.1c 0.1g同时批量创建删除pvc</td><td>服务正常运行</td><td>×</td></tr></tbody></table><p>未测试出同样的问题，因为报错信息是在执行heketi逻辑时发生的，结合heketi与boltdb源码找到了报错位置，其中boltdb涉及到的内存page与bucket处于黑盒状态，需进一步研究。</p><h1 id="防范策略"><a href="#防范策略" class="headerlink" title="防范策略"></a>防范策略</h1><ol><li><p>github上heketi的贡献者指出会定期收到boltdb文件损坏的报告，并谈到这种情况的出现概率较低，建议关闭heketidbstorage的性能转换设置。</p><p><a href="https://github.com/heketi/heketi/issues/1591">https://github.com/heketi/heketi/issues/1591</a></p><p>因为没能复现此问题也无法验证是否有效。</p></li><li><p>写了个脚本每台0点自动备份heketidb文件，放到了计划任务中，当遇到此类问题时能通过备份文件尽快恢复，但是会有丢失数据的可能，不清楚是否有触发器之类的东西能在用户创建或者删除卷/磁盘时自动触发脚本机制。</p><p>（恢复数据比较繁琐，smartx环境当时10个卷恢复时间为8个小时。）</p></li><li><p>通过脚本在master节点每隔1小时备份下heketi.json文件，命令为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heketi-cli db dump &gt;&gt; `date +%Y%m%d%H%M%S`-heketi_backup.json</span><br></pre></td></tr></table></figure><p>（恢复速度快，当出现问题时恢复的数据量较小）</p><p>gfs集群用到最多的操作就是创建/删除存储盘，基本上都在云管页面进行操作，可以在用户操作存储盘后调用此命令来完成备份。如果都在页面操作则就算遇到boltdb问题可秒级恢复，此时也可以动态的监控此备份文件，如果没有数据则说明产生了问题。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题现象&quot;&gt;&lt;a href=&quot;#问题现象&quot; class=&quot;headerlink&quot; title=&quot;问题现象&quot;&gt;&lt;/a&gt;问题现象&lt;/h1&gt;&lt;p&gt;日常巡检时发现heketi服务异常，启动失败。查看heketi log报错为invalid page type: 19:10</summary>
      
    
    
    
    <category term="存储类" scheme="https://slions.github.io/categories/%E5%AD%98%E5%82%A8%E7%B1%BB/"/>
    
    
    <category term="kubernetes storage" scheme="https://slions.github.io/tags/kubernetes-storage/"/>
    
    <category term="heketi" scheme="https://slions.github.io/tags/heketi/"/>
    
  </entry>
  
  <entry>
    <title>gluster排故纪实</title>
    <link href="https://slions.github.io/2021/08/08/gluster%E6%8E%92%E6%95%85%E7%BA%AA%E5%AE%9E/"/>
    <id>https://slions.github.io/2021/08/08/gluster%E6%8E%92%E6%95%85%E7%BA%AA%E5%AE%9E/</id>
    <published>2021-08-08T01:55:01.000Z</published>
    <updated>2021-08-12T11:46:37.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="setup-openshift-heketi-storage无空间"><a href="#setup-openshift-heketi-storage无空间" class="headerlink" title="setup-openshift-heketi-storage无空间"></a>setup-openshift-heketi-storage无空间</h1><p><code>glusterfs 4.1.7</code> <code>heketi v9.0.0</code> <code>部署</code></p><p><strong>问题描述</strong></p><p>运行setup-openshift-heketi-storage子命令时heketi-cli报告“无空间”错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> heketi-cli setup-openshift-heketi-storage</span></span><br><span class="line"></span><br><span class="line">Error: Failed to allocate new volume: No space</span><br></pre></td></tr></table></figure><p><strong>问题原因</strong></p><p>运行topology load命令的时候，服务端和heketi-cli的版本不匹配造成的。</p><p><strong>解决策略</strong></p><p>停止正在运行的heketi pod：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale deployment deploy-heketi --replicas=0</span><br></pre></td></tr></table></figure><p>手动删除存储块设备中的任何签名：</p><p>加载拓扑的操作是在gluster 中添加了Peer，所以需要手动detach peer</p><p>然后继续运行heketi pod：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale deployment deploy-heketi --replicas=1</span><br></pre></td></tr></table></figure><p>用匹配版本的heketi-cli重新加载拓扑，然后重试该步骤。</p><h1 id="gfs集群添加磁盘失败"><a href="#gfs集群添加磁盘失败" class="headerlink" title="gfs集群添加磁盘失败"></a>gfs集群添加磁盘失败</h1><p><code>glusterfs 4.1.7</code> <code>heketi v9.0.0</code> <code>部署</code></p><p><strong>问题描述</strong></p><p>给gfs集群添加设备时报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Adding device /dev/sdb ... Unable to add device: Unable to execute command on glusterfs-xp1nx:  Can&#x27;t initialize physical volume &quot;/dev/vdb&quot;of volume group &quot;vg_dc649bdf755667e58c5d779f9d900057&quot; without -ff</span><br></pre></td></tr></table></figure><p><strong>问题原因</strong></p><p>原因是/dev/sdb已经创建过了pv,需要删除了重新创建</p><p><strong>解决策略</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/zero of=/dev/sdb bs=1k count=1</span><br><span class="line"></span><br><span class="line">blockdev --rereadpt /dev/vdb</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pvcreate -ff --metadatasize=128M --dataalignment=256K /dev/sdb</span><br></pre></td></tr></table></figure><h1 id="创建heketidbstrorage失败"><a href="#创建heketidbstrorage失败" class="headerlink" title="创建heketidbstrorage失败"></a>创建heketidbstrorage失败</h1><p><code>glusterfs 4.1.7</code> <code>heketi v9.0.0</code> <code>部署</code></p><p><strong>问题描述</strong></p><p>给heketi创建持久卷时报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> heketi-cli setup-openshift-heketi-storage</span></span><br><span class="line"></span><br><span class="line">Error: Unable to execute command on glusterfs-pbzcj: volume create: heketidbstorage: failed: Staging failed on 192.168.186.10. Error: Host 192.168.186.10 is not in &#x27;Peer in Cluster&#x27; state</span><br><span class="line"></span><br><span class="line">Failed on setup openshift heketi storage</span><br></pre></td></tr></table></figure><p><strong>问题原因</strong></p><p>登录相关pod，发现gluster peer status 显示有问题</p><p><strong>解决策略</strong></p><p>修改/etc/hosts 将所有node节点添加解析记录</p><h1 id="创建heketidb卷引发机器重启"><a href="#创建heketidb卷引发机器重启" class="headerlink" title="创建heketidb卷引发机器重启"></a>创建heketidb卷引发机器重启</h1><p><code>glusterfs 7.1</code> <code>heketi v9.0.0</code> <code>部署</code></p><p><strong>问题描述</strong></p><p>在运行heketi-cli setup-openshift-heketi-storage时发生机器重启，再次登录后发现gluster没有卷信息，但是lvs看已经生成了，手动删除这些lv也会导致机器重启</p><p><strong>问题原因</strong></p><p>系统内核 &lt; 3.10-863引发的bug</p><p><strong>解决策略</strong></p><p>升级系统内核，部署gfs时需保证内核不小于3.10-863</p><h1 id="调整heketi的日志级别"><a href="#调整heketi的日志级别" class="headerlink" title="调整heketi的日志级别"></a>调整heketi的日志级别</h1><p><code>glusterfs 7.1</code> <code>heketi v9.0.0</code> </p><p><strong>问题描述</strong></p><p>heketi的配置文件是通过secrets挂到容器中的，是通过heketi.json文件生成的，查看发现配置文件中并未指明日志的级别。</p><p><strong>解决策略</strong></p><p>默认的日志级别是debug，如果需要修改，则：</p><p>在heketi.json中 “db”: “/var/lib/heketi/heketi.db”,下添加 <code>&quot;loglevel&quot;: &quot;info&quot;,</code></p><p>注：日志级别(none, critical, error, warning, info, debug)</p><p>注意后面的逗号</p><p>重新生成heketi-config-secret，重启heketi pod即可。</p><h1 id="节点Peer-Rejected"><a href="#节点Peer-Rejected" class="headerlink" title="节点Peer Rejected"></a>节点Peer Rejected</h1><p><code>glusterfs 7.1</code> <code>heketi v9.0.0</code> </p><p><strong>问题描述</strong></p><p>删除一个节点的/var/lib/glusterd/*，从其他健康的gfs节点查看集群成员状态此节点已经变成了Peer Rejected 。</p><p><strong>问题原因</strong></p><p>此节点uuid改变</p><p><strong>解决策略</strong></p><p>需要手动恢复：在健康节点查看之前异常节点的uuid。然后修改异常节点的glusterd.info，再把健康节点的uuid拷贝到异常节点的peers目录下，重启异常节点的gfs pod 。</p><h1 id="服务挂载卷消失-Server-authenication-failed"><a href="#服务挂载卷消失-Server-authenication-failed" class="headerlink" title="服务挂载卷消失 Server authenication failed"></a>服务挂载卷消失 Server authenication failed</h1><p><code>glusterfs 7.1</code> <code>heketi v9.0.0</code> <code>kubernetes 1.11.0</code> </p><p><strong>问题描述</strong></p><p>机器断电重启后发现原先挂载了glusterfs存储的nginx容器里pv没了，查看glusterfs和heketi容器都正常运行，客户端nginx容器也能正常跑起来，查看容器的日志并没有什么报错。</p><p><strong>问题原因</strong></p><p>查看event中报错信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[2019-07-24 08:58:01.548933] E [MSGID: 114044] [client-handshake.c:1144:client_setvolume_cbk] 0-vol_0b6185b748a309fc93431319db6e8343-client-2: SETVOLUME on remote-host failed: Authentication failed [权限不够]</span><br><span class="line"></span><br><span class="line">[2019-07-24 08:58:01.548976] E [fuse-bridge.c:5338:notify] 0-fuse: Server authenication failed. Shutting down.</span><br></pre></td></tr></table></figure><p>截图如下：</p><p><img src="/doc_picture/gfs1.png" alt="image-gfstrouble"></p><p><strong>解决策略</strong></p><p>编辑 /etc/glusterfs/glusterd.vol添加<code>option rpc-auth-allow-insecure on</code>；</p><p>重启glusterd服务然后删了nginx pod成功找回了挂载卷（数据还在）</p><h1 id="transport-endpoint-is-not-connected"><a href="#transport-endpoint-is-not-connected" class="headerlink" title="transport endpoint is not connected"></a>transport endpoint is not connected</h1><p><code>glusterfs 7.1</code> <code>heketi v9.0.0</code> </p><p><strong>问题描述</strong></p><p>客户端挂载盘报错：transport endpoint is not connected<br><img src="/doc_picture/gfs2.png" alt="image-gfstrouble"></p><p><strong>问题原因</strong></p><p>卷处于关闭状态、服务器间通信出现问题、glusterfs存储系统间数据不一致都会导致此现象产生。</p><p><strong>解决策略</strong></p><p>首先应该检查gfs服务是否正常，如果都是Run的状态则查看对应卷的状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n glusterfs</span><br></pre></td></tr></table></figure><p>检查对应的卷的状态</p><p>找到对应的pv</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pv -n $&lt;namespace&gt; </span><br></pre></td></tr></table></figure><p>找到对应的卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pv  $PV |grep Path: </span><br></pre></td></tr></table></figure><p>查看glusterfs volume的状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl exec -it -n glusterfs  $&lt;glusterfs_volume&gt;  --  gluster volume info $glusterfs_volume | grep Status </span><br></pre></td></tr></table></figure><p>在客户端查看挂载对应盘的进程是否正常；</p><p>若检查glusterfs状态均为正常，则表明其他原因导致（如节点网络异常等），重启该存储盘异常服务即可解决</p><h1 id="pv-fail状态"><a href="#pv-fail状态" class="headerlink" title="pv fail状态"></a>pv fail状态</h1><p><code>glusterfs 7.1</code> <code>heketi v9.0.0</code> <code>kubernetes 1.11.0</code></p><p><strong>问题描述</strong></p><p>测试时删除pvc时发现pvc已删除但是pv还在，是Failed的状态。<br><img src="/doc_picture/gfs3.png" alt="image-gfstrouble"></p><p>使用heketi-cli volume delete删除卷报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">heketi-cli volume delete 3cf6a16d635c63a7ff7023a44d37c805</span></span><br><span class="line">Error: Failed to set up volume delete: The target exists, contains other items, or is in use.</span><br></pre></td></tr></table></figure><p>先手动将pv删掉</p><p>登录其中一台gluster执行如下命令，删除卷时发现报错：</p><p>failed： some of the peers are down</p><p><img src="/doc_picture/gfs4.png" alt="image-gfstrouble"></p><p><strong>问题原因</strong></p><p>因为我测试时把gfs集群中一台机器关机了，手动把这台剔除集群，发现可以删除了。<br><img src="/doc_picture/gfs5.png" alt="image-gfstrouble"></p><p>上面这只是测试，不建议使用，因为heketi中的残留数据还在。</p><p><strong>解决策略</strong></p><p>最好的方式时恢复那台关机的节点。</p><p>如果删除卷必须在信任池中节点都在才可以，那么必须保证信任池的健康。</p><h1 id="gfs狂刷日志导致的节点down"><a href="#gfs狂刷日志导致的节点down" class="headerlink" title="gfs狂刷日志导致的节点down"></a>gfs狂刷日志导致的节点down</h1><p><code>glusterfs 4.1.7</code> <code>heketi v9.0.0</code> <code>kubernetes 1.11.0</code> </p><p><strong>问题描述</strong></p><p>其中一个gfs节点启动失败，一直在重启。</p><p><strong>问题原因</strong></p><p>登录此节点df发现根分区使用率为100%，发现gfs服务频繁刷新产生日志导致。<br><img src="/doc_picture/gfs7.png" alt="image-gfstrouble"></p><p>每次卷的重建，客户端进程glusterfs都会被重启，但进程重启的过程中，新的进程产生，旧的进程并没有被关闭，并且还在持续调用被删除的卷，所以glusterfshd.log日志不停地在输出卷无法连接的错误。在K8s 1.11.0+gfs 4.1.7上可以通过批量创建卷再批量删除卷模拟此场景。</p><p><strong>解决策略</strong></p><p>临时解决方案先把大的日志备份压缩，重启此pods。如果本地资源紧张也可以直接删除问题日志。</p><p>永久解决：</p><p>gfs7.1版本已修复此问题。</p><p>要保证存储节点有足够的根分区或给/var/挂一块足够的盘（最少30G）</p><h1 id="创建pvc-pending"><a href="#创建pvc-pending" class="headerlink" title="创建pvc pending"></a>创建pvc pending</h1><p><code>glusterfs 7.1</code> <code>heketi v9.0.0</code>  <code>kubernetes 1.17.0</code></p><p><strong>问题描述</strong></p><p>在健康的三节点gfs集群进行测试，进入其中一个gfs pods手动关闭glusterd服务，在k8s中创建pvc,一直pending。查看glusterfs日志：<br><img src="/doc_picture/gfs8.png" alt="image-gfstrouble"></p><p><strong>问题原因</strong></p><p>创建卷找不到可用的3副本</p><p><strong>解决策略</strong></p><p>把glusterd启动即可。</p><h1 id="heketi-空间计算与实际brick不匹配"><a href="#heketi-空间计算与实际brick不匹配" class="headerlink" title="heketi 空间计算与实际brick不匹配"></a>heketi 空间计算与实际brick不匹配</h1><p><code>glusterfs 7.1</code> <code>heketi v9.0.0</code>  <code>kubernetes 1.17.0</code></p><p><strong>问题描述</strong></p><p>创建pvc时发现报错没有空间<br><img src="/doc_picture/gfs9.png" alt="image-gfstrouble"></p><p>查看heketi中的gfs集群状态发现只创建了3个G的卷但是却显示使用了19个G，没有剩余空间了<br><img src="/doc_picture/gfs10.png" alt="image-gfstrouble"></p><p>查看db中是否存在待处理请求导致数据不一致的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">heketi-cli server operations info</span><br><span class="line">heketi-cli server operations list</span><br></pre></td></tr></table></figure><p>发现没有异常状态<br><img src="/doc_picture/gfs11.png" alt="image-gfstrouble"></p><p>检查db中的状态</p><p>heketi-cli db check发现异常<br><img src="/doc_picture/gfs12.png" alt="image-gfstrouble"></p><p><strong>问题原因</strong></p><p>heketi与实际的存储设备使用空间不匹配</p><p><strong>解决策略</strong></p><p>尝试使用设备同步命令测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heketi-cli device resync $&lt;device&gt;</span><br></pre></td></tr></table></figure><h1 id="heketi与gfs卷数量不一致"><a href="#heketi与gfs卷数量不一致" class="headerlink" title="heketi与gfs卷数量不一致"></a>heketi与gfs卷数量不一致</h1><p><code>glusterfs 7.1</code> <code>heketi v9.0.0</code>  <code>kubernetes 1.17.0</code></p><p><strong>问题描述</strong></p><p>通过heketi查看到的volume数量与gluster查看到的不一致</p><p>通过heketi查看到的volume卷：1个10G、1个2G（heketidb）、3个1G。<br><img src="/doc_picture/gfs13.png" alt="image-gfstrouble"><br><img src="/doc_picture/gfs14.png" alt="image-gfstrouble"></p><p>通过gluster查看volume卷，可以确认实际使用的卷为3个。1个10G、1个2G（heketidb）、2个1G。<br><img src="/doc_picture/gfs15.png" alt="image-gfstrouble"></p><p><strong>解决策略</strong></p><p>确认异常卷id信息</p><p><img src="/doc_picture/gfs16.png" alt="image-gfstrouble"></p><p>此时如果通过heketi-cli命令删除（heketi-cli volume delete VOLUME_ID）将会报设备繁忙：target is busy。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error: umount: /var/lib/heketi/mounts/vg_NAME/brick_XXXXXX: target is busy.</span><br><span class="line">(In some cases useful info about processes that use the device is found by lsof(8) or fuser(1))</span><br></pre></td></tr></table></figure><p>确认gfs节点上的异常lv设备<br><img src="/doc_picture/gfs18.png" alt="image-gfstrouble"></p><p>查看该设备被那些进程或文件所占用。如下可以看到该brick被进程占用，所以删除时会报设备繁忙。<br><img src="/doc_picture/gfs19.png" alt="image-gfstrouble"></p><p>通过fuser -kuc NAME进行搜索并且杀死进程后，可通过heketi-cli命令正常删除异常volume卷。</p><p><img src="/doc_picture/gfs20.png" alt="image-gfstrouble"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;setup-openshift-heketi-storage无空间&quot;&gt;&lt;a href=&quot;#setup-openshift-heketi-storage无空间&quot; class=&quot;headerlink&quot; title=&quot;setup-openshift-heketi-sto</summary>
      
    
    
    
    <category term="存储类" scheme="https://slions.github.io/categories/%E5%AD%98%E5%82%A8%E7%B1%BB/"/>
    
    
    <category term="glusterfs" scheme="https://slions.github.io/tags/glusterfs/"/>
    
    <category term="kubernetes storage" scheme="https://slions.github.io/tags/kubernetes-storage/"/>
    
  </entry>
  
  <entry>
    <title>修改centos7主机名</title>
    <link href="https://slions.github.io/2021/08/07/%E4%BF%AE%E6%94%B9centos7%E4%B8%BB%E6%9C%BA%E5%90%8D/"/>
    <id>https://slions.github.io/2021/08/07/%E4%BF%AE%E6%94%B9centos7%E4%B8%BB%E6%9C%BA%E5%90%8D/</id>
    <published>2021-08-07T13:45:26.000Z</published>
    <updated>2021-08-12T11:47:14.611Z</updated>
    
    <content type="html"><![CDATA[<p>这篇讲解下如何修改Centos7的主机名。</p><p>Centos7中主机名分为了3类：</p><ol><li><p>static类</p><p>就是我们常说的主机名。由<code>/etc/hostname</code>文件决定。</p></li><li><p>transient类</p><p>我们常说的临时主机名。默认在系统启动的时候会根据<code>/etc/hostname</code>文件中的静态主机名进行初始化。</p></li><li><p>pretty类</p><p>它可以提供非标准的主机名。它可以包含特殊符号，例如空格。</p></li></ol><p><code>/etc/hostname</code>文件没有主机名的时候，在系统启动的时候，内核会将transient初始化为<code>localhost.localdomain</code>。</p><h1 id="主机名修改方式"><a href="#主机名修改方式" class="headerlink" title="主机名修改方式"></a>主机名修改方式</h1><h2 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h2><p>使用<code>hostname</code>命令修改主机名，它修改是transient主机名，即临时生效的主机名。</p><h2 id="etc-hostname"><a href="#etc-hostname" class="headerlink" title="/etc/hostname"></a>/etc/hostname</h2><p>直接修改/etc/hostname文件，它瞬时生效+永久生效。</p><h2 id="nmtui"><a href="#nmtui" class="headerlink" title="nmtui"></a>nmtui</h2><p>通过<code>nmtui</code>命令在图形化界面修改主机名。会直接修改/etc/hostname文件，他会瞬时生效+永久生效的。</p><h2 id="hostnamectl"><a href="#hostnamectl" class="headerlink" title="hostnamectl"></a>hostnamectl</h2><p>使用<code>hostnamectl</code>命令，它可以修改并查看static、transient或pretty三种主机名。当它修改了static主机名时，会直接写入*/etc/hostname*文件中，因此它也是瞬时生效+永久生效的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hostnamectl --<span class="built_in">help</span></span></span><br><span class="line">hostnamectl [OPTIONS...] COMMAND ...</span><br><span class="line"></span><br><span class="line">Query or change system hostname.</span><br><span class="line"></span><br><span class="line">  -h --help              Show this help</span><br><span class="line">     --version           Show package version</span><br><span class="line">     --no-ask-password   Do not prompt for password</span><br><span class="line">  -H --host=[USER@]HOST  Operate on remote host</span><br><span class="line">  -M --machine=CONTAINER Operate on local container</span><br><span class="line">     --transient         Only set transient hostname</span><br><span class="line">     --static            Only set static hostname</span><br><span class="line">     --pretty            Only set pretty hostname</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  status                 Show current hostname settings</span><br><span class="line">  set-hostname NAME      Set system hostname</span><br><span class="line">  set-icon-name NAME     Set icon name for host</span><br><span class="line">  set-chassis NAME       Set chassis type for host</span><br><span class="line">  set-deployment NAME    Set deployment environment for host</span><br><span class="line">  set-location NAME      Set location for host</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查看主机名"><a href="#查看主机名" class="headerlink" title="查看主机名"></a>查看主机名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]#  hostnamectl</span><br><span class="line">   Static hostname: slions_pc1</span><br><span class="line">         Icon name: computer-vm</span><br><span class="line">           Chassis: vm</span><br><span class="line">        Machine ID: 72c6db2a36e54cc584626da0118ed9ca</span><br><span class="line">           Boot ID: 2cbdd44b889d40b29f932e9462e8ec15</span><br><span class="line">    Virtualization: vmware</span><br><span class="line">  Operating System: CentOS Linux 7 (Core)</span><br><span class="line">       CPE OS Name: cpe:/o:centos:centos:7</span><br><span class="line">            Kernel: Linux 3.10.0-957.el7.x86_64</span><br><span class="line">      Architecture: x86-64</span><br></pre></td></tr></table></figure><h3 id="同时修改3种主机名"><a href="#同时修改3种主机名" class="headerlink" title="同时修改3种主机名"></a>同时修改3种主机名</h3><p>当同时修改了pretty和(static | transient)中的一种时，将取pretty名的简化部分作为static主机名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# hostnamectl set-hostname slions</span><br><span class="line">[root@slions_pc1 ~]# hostname</span><br><span class="line">slions</span><br><span class="line">[root@slions_pc1 ~]# cat /etc/hostname</span><br><span class="line">slions</span><br><span class="line">[root@slions_pc1 ~]# hostnamectl status</span><br><span class="line">   Static hostname: slions</span><br><span class="line">         Icon name: computer-vm</span><br><span class="line">           Chassis: vm</span><br><span class="line">        Machine ID: 72c6db2a36e54cc584626da0118ed9ca</span><br><span class="line">           Boot ID: 2cbdd44b889d40b29f932e9462e8ec15</span><br><span class="line">    Virtualization: vmware</span><br><span class="line">  Operating System: CentOS Linux 7 (Core)</span><br><span class="line">       CPE OS Name: cpe:/o:centos:centos:7</span><br><span class="line">            Kernel: Linux 3.10.0-957.el7.x86_64</span><br><span class="line">      Architecture: x86-64</span><br><span class="line">[root@slions_pc1 ~]# hostnamectl --pretty</span><br></pre></td></tr></table></figure><p>可以从结果中看到，只改变了static和transient(内核动态维护的，一定会改变)，而pretty却没设置成功。这是因为这里给出的主机名”slions”是一个符合主机名标准的名称。如果指定一个非标准的主机名，例如包含特殊符号，那么也会设置pretty。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# hostnamectl set-hostname &quot;slions1 slions2&quot;</span><br><span class="line">[root@slions_pc1 ~]# hostnamectl status</span><br><span class="line">   Static hostname: slions1slions2</span><br><span class="line">   Pretty hostname: slions1 slions2</span><br><span class="line">         Icon name: computer-vm</span><br><span class="line">           Chassis: vm</span><br><span class="line">        Machine ID: 72c6db2a36e54cc584626da0118ed9ca</span><br><span class="line">           Boot ID: 2cbdd44b889d40b29f932e9462e8ec15</span><br><span class="line">    Virtualization: vmware</span><br><span class="line">  Operating System: CentOS Linux 7 (Core)</span><br><span class="line">       CPE OS Name: cpe:/o:centos:centos:7</span><br><span class="line">            Kernel: Linux 3.10.0-957.el7.x86_64</span><br><span class="line">      Architecture: x86-64</span><br></pre></td></tr></table></figure><p>pretty hostname已经改变，且static hostname是它的”简化版”。</p><h3 id="修改某种类型的主机名"><a href="#修改某种类型的主机名" class="headerlink" title="修改某种类型的主机名"></a>修改某种类型的主机名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname NAME --static</span><br><span class="line">hostnamectl set-hostname NAME --transient</span><br><span class="line">hostnamectl set-hostname NAME --pretty</span><br><span class="line"><span class="meta">#</span><span class="bash"> 还可以同时修改两种</span></span><br><span class="line">hostnamectl set-hostname NAME --static --transient</span><br><span class="line">hostnamectl set-hostname NAME --static --pretty</span><br><span class="line">hostnamectl set-hostname NAME --transient --pretty</span><br></pre></td></tr></table></figure><h3 id="修改、查看远程主机的主机名"><a href="#修改、查看远程主机的主机名" class="headerlink" title="修改、查看远程主机的主机名"></a>修改、查看远程主机的主机名</h3><p>使用”-H”或”–host”选项。连接基于SSH。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl -H [USER@]HOST set-hostname NAME</span><br><span class="line">hostnamectl -H [USER@]HOST status</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇讲解下如何修改Centos7的主机名。&lt;/p&gt;
&lt;p&gt;Centos7中主机名分为了3类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;static类&lt;/p&gt;
&lt;p&gt;就是我们常说的主机名。由&lt;code&gt;/etc/hostname&lt;/code&gt;文件决定。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    <category term="linux系统" scheme="https://slions.github.io/categories/linux%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="linux" scheme="https://slions.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux误删文件恢复思路</title>
    <link href="https://slions.github.io/2021/08/07/linux%E8%AF%AF%E5%88%A0%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D%E6%80%9D%E8%B7%AF/"/>
    <id>https://slions.github.io/2021/08/07/linux%E8%AF%AF%E5%88%A0%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D%E6%80%9D%E8%B7%AF/</id>
    <published>2021-08-07T10:36:34.000Z</published>
    <updated>2021-08-12T11:47:27.415Z</updated>
    
    <content type="html"><![CDATA[<p>使用linux时对于执行删除操作要慎之又慎，特别是重要的数据最好提前备份。当然，如果真的删除了一个文件时，我们也要冷静思考，想想如何通过其他手段弥补或减小损失。</p><p>在解决问题前，我们先了解下涉及到的基本概念：</p><ul><li><p>我们看到的文件实际上是一个指向inode的链接, inode链接包含了文件的所有属性, 比如权限和所有者, 数据块地址(文件存储在磁盘的这些数据块中)。当你删除(rm)一个文件, 实际删除了指向inode的链接, 并没有删除inode的内容，进程可能还在使用。 只有当inode的所有链接完全移去，然后对应的后端数据块才会写入新的数据。</p></li><li><p>proc是linux的一个伪文件系统，用户和应用程序可以通过 proc 得到系统的信息，并可以改变内核的某些参数。</p></li><li><p>系统上的进程在/proc都有一个目录和自己的名字， 里面包含了一个fd(文件描述符)子目录(进程需要打开文件的所有链接). 如果从文件系统中删除一个文件, 此处还有一个inode的引用:<code>/proc/进程号/fd/文件描述符</code></p></li><li><p>lsof（List Open Files） 命令可以查看你进程开打的文件，打开文件的进程，进程打开的端口(TCP、UDP)等等。</p></li></ul><h1 id="模拟误删场景"><a href="#模拟误删场景" class="headerlink" title="模拟误删场景"></a>模拟误删场景</h1><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>创建一个测试文件testfile，持续监听此文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span> <span class="built_in">echo</span> `date +%F-%T` &gt;&gt; testfile;sleep 1;<span class="keyword">done</span> &amp;</span></span><br><span class="line">[1] 12354</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">testfile</span><br><span class="line"><span class="meta">$</span><span class="bash"> tail -f testfile</span></span><br><span class="line">2021-08-07-18:31:46</span><br><span class="line">2021-08-07-18:31:47</span><br><span class="line">2021-08-07-18:31:48</span><br><span class="line">2021-08-07-18:31:49</span><br><span class="line">2021-08-07-18:31:50</span><br><span class="line">2021-08-07-18:31:51</span><br><span class="line">2021-08-07-18:31:52</span><br><span class="line">2021-08-07-18:31:53</span><br><span class="line">2021-08-07-18:31:54</span><br><span class="line">2021-08-07-18:31:55</span><br><span class="line">2021-08-07-18:31:56</span><br><span class="line">2021-08-07-18:31:57</span><br><span class="line">2021-08-07-18:31:58</span><br><span class="line">2021-08-07-18:31:59</span><br><span class="line">2021-08-07-18:32:00</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>开启另一个终端，将testfile删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm  testfile</span></span><br><span class="line">rm：是否删除普通文件 &quot;testfile&quot;？y</span><br></pre></td></tr></table></figure><h2 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h2><p>使用lsof命令查看testfile文件句柄是否释放。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lsof|grep testfile</span></span><br><span class="line">tail      12376                root    3r      REG              253,0       720     686557 /home/slions/testfile (deleted)</span><br></pre></td></tr></table></figure><p>第一列是进程的名称(命令名), 第二列是进程号(PID), 第四列是文件描述符，r说明是读操作。</p><p>现在我们可以知道12376进程仍有打开文件, 文件描述符是3。</p><p>从/proc里面拷贝出删除前的数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp /proc/12376/fd/3 testfile.old</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">testfile  testfile.old</span><br></pre></td></tr></table></figure><p>接着查看下文件内容，恢复的数据可以完美对应。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tail testfile.old</span></span><br><span class="line">2021-08-07-18:32:12</span><br><span class="line">2021-08-07-18:32:13</span><br><span class="line">2021-08-07-18:32:14</span><br><span class="line">2021-08-07-18:32:15</span><br><span class="line">2021-08-07-18:32:16</span><br><span class="line">2021-08-07-18:32:17</span><br><span class="line">2021-08-07-18:32:18</span><br><span class="line">2021-08-07-18:32:19</span><br><span class="line">2021-08-07-18:32:20</span><br><span class="line">2021-08-07-18:32:21</span><br><span class="line"><span class="meta">$</span><span class="bash"> head -5 testfile</span></span><br><span class="line">2021-08-07-18:32:22</span><br><span class="line">2021-08-07-18:32:23</span><br><span class="line">2021-08-07-18:32:24</span><br><span class="line">2021-08-07-18:32:25</span><br><span class="line">2021-08-07-18:32:26</span><br></pre></td></tr></table></figure><p>最后要说的一点还是执行删除前三思后行，为了防止误操作带来的损失可以参考<a href="/2021/08/01/alias%E4%B8%8Erm%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/" title="之前的文章">之前的文章</a>，提高安全性，愿各位维护的程序永不下线，机器永不宕机。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用linux时对于执行删除操作要慎之又慎，特别是重要的数据最好提前备份。当然，如果真的删除了一个文件时，我们也要冷静思考，想想如何通过其他手段弥补或减小损失。&lt;/p&gt;
&lt;p&gt;在解决问题前，我们先了解下涉及到的基本概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我们看到的文件实际上</summary>
      
    
    
    
    <category term="linux系统" scheme="https://slions.github.io/categories/linux%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="linux" scheme="https://slions.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>逻辑卷管理LVM</title>
    <link href="https://slions.github.io/2021/08/06/%E9%80%BB%E8%BE%91%E5%8D%B7%E7%AE%A1%E7%90%86LVM/"/>
    <id>https://slions.github.io/2021/08/06/%E9%80%BB%E8%BE%91%E5%8D%B7%E7%AE%A1%E7%90%86LVM/</id>
    <published>2021-08-06T14:18:11.000Z</published>
    <updated>2021-08-12T11:47:44.954Z</updated>
    
    <content type="html"><![CDATA[<p>总所周知不论是机械硬盘还是固态磁盘大小都是固定的，当磁盘空间满了后只能通过删除无用数据来保持磁盘的可用性，这篇介绍的LVM(Logical Volume Manager)是建立在磁盘和分区之上的一个逻辑层，用来提高磁盘分区管理的灵活性，可以随时随地的扩缩容分区大小。</p><h1 id="LVM术语"><a href="#LVM术语" class="headerlink" title="LVM术语"></a>LVM术语</h1><ul><li><p>Physical Volume(PV)</p><p>实际分区需要调整 System ID 成为 LVM 表示(8e) ，然后经过 pvcreate 命令将他转为 LVM 最低层的 PV, 然后才能使用磁盘。</p></li><li><p>Volume Group(VG)</p><p>将多个PV组合起来，使用vgcreate命令创建成卷组，这样卷组包含了多个PV就比较大了，相当于重新整合了多个分区后得到的磁盘。虽然VG是整合多个PV的，但是创建VG时会将VG所有的空间根据指定的PE大小划分为多个PE，在LVM模式下的存储都以PE为单元，类似于文件系统的Block。</p></li><li><p>Physical Extent(PE)</p><p>LVM 预设使用 4MB 的 PE 区块，每个 LV 最多允许有 65534 个 PE ，即 256GB 。PE 属于 LVM 最小存储区。</p></li><li><p>Logical Volume(LV)</p><p>VG相当于整合过的硬盘，那么LV就相当于分区，只不过该分区是通过VG来划分的。VG中有很多PE单元，可以指定将多少个PE划分给一个LV，也可以直接指定大小(如多少兆)来划分。划分为LV之后就相当于划分了分区，只需再对LV进行格式化即可变成普通的文件系统。</p></li><li><p>Logical extent(LE)</p><p>PE是物理存储单元，而LE则是逻辑存储单元，也即为lv中的逻辑存储单元，和pe的大小是一样的。从vg中划分lv，实际上是从vg中划分vg中的pe，只不过划分lv后它不再称为pe，而是成为le。</p></li></ul><p><strong>LVM之所以能够伸缩容量，其原因就在于能够将LV里空闲的PE移出，或向LV中添加空闲的PE。</strong></p><h1 id="LVM的写入机制"><a href="#LVM的写入机制" class="headerlink" title="LVM的写入机制"></a>LVM的写入机制</h1><p>LV是从VG中划分出来的，LV中的PE很可能来自于多个PV。在向LV存储数据时，有多种存储机制，其中两种是：</p><ul><li>线性模式(linear)：先写完来自于同一个PV的PE，再写来自于下一个PV的PE。</li><li>条带模式(striped)：一份数据拆分成多份，分别写入该LV对应的每个PV中，所以读写性能较好，类似于RAID 0。</li></ul><p>尽管striped读写性能较好也<strong>不建议</strong>使用该模式，因为lvm的着重点在于弹性容量扩展而非性能，要实现性能应该使用RAID来实现，而且使用striped模式时要进行容量的扩展和收缩将比较麻烦。默认的是使用线性模式。</p><h1 id="LVM实现图解"><a href="#LVM实现图解" class="headerlink" title="LVM实现图解"></a>LVM实现图解</h1><p><img src="/doc_picture/lvm.jpg" alt="lvm"></p><h1 id="LVM的实现"><a href="#LVM的实现" class="headerlink" title="LVM的实现"></a>LVM的实现</h1><p>看下我本地的环境，/dev/sdb已经分好了4个区，并且system id都设置为了8e。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lsblk</span></span><br><span class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               8:0    0   20G  0 disk</span><br><span class="line">├─sda1            8:1    0    1G  0 part /boot</span><br><span class="line">└─sda2            8:2    0   19G  0 part</span><br><span class="line">  ├─centos-root 253:0    0   18G  0 lvm  /</span><br><span class="line">  └─centos-swap 253:1    0 1020M  0 lvm  [SWAP]</span><br><span class="line">sdb               8:16   0   20G  0 disk</span><br><span class="line">├─sdb1            8:17   0    5G  0 part</span><br><span class="line">├─sdb2            8:18   0    2G  0 part</span><br><span class="line">├─sdb3            8:19   0   10G  0 part</span><br><span class="line">└─sdb4            8:20   0    3G  0 part</span><br><span class="line">sr0              11:0    1   10G  0 rom</span><br><span class="line"><span class="meta">$</span><span class="bash"> fdisk -l /dev/sdb</span></span><br><span class="line"></span><br><span class="line">磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区</span><br><span class="line">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：0x76721574</span><br><span class="line"></span><br><span class="line">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdb1            2048    10487807     5242880   8e  Linux LVM</span><br><span class="line">/dev/sdb2        10487808    14682111     2097152   8e  Linux LVM</span><br><span class="line">/dev/sdb3        14682112    35653631    10485760   8e  Linux LVM</span><br><span class="line">/dev/sdb4        35653632    41943039     3144704   8e  Linux LVM</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="管理pv"><a href="#管理pv" class="headerlink" title="管理pv"></a>管理pv</h2><p>管理PV有几个命令：pvscan、pvdisplay、pvcreate、pvremove和pvmove。</p><p>命令很简单，基本都不需要任何选项。</p><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>创建pv</td><td>pvcreate</td></tr><tr><td>扫描并列出所有的pv</td><td>pvscan</td></tr><tr><td>列出pv属性信息</td><td>pvdisplay</td></tr><tr><td>移除pv</td><td>pvremove</td></tr><tr><td>移动pv中的数据</td><td>pvmove</td></tr></tbody></table><h3 id="创建PV"><a href="#创建PV" class="headerlink" title="创建PV"></a>创建PV</h3><p>将/dev/sdb[1-3]创建为pv。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pvcreate /dev/sdb[1-3]</span></span><br><span class="line">  Physical volume &quot;/dev/sdb1&quot; successfully created.</span><br><span class="line">  Physical volume &quot;/dev/sdb2&quot; successfully created.</span><br><span class="line">  Physical volume &quot;/dev/sdb3&quot; successfully created.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查看pv属性"><a href="#查看pv属性" class="headerlink" title="查看pv属性"></a>查看pv属性</h3><p>使用pvscan来查看哪些pv和基本属性。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pvscan</span></span><br><span class="line">  PV /dev/sda2   VG centos          lvm2 [&lt;19.00 GiB / 0    free]</span><br><span class="line">  PV /dev/sdb3                      lvm2 [10.00 GiB]</span><br><span class="line">  PV /dev/sdb1                      lvm2 [5.00 GiB]</span><br><span class="line">  PV /dev/sdb2                      lvm2 [2.00 GiB]</span><br><span class="line">  Total: 4 [&lt;36.00 GiB] / in use: 1 [&lt;19.00 GiB] / in no VG: 3 [17.00 GiB]</span><br></pre></td></tr></table></figure><p>使用pvdisplay查看其中一个pv的属性信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pvdisplay /dev/sdb1</span></span><br><span class="line">  &quot;/dev/sdb1&quot; is a new physical volume of &quot;5.00 GiB&quot;</span><br><span class="line">  --- NEW Physical volume ---</span><br><span class="line">  PV Name               /dev/sdb1</span><br><span class="line">  VG Name</span><br><span class="line">  PV Size               5.00 GiB</span><br><span class="line">  Allocatable           NO</span><br><span class="line">  PE Size               0</span><br><span class="line">  Total PE              0</span><br><span class="line">  Free PE               0</span><br><span class="line">  Allocated PE          0</span><br><span class="line">  PV UUID               viN4Oq-ZeFx-3wTz-4zXf-0Z4N-Urcf-F2eMGi</span><br></pre></td></tr></table></figure><h3 id="查看pe分布"><a href="#查看pe分布" class="headerlink" title="查看pe分布"></a>查看pe分布</h3><p><code>pvdisplay  -m</code>可以查看该设备中PE的使用分布图。以下是某次显示结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pvdisplay  -m /dev/sda2</span></span><br><span class="line">  --- Physical volume ---</span><br><span class="line">  PV Name               /dev/sda2</span><br><span class="line">  VG Name               centos</span><br><span class="line">  PV Size               &lt;19.00 GiB / not usable 3.00 MiB</span><br><span class="line">  Allocatable           yes (but full)</span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              4863</span><br><span class="line">  Free PE               0</span><br><span class="line">  Allocated PE          4863</span><br><span class="line">  PV UUID               0TXR4i-laLf-DqVh-lNVK-ybSt-io3c-QKDj5w</span><br><span class="line"></span><br><span class="line">  --- Physical Segments ---</span><br><span class="line">  Physical extent 0 to 4607:                    # 说明第0-4607的PE正被使用。PV中PE的序号是从0开始编号的</span><br><span class="line">    Logical volume      /dev/centos/root</span><br><span class="line">    Logical extents     0 to 4607               # 该PE在LV中的0-4607的LE位置上</span><br><span class="line">  Physical extent 4608 to 4862:                 # 说明4608-4862的PE正使用</span><br><span class="line">    Logical volume      /dev/centos/swap</span><br><span class="line">    Logical extents     0 to 254                # 该PE在LV中的位置是0-254</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>知道了PE的分布，就可以轻松地使用pvmove命令在设备之间进行PE数据的移动。具体关于pvmove的用法，可以自行百度，因为LVM缩容用处不大。</p><h3 id="删除pv"><a href="#删除pv" class="headerlink" title="删除pv"></a>删除pv</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pvremove /dev/sdb3</span></span><br><span class="line">  Labels on physical volume &quot;/dev/sdb3&quot; successfully wiped.</span><br><span class="line"><span class="meta">$</span><span class="bash"> pvscan</span></span><br><span class="line">  PV /dev/sda2   VG centos          lvm2 [&lt;19.00 GiB / 0    free]</span><br><span class="line">  PV /dev/sdb1                      lvm2 [5.00 GiB]</span><br><span class="line">  PV /dev/sdb2                      lvm2 [2.00 GiB]</span><br><span class="line">  Total: 3 [&lt;26.00 GiB] / in use: 1 [&lt;19.00 GiB] / in no VG: 2 [7.00 GiB]</span><br></pre></td></tr></table></figure><h2 id="管理VG"><a href="#管理VG" class="headerlink" title="管理VG"></a>管理VG</h2><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>创建vg</td><td>vgcreate</td></tr><tr><td>扫描并列出所有的vg</td><td>vgscan</td></tr><tr><td>列出vg属性信息</td><td>vgdisplay</td></tr><tr><td>移除vg</td><td>vgremove</td></tr><tr><td>从vg中移除pv</td><td>vgreduce</td></tr><tr><td>将pv添加到vg中</td><td>vgextend</td></tr><tr><td>修改vg属性</td><td>vgchange</td></tr></tbody></table><h3 id="创建vg"><a href="#创建vg" class="headerlink" title="创建vg"></a>创建vg</h3><p>创建一个名为slions_vg1的vg，并将/dev/sdb1与/dev/sdb2加入此vg，指定pe大小为8M（默认为4M）</p><blockquote><p>创建vg后，是很难再修改pe大小的，只有空数据的vg可以修改，但这样还不如重新创建vg。</p><p>创建了vg实际上是在/dev目录下管理了一个vg目录/dev/slions_vg1，不过只有在创建了lv该目录才会被创建，而该vg中创建lv，将会在该目录下生成链接文件指向/dev/dm设备。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vgcreate -s 8M slions_vg1 /dev/sdb[1-2]</span></span><br><span class="line">  Volume group &quot;slions_vg1&quot; successfully created</span><br></pre></td></tr></table></figure><h3 id="查看vg属性"><a href="#查看vg属性" class="headerlink" title="查看vg属性"></a>查看vg属性</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vgscan</span></span><br><span class="line">  Reading volume groups from cache.</span><br><span class="line">  Found volume group &quot;slions_vg1&quot; using metadata type lvm2</span><br><span class="line">  Found volume group &quot;centos&quot; using metadata type lvm2</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vgdisplay slions_vg1</span></span><br><span class="line">  --- Volume group ---</span><br><span class="line">  VG Name               slions_vg1</span><br><span class="line">  System ID</span><br><span class="line">  Format                lvm2</span><br><span class="line">  Metadata Areas        2</span><br><span class="line">  Metadata Sequence No  1</span><br><span class="line">  VG Access             read/write</span><br><span class="line">  VG Status             resizable</span><br><span class="line">  MAX LV                0</span><br><span class="line">  Cur LV                0</span><br><span class="line">  Open LV               0</span><br><span class="line">  Max PV                0</span><br><span class="line">  Cur PV                2</span><br><span class="line">  Act PV                2</span><br><span class="line">  VG Size               6.98 GiB</span><br><span class="line">  PE Size               8.00 MiB</span><br><span class="line">  Total PE              894</span><br><span class="line">  Alloc PE / Size       0 / 0</span><br><span class="line">  Free  PE / Size       894 / 6.98 GiB</span><br><span class="line">  VG UUID               PVvkTd-yRWc-PgGt-kBjy-loN3-Unmm-z37JrX</span><br></pre></td></tr></table></figure><h3 id="移除pv"><a href="#移除pv" class="headerlink" title="移除pv"></a>移除pv</h3><p>从slions_vg1中移除一个pv，/dev/sdb2，再vgdisplay，发现pv少了一个，pe相应的也减少了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vgreduce slions_vg1 /dev/sdb2</span></span><br><span class="line">  Removed &quot;/dev/sdb2&quot; from volume group &quot;slions_vg1&quot;</span><br><span class="line"><span class="meta">$</span><span class="bash"> vgdisplay slions_vg1</span></span><br><span class="line">  --- Volume group ---</span><br><span class="line">  VG Name               slions_vg1</span><br><span class="line">  System ID</span><br><span class="line">  Format                lvm2</span><br><span class="line">  Metadata Areas        1</span><br><span class="line">  Metadata Sequence No  2</span><br><span class="line">  VG Access             read/write</span><br><span class="line">  VG Status             resizable</span><br><span class="line">  MAX LV                0</span><br><span class="line">  Cur LV                0</span><br><span class="line">  Open LV               0</span><br><span class="line">  Max PV                0</span><br><span class="line">  Cur PV                1</span><br><span class="line">  Act PV                1</span><br><span class="line">  VG Size               4.99 GiB</span><br><span class="line">  PE Size               8.00 MiB</span><br><span class="line">  Total PE              639</span><br><span class="line">  Alloc PE / Size       0 / 0</span><br><span class="line">  Free  PE / Size       639 / 4.99 GiB</span><br><span class="line">  VG UUID               PVvkTd-yRWc-PgGt-kBjy-loN3-Unmm-z37JrX</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加pv"><a href="#添加pv" class="headerlink" title="添加pv"></a>添加pv</h3><p>再将刚才删掉的/dev/sdb2添加入slions_vg1中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vgextend slions_vg1 /dev/sdb2</span></span><br><span class="line">  Volume group &quot;slions_vg1&quot; successfully extended</span><br></pre></td></tr></table></figure><h3 id="设置vg的状态"><a href="#设置vg的状态" class="headerlink" title="设置vg的状态"></a>设置vg的状态</h3><p>vgchange用于设置卷组的活动状态，卷组的激活状态主要影响的是lv。使用-a选项来设置。</p><p>将slions_vg1设置为活动状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vgchange -a y slions_vg1</span></span><br><span class="line">  0 logical volume(s) in volume group &quot;slions_vg1&quot; now active</span><br></pre></td></tr></table></figure><p>将slions_vg1设置为非活动状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vgchange -a n  slions_vg1</span></span><br><span class="line">  0 logical volume(s) in volume group &quot;slions_vg1&quot; now active</span><br></pre></td></tr></table></figure><h2 id="管理LV"><a href="#管理LV" class="headerlink" title="管理LV"></a>管理LV</h2><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>创建lv</td><td>lvcreate</td></tr><tr><td>扫描并列出所有的lv</td><td>lvscan</td></tr><tr><td>列出lv属性信息</td><td>lvdisplay</td></tr><tr><td>移除lv</td><td>lvremove</td></tr><tr><td>缩小lv容量</td><td>lvreduce(lvresize)</td></tr><tr><td>增大lv容量</td><td>lvextend(lvresize)</td></tr><tr><td>改变lv容量</td><td>lvresize</td></tr></tbody></table><h3 id="创建lv"><a href="#创建lv" class="headerlink" title="创建lv"></a>创建lv</h3><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lvcreate &#123;-L size(M/G) | -l PEnum&#125; -n lv_name vg_name</span><br><span class="line">-L：根据大小来创建lv，即分配多大空间给此lv</span><br><span class="line">-l：根据PE的数量来创建lv，即分配多少个pe给此lv</span><br><span class="line">-n：指定lv的名称</span><br></pre></td></tr></table></figure><p>当前slions_vg1有894个PE，大小为6.98G。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vgdisplay slions_vg1 |grep PE</span></span><br><span class="line">  PE Size               8.00 MiB</span><br><span class="line">  Total PE              894</span><br><span class="line">  Alloc PE / Size       0 / 0</span><br><span class="line">  Free  PE / Size       894 / 6.98 GiB</span><br></pre></td></tr></table></figure><p>使用-L和-l分别创建名称为slions_lv1和slions_lv2的lv。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lvcreate -L 3G -n slions_lv1 slions_vg1</span></span><br><span class="line">  Logical volume &quot;slions_lv1&quot; created.</span><br><span class="line"><span class="meta">$</span><span class="bash"> lvcreate -l +100%FREE -n slions_lv2 slions_vg1   <span class="comment">#使用剩余所有的PE</span></span></span><br><span class="line">  Logical volume &quot;slions_lv2&quot; created.</span><br></pre></td></tr></table></figure><p>创建lv后，将在/dev/firstvg目录中创建对应lv名称的软链接文件，同时也在/dev/mapper目录下创建链接文件，它们都指向/dev/dm设备。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ll /dev/slions_vg1/</span></span><br><span class="line">总用量 0</span><br><span class="line">lrwxrwxrwx. 1 root root 7 8月   7 10:49 slions_lv1 -&gt; ../dm-2</span><br><span class="line">lrwxrwxrwx. 1 root root 7 8月   7 10:50 slions_lv2 -&gt; ../dm-3</span><br><span class="line"><span class="meta">$</span><span class="bash"> ll /dev/mapper/</span></span><br><span class="line">总用量 0</span><br><span class="line">lrwxrwxrwx. 1 root root       7 8月   6 21:58 centos-root -&gt; ../dm-0</span><br><span class="line">lrwxrwxrwx. 1 root root       7 8月   6 21:58 centos-swap -&gt; ../dm-1</span><br><span class="line">crw-------. 1 root root 10, 236 8月   6 21:58 control</span><br><span class="line">lrwxrwxrwx. 1 root root       7 8月   7 10:49 slions_vg1-slions_lv1 -&gt; ../dm-2</span><br><span class="line">lrwxrwxrwx. 1 root root       7 8月   7 10:50 slions_vg1-slions_lv2 -&gt; ../dm-3</span><br></pre></td></tr></table></figure><h3 id="查看lv属性"><a href="#查看lv属性" class="headerlink" title="查看lv属性"></a>查看lv属性</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lvscan</span></span><br><span class="line">  ACTIVE            &#x27;/dev/slions_vg1/slions_lv1&#x27; [3.00 GiB] inherit</span><br><span class="line">  ACTIVE            &#x27;/dev/slions_vg1/slions_lv2&#x27; [3.98 GiB] inherit</span><br><span class="line">  ACTIVE            &#x27;/dev/centos/root&#x27; [18.00 GiB] inherit</span><br><span class="line">  ACTIVE            &#x27;/dev/centos/swap&#x27; [1020.00 MiB] inherit</span><br><span class="line"><span class="meta">$</span><span class="bash"> lvdisplay /dev/slions_vg1/slions_lv1</span></span><br><span class="line">  --- Logical volume ---</span><br><span class="line">  LV Path                /dev/slions_vg1/slions_lv1</span><br><span class="line">  LV Name                slions_lv1</span><br><span class="line">  VG Name                slions_vg1</span><br><span class="line">  LV UUID                aUGzfw-sypb-96Ux-hRxn-JXeS-2UIL-812m4T</span><br><span class="line">  LV Write Access        read/write</span><br><span class="line">  LV Creation host, time slions_pc1, 2021-08-07 10:49:52 +0800</span><br><span class="line">  LV Status              available</span><br><span class="line"><span class="meta">  #</span><span class="bash"> open                 0</span></span><br><span class="line">  LV Size                3.00 GiB</span><br><span class="line">  Current LE             384</span><br><span class="line">  Segments               1</span><br><span class="line">  Allocation             inherit</span><br><span class="line">  Read ahead sectors     auto</span><br><span class="line">  - currently set to     256</span><br><span class="line">  Block device           253:2</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="格式化lv"><a href="#格式化lv" class="headerlink" title="格式化lv"></a>格式化lv</h3><p>我们通过格式化lv使其形成文件系统，就可以和普通磁盘一样挂载使用了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkfs.xfs /dev/slions_vg1/slions_lv1</span></span><br><span class="line">meta-data=/dev/slions_vg1/slions_lv1 isize=512    agcount=4, agsize=196608 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">         =                       crc=1        finobt=0, sparse=0</span><br><span class="line">data     =                       bsize=4096   blocks=786432, imaxpct=25</span><br><span class="line">         =                       sunit=0      swidth=0 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class="line">log      =internal log           bsize=4096   blocks=2560, version=2</span><br><span class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir /xfs_dir</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mount /dev/slions_vg1/slions_lv1 /xfs_dir/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> df -Th|grep xfs_dir</span></span><br><span class="line">/dev/mapper/slions_vg1-slions_lv1 xfs       3.0G   33M  3.0G    2% /xfs_dir</span><br><span class="line"><span class="meta">$</span><span class="bash"> lsblk</span></span><br><span class="line">NAME                      MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda                         8:0    0   20G  0 disk</span><br><span class="line">├─sda1                      8:1    0    1G  0 part /boot</span><br><span class="line">└─sda2                      8:2    0   19G  0 part</span><br><span class="line">  ├─centos-root           253:0    0   18G  0 lvm  /</span><br><span class="line">  └─centos-swap           253:1    0 1020M  0 lvm  [SWAP]</span><br><span class="line">sdb                         8:16   0   20G  0 disk</span><br><span class="line">├─sdb1                      8:17   0    5G  0 part</span><br><span class="line">│ ├─slions_vg1-slions_lv1 253:2    0    3G  0 lvm  /xfs_dir</span><br><span class="line">│ └─slions_vg1-slions_lv2 253:3    0    4G  0 lvm</span><br><span class="line">├─sdb2                      8:18   0    2G  0 part</span><br><span class="line">│ └─slions_vg1-slions_lv2 253:3    0    4G  0 lvm</span><br><span class="line">├─sdb3                      8:19   0   10G  0 part</span><br><span class="line">└─sdb4                      8:20   0    3G  0 part</span><br><span class="line">sr0                        11:0    1   10G  0 rom</span><br></pre></td></tr></table></figure><p>也可以使用file -s查看lv的文件系统，由于/dev/slions_vg1和/dev/mapper下的lv都是链接到/dev/下块设备的链接文件，所以只能对块设备进行查看，否则查看的结果也仅仅只是个链接文件类型。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> file -s /dev/dm-2</span></span><br><span class="line">/dev/dm-2: SGI XFS filesystem data (blksz 4096, inosz 512, v2 dirs)</span><br></pre></td></tr></table></figure><h2 id="LVM扩容"><a href="#LVM扩容" class="headerlink" title="LVM扩容"></a>LVM扩容</h2><p>在文章的开头已经说了，lvm最大的优势就是其可伸缩性，而其伸缩性又更偏重于扩容，这是使用lvm的最大原因。</p><blockquote><p>扩容的实质是将vg中空闲的pe添加到lv中，所以只要vg中有空闲的pe，就可以进行扩容，即使没有空闲的pe，也可以添加pv，将pv加入到vg中增加空闲pe。</p></blockquote><h3 id="扩容流程"><a href="#扩容流程" class="headerlink" title="扩容流程"></a>扩容流程</h3><ol><li>使用lvextend或者lvresize添加更多的pe或容量到lv中</li><li>使用resize2fs命令(xfs则使用xfs_growfs)将lv增加后的容量增加到对应的文件系统中</li></ol><h3 id="扩容示例"><a href="#扩容示例" class="headerlink" title="扩容示例"></a>扩容示例</h3><p>将/dev/sdb3创建为pv并加入slions_vg1，查看此时vg的pe状态，已经多了1279个PE，空余大小为9.99g。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pvcreate /dev/sdb3</span></span><br><span class="line">  Physical volume &quot;/dev/sdb3&quot; successfully created.</span><br><span class="line"><span class="meta">$</span><span class="bash"> vgextend slions_vg1 /dev/sdb3</span></span><br><span class="line">  Volume group &quot;slions_vg1&quot; successfully extended</span><br><span class="line"><span class="meta">$</span><span class="bash"> vgdisplay slions_vg1 |grep PE</span></span><br><span class="line">  PE Size               8.00 MiB</span><br><span class="line">  Total PE              2173</span><br><span class="line">  Alloc PE / Size       894 / 6.98 GiB</span><br><span class="line">  Free  PE / Size       1279 / 9.99 GiB</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将其全部添加到slions_lv1中，有两种方式添加：按容量大小添加和按PE数量添加。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> umount /dev/slions_vg1/slions_lv1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lvextend -L +5G /dev/slions_vg1/slions_lv1</span></span><br><span class="line">  Size of logical volume slions_vg1/slions_lv1 changed from 3.00 GiB (384 extents) to 8.00 GiB (1024 extents).</span><br><span class="line">  Logical volume slions_vg1/slions_lv1 successfully resized.</span><br><span class="line"><span class="meta">$</span><span class="bash"> vgdisplay slions_vg1 |grep PE</span></span><br><span class="line">  PE Size               8.00 MiB</span><br><span class="line">  Total PE              2173</span><br><span class="line">  Alloc PE / Size       1534 / 11.98 GiB</span><br><span class="line">  Free  PE / Size       639 / 4.99 GiB</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lvextend -l +639 /dev/slions_vg1/slions_lv1</span></span><br><span class="line">  Size of logical volume slions_vg1/slions_lv1 changed from 8.00 GiB (1024 extents) to 12.99 GiB (1663 extents).</span><br><span class="line">  Logical volume slions_vg1/slions_lv1 successfully resized.</span><br><span class="line"><span class="meta">$</span><span class="bash"> lvscan</span></span><br><span class="line">  ACTIVE            &#x27;/dev/slions_vg1/slions_lv1&#x27; [12.99 GiB] inherit</span><br><span class="line">  ACTIVE            &#x27;/dev/slions_vg1/slions_lv2&#x27; [3.98 GiB] inherit</span><br><span class="line">  ACTIVE            &#x27;/dev/centos/root&#x27; [18.00 GiB] inherit</span><br><span class="line">  ACTIVE            &#x27;/dev/centos/swap&#x27; [1020.00 MiB] inherit</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可以使用lvresize来增加lv的容量方法和lvextend一样。如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lvresize -L +5G /dev/slions_vg1/slions_lv1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lvresize -l +639 /dev/slions_vg1/slions_lv1</span></span><br></pre></td></tr></table></figure><p>将slions_lv1挂载，查看该lv对应文件系统的容量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> df -Th /xfs_dir/</span></span><br><span class="line">文件系统                          类型  容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/mapper/slions_vg1-slions_lv1 xfs   3.0G   33M  3.0G    2% /xfs_dir</span><br></pre></td></tr></table></figure><p>容量并没有增加，因为只是lv的容量增加了，而文件系统的容量却没有增加。</p><p>需要使用resize2fs工具来改变ext文件系统的大小，如果是xfs文件系统，则使用xfs_growfs。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> xfs_growfs /xfs_dir/</span></span><br><span class="line">meta-data=/dev/mapper/slions_vg1-slions_lv1 isize=512    agcount=4, agsize=196608 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">         =                       crc=1        finobt=0 spinodes=0</span><br><span class="line">data     =                       bsize=4096   blocks=786432, imaxpct=25</span><br><span class="line">         =                       sunit=0      swidth=0 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class="line">log      =internal               bsize=4096   blocks=2560, version=2</span><br><span class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class="line">data blocks changed from 786432 to 3405824</span><br><span class="line"><span class="meta">$</span><span class="bash"> df -Th /xfs_dir/</span></span><br><span class="line">文件系统                          类型  容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/mapper/slions_vg1-slions_lv1 xfs    13G   33M   13G    1% /xfs_dir</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1><p>其实LVM里还包括了缩容与快照的功能，使用场景不多，这里也不多阐述，且现在大多文件系统都为xfs，其也不支持收缩，想要了解的可自行百度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;总所周知不论是机械硬盘还是固态磁盘大小都是固定的，当磁盘空间满了后只能通过删除无用数据来保持磁盘的可用性，这篇介绍的LVM(Logical Volume Manager)是建立在磁盘和分区之上的一个逻辑层，用来提高磁盘分区管理的灵活性，可以随时随地的扩缩容分区大小。&lt;/p&gt;</summary>
      
    
    
    
    <category term="存储类" scheme="https://slions.github.io/categories/%E5%AD%98%E5%82%A8%E7%B1%BB/"/>
    
    
    <category term="linux" scheme="https://slions.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Virtualbox虚机使用介绍</title>
    <link href="https://slions.github.io/2021/08/05/Virtualbox%E8%99%9A%E6%9C%BA%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>https://slions.github.io/2021/08/05/Virtualbox%E8%99%9A%E6%9C%BA%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-08-05T11:24:23.000Z</published>
    <updated>2021-08-12T11:48:04.057Z</updated>
    
    <content type="html"><![CDATA[<p> VMware workstation是最常见也是最常用的虚拟机工具，但是很多公司不会购买其商用授权，VirtualBox 也是一款虚拟化产品，重要的是其<strong>开源免费</strong>，好早之前在本地安装使用了下，感觉与VMware workstation比还是不太习惯，包括虚拟机的安装和设置也要重新习惯，本文主要讲下安装好软件后如何完成基础设置与网络配置，安装部分比较简单请自行解决。</p><h1 id="新建虚机"><a href="#新建虚机" class="headerlink" title="新建虚机"></a>新建虚机</h1><ol><li>进入virtualbox界面点击新建则开始创建，设置你虚机的名字，存储位置，和基础的系统版本（之前VMware导入virtualbox会报错有冲突，如果想尝试导入的可自行百度）。</li></ol><p><img src="/doc_picture/virtualbox1.png" alt="image-20210805193414305"></p><ol start="2"><li> 下一步设置根分区的大小。</li></ol><p><img src="/doc_picture/virtualbox2.png" alt="image-20210805193500544"></p><ol start="3"><li>确定后设置你的虚机，先选择虚机的启动镜像。这里的iso就决定了你的系统版本与内核版本。</li></ol><p><img src="/doc_picture/virtualbox3.png" alt="image-20210805193540746"></p><ol start="4"><li>配置网卡模式，先那桥接模式测试，下面会说明这几个模式的区别。（之后的环境需配置成两块网卡，一个nat，一个仅主机）</li></ol><p><img src="/doc_picture/virtualbox4.png" alt="image-20210805193612460"></p><ol start="5"><li>确认无误后，启动虚机。</li></ol><p><img src="/doc_picture/virtualbox5.png" alt="image-20210805193650102"></p><ol start="6"><li>接下来的步骤就和VMware虚机安装一样了，建议选择基础设施服务器，要不默认是最小化安装，会少很多命令。（鼠标切换是方向键旁边的CTRL）</li></ol><p><img src="/doc_picture/virtualbox6.png" alt="image-20210805193717617"></p><h1 id="配置网卡"><a href="#配置网卡" class="headerlink" title="配置网卡"></a>配置网卡</h1><ol><li>进入虚机可以看到我们的网卡会通过dhcp自动获取到一个ip,为了防止重启后ip发生改变，需要我们手动配置一个同子网的ip。</li></ol><p><img src="/doc_picture/virtualbox7.png" alt="image-20210805193815935"></p><ol start="2"><li><p>vim /etc/sysconfig/network-scripts/ifcfg-enp0s3</p><p>关键的是BOOTPROTO要设置成static。</p></li></ol><p><img src="/doc_picture/virtualbox8.png" alt="image-20210805193903367"></p><ol start="3"><li>重启网卡</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart network</span></span><br></pre></td></tr></table></figure><ol start="4"><li>查看网卡信息已经变成我们设置的ip，ping 百度测试ok。</li></ol><p><img src="/doc_picture/virtualbox9.png" alt="image-20210805194051944"></p><p>​    主机通过ssh连接本地虚机。ok</p><p><img src="/doc_picture/virtualbox10.png" alt="image-20210805194139658"></p><h1 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h1><p>处在关机状态的虚机才能克隆，点击想要克隆的虚机右键选择复制，重要的是下面的重新初始化所有网卡的MAC地址，这样就可以重新分配地址，防止两个虚拟机同时开启时发生冲突。</p><p><img src="/doc_picture/virtualbox11.png" alt="image-20210805194313661"></p><p>为了保持两个虚拟机的独立性，建议采用完全拷贝的模式。</p><p><img src="/doc_picture/virtualbox12.png" alt="image-20210805194359103"></p><p>等待克隆完成就行了，之后修改主机名，修改网卡地址，和vmware操作一样。</p><h1 id="网卡模式说明"><a href="#网卡模式说明" class="headerlink" title="网卡模式说明"></a>网卡模式说明</h1><p>我们可以在安装虚机时会让我们设置网卡的方式，这些也可以通过安装好虚机后修改。</p><p>下面解释下常用的网卡模式意义。</p><p><img src="/doc_picture/virtualbox13.png" alt="image-20210805194504261"></p><h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><p>Guest访问网络的所有数据都是由主机做了一层路由转换，Guest并不真实存在于网络中，主机与网络中的任何机器都不能查看和访问到Guest的存在。</p><ul><li>Guest可以访问主机能访问到的所有网络，但是对于主机以及主机网络上的其他机器，Guest又是不可见的，甚至主机也访问不到Guest。</li><li>虚拟机与主机的关系：只能单向访问，虚拟机可以通过网络访问到主机，主机无法通过网络访问到虚拟机。</li><li>虚拟机与网络中其他主机的关系：只能单向访问，虚拟机可以访问到网络中其他主机，其他主机不能通过网络访问到虚拟机。</li><li>虚拟机与虚拟机的关系：相互不能访问，虚拟机与虚拟机各自完全独立，相互间无法通过网络访问彼此。</li></ul><h2 id="Bridged-Adapter"><a href="#Bridged-Adapter" class="headerlink" title="Bridged Adapter"></a>Bridged Adapter</h2><p>它与主机网卡在用一个子网中，访问外网会直接走本地的网卡出去。这时虚拟机能被分配到一个网络中独立的IP，所有网络功能完全和在网络中的真实机器一样。</p><ul><li>虚拟机与主机的关系：可以相互访问，因为虚拟机在真实网络段中有独立IP，主机与虚拟机处于同一网络段中，彼此可以通过各自IP相互访问。</li><li>虚拟机于网络中其他主机的关系：可以相互访问，同样因为虚拟机在真实网络段中有独立IP，虚拟机与所有网络其他主机处于同一网络段中，彼此可以通过各自IP相互访问。</li><li>虚拟机与虚拟机的关系：可以相互访问，原因同上。</li></ul><h2 id="Internal（内部网络）"><a href="#Internal（内部网络）" class="headerlink" title="Internal（内部网络）"></a>Internal（内部网络）</h2><p>内网模式，顾名思义就是内部网络模式：</p><ul><li>虚拟机与外网完全断开，只实现虚拟机于虚拟机之间的内部网络模式。</li><li>虚拟机与主机的关系：不能相互访问，彼此不属于同一个网络，无法相互访问。</li><li>虚拟机与网络中其他主机的关系：不能相互访问，理由同上。</li><li>虚拟机与虚拟机的关系：可以相互访问，前提是在设置网络时，两台虚拟机设置同一网络名称。</li></ul><h2 id="Host-only-Adapter"><a href="#Host-only-Adapter" class="headerlink" title="Host-only Adapter"></a>Host-only Adapter</h2><p>仅主机模式，从名字可以看出只有当前主机可以连接，网上看到可以通过网卡共享和网卡桥接来实现访问外网，那不如直接配成桥接模式。</p><ul><li>虚拟机不可以上网</li><li>虚拟机与虚拟机的关系：可以相互访问</li><li>虚拟机与主机的关系：可以相互访问（注意虚拟机与主机通信是通过主机的名为VirtualBox Host-Only Network的网卡，因此ip是该网卡ip 192.168.56.1，而不是你现在正在上网所用的ip，可以自己配置网段）</li></ul><blockquote><p>可以看出桥接与nat都可以使虚机联网，这里建议使用<strong>双网卡</strong>（nat+仅主机模式）方式，因为桥接网卡设置为使用wifi网卡的话，则断网与更换wifi都会导致虚机不可用，所以推荐使用nat连接外网，使用仅主机来连接本地ssh终端。</p></blockquote><blockquote><p>nat默认使用10.0.2.0/24网段</p><p>仅主机默认使用192.168.56.0/24网段</p></blockquote><h1 id="修改网卡名（可选项）"><a href="#修改网卡名（可选项）" class="headerlink" title="修改网卡名（可选项）"></a>修改网卡名（可选项）</h1><p>可以看到系统默认为我们添加的网卡名是enp0s3和enp0s8，不好记也容易弄混，下面我会演示如何设置成标准的网卡名。</p><ol><li><p>修改系统启动程序文件，/etc/sysconfig/grub</p><p>在GRUB_CMDLINE_LINUX后添加<code>net.ifnames=0 biosdevname=0 </code>保存退出。</p></li></ol><p><img src="/doc_picture/virtualbox14.png" alt="image-20210805195105039"></p><p>   2.更新grub信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grub2-mkconfig -o /boot/grub2/grub.cfg</span></span><br></pre></td></tr></table></figure><p><img src="/doc_picture/virtualbox15.png" alt="image-20210805195158475"></p><ol start="3"><li>重启系统</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> reboot</span></span><br></pre></td></tr></table></figure><ol start="4"><li>查看网卡已经变成了eth0与eth1(ip要重新设置下)。</li></ol><p><img src="/doc_picture/virtualbox16.png" alt="image-20210805195316288"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; VMware workstation是最常见也是最常用的虚拟机工具，但是很多公司不会购买其商用授权，VirtualBox 也是一款虚拟化产品，重要的是其&lt;strong&gt;开源免费&lt;/strong&gt;，好早之前在本地安装使用了下，感觉与VMware workstation比还是</summary>
      
    
    
    
    <category term="虚拟机" scheme="https://slions.github.io/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
    <category term="虚拟机相关" scheme="https://slions.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>df与du结果不一致问题</title>
    <link href="https://slions.github.io/2021/08/03/df%E4%B8%8Edu%E7%BB%93%E6%9E%9C%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/"/>
    <id>https://slions.github.io/2021/08/03/df%E4%B8%8Edu%E7%BB%93%E6%9E%9C%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/</id>
    <published>2021-08-03T10:37:53.000Z</published>
    <updated>2021-08-12T11:48:22.751Z</updated>
    
    <content type="html"><![CDATA[<p><code>df</code>与<code>du</code>命令都是运维人员常用的检测存储空间大小的命令，平时我们并不太关注这两个命令的差别，但是经常会遇到这样一种场景，使用df查看到空间使用率已经非常高了，但使用du命令排查时发现不存在占用空间大的文件， 两者间的结果不一致。</p><h1 id="du与df"><a href="#du与df" class="headerlink" title="du与df"></a>du与df</h1><p><strong>du</strong>，disk usage,是通过搜索文件来计算每个文件的大小然后累加，du能看到的文件只是一些当前存在的，没有被删除的。他计算的大小就是当前他认为存在的所有文件大小的累加和。</p><p><strong>df</strong>，disk free，通过文件系统来快速获取空间大小的信息，当我们删除一个文件的时候，这个文件不是马上就在文件系统当中消失了，而是暂时消失了，当所有程序都不用时，才会根据OS的规则释放掉已经删除的文件， df记录的是通过文件系统获取到的文件的大小，他比du强的地方就是能够看到已经删除的文件，而且计算大小的时候，把这一部分的空间也加上了，更精确了。</p><p>因此,如果用户删除了一个正在运行的应用所打开的某个目录下的文件，则du命令返回的值显示出减去了该文件后的目录的大小。但df命令并不显示减去该文件后的大小。直到该运行的应用关闭了这个打开的文件，df返回的值才显示出减去了该文件后的文件系统的使用情况。</p><p>通过lsof工具我们可以直观的排查到具体的问题进程，以便解决：</p><h1 id="模拟案例"><a href="#模拟案例" class="headerlink" title="模拟案例"></a>模拟案例</h1><p>分别创建一个500M和1000M大小的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dd <span class="keyword">if</span>=/dev/zero of=500mFile bs=1M count=500</span></span><br><span class="line">记录了500+0 的读入</span><br><span class="line">记录了500+0 的写出</span><br><span class="line">524288000字节(524 MB)已复制，1.34728 秒，389 MB/秒</span><br><span class="line"><span class="meta">$</span><span class="bash"> dd <span class="keyword">if</span>=/dev/zero of=1000mFile bs=1M count=1000</span></span><br><span class="line">记录了1000+0 的读入</span><br><span class="line">记录了1000+0 的写出</span><br><span class="line">1048576000字节(1.0 GB)已复制，13.3469 秒，78.6 MB/秒</span><br><span class="line"><span class="meta">$</span><span class="bash"> du -ha *</span></span><br><span class="line">1000M   1000mFile</span><br><span class="line">500M    500mFile</span><br><span class="line"><span class="meta">$</span><span class="bash"> df -h `<span class="built_in">pwd</span>`</span></span><br><span class="line">文件系统                 容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/mapper/centos-root   18G  4.0G   15G   22% /</span><br></pre></td></tr></table></figure><p>然后开两个终端分别使用tail命令查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 终端1执行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tail -f 500mFile</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 终端2执行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tail -f 1000mFile</span></span><br></pre></td></tr></table></figure><p>再开启一个终端使用lsof命令查看这两个文件的状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lsof |grep File</span></span><br><span class="line">tail      10105                root    3r      REG              253,0  524288000   51733031 /home/slions/500mFile</span><br><span class="line">tail      10106                root    3r      REG              253,0 1048576000   51738061 /home/slions/1000mFile</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个时候我们使用rm命令来删除了这两个文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm -rf 1000mFile 500mFile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> du -ha .</span></span><br><span class="line">0       .</span><br><span class="line"><span class="meta">$</span><span class="bash"> df -h `<span class="built_in">pwd</span>`</span></span><br><span class="line">文件系统                 容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/mapper/centos-root   18G  4.0G   15G   22% /</span><br></pre></td></tr></table></figure><p>可以看到du已经显示为0，df无任何变化。通过lsof再看下进程状态。(sort -nrk 7是进行大小排序)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lsof |grep File |sort -nrk 7</span></span><br><span class="line">tail      10106                root    3r      REG              253,0 1048576000   51738061 /home/slions/1000mFile (deleted)</span><br><span class="line">tail      10105                root    3r      REG              253,0  524288000   51733031 /home/slions/500mFile (deleted)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个deleted表示该已经删除了的文件，但是文件句柄未释放。</p><p>想要释放此句柄直接kill掉对应进程就好了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">kill</span> -9 10106</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">kill</span> -9 10105</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> df -h `<span class="built_in">pwd</span>`</span></span><br><span class="line">文件系统                 容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/mapper/centos-root   18G  2.5G   16G   14% /</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到，df的已用容量对应减少了1.5G。</p><p>在日常的运维工作中，我们可以直接通过以下命令来快速定位未释放文件句柄的进程，从而进行解决。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lsof |grep deleted</span></span><br></pre></td></tr></table></figure><h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><p>在日常运维过程中，如果我们需要删除比较大的文件 可以使用 <code>&gt; filename </code>，这种可以直接释放磁盘空间，使用 rm 如果有进程在访问文件，则有可能出现磁盘空间不释放的情况。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;df&lt;/code&gt;与&lt;code&gt;du&lt;/code&gt;命令都是运维人员常用的检测存储空间大小的命令，平时我们并不太关注这两个命令的差别，但是经常会遇到这样一种场景，使用df查看到空间使用率已经非常高了，但使用du命令排查时发现不存在占用空间大的文件， 两者间的结果不</summary>
      
    
    
    
    <category term="linux系统" scheme="https://slions.github.io/categories/linux%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="linux" scheme="https://slions.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>磁盘分区工具</title>
    <link href="https://slions.github.io/2021/08/02/%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E5%B7%A5%E5%85%B7/"/>
    <id>https://slions.github.io/2021/08/02/%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E5%B7%A5%E5%85%B7/</id>
    <published>2021-08-02T12:40:24.000Z</published>
    <updated>2021-08-12T11:48:46.808Z</updated>
    
    <content type="html"><![CDATA[<p>在我们日常的运维工作中，磁盘分区是必备的一项技能，掌握了就可以更好的规划存储空间，提高资源的利用率。</p><p>常见的磁盘分区工具有<code>fdisk</code>、<code>parted</code>、<code>gdisk</code></p><p>使用方式有些许的差异，除了都支持交互型操作外，parted天生支持非交互的能力，而fdisk与gdisk需要我们来换种思路实现非交互式。</p><blockquote><p>关于这些工具交互式的操作命令比较简单，可以直接通过man手册来巩固，以下主要介绍下如何实现非交互式，后续使磁盘分区操作脚本化。</p></blockquote><h1 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h1><p>一般情况下，我们都是选择使用fdisk工具来进行分区，而常用的fdisk这个工具对分区是有大小限制的，它只能划分<strong>小于2T</strong>的磁盘，所以在划大于2T磁盘分区的时候fdisk就无法满足要求了。</p><p>fdisk工具用来分MBR磁盘上的区。要分GPT磁盘上的区，可以使用gdisk。parted工具对这两种格式的磁盘分区都支持。</p><p>fdisk操作全部是在内存中执行的，必须保存生效。保存后，内核还未识别该分区，可以查看/proc/partition目录下存在的文件，这些文件是能被内核识别的分区。运行partprobe或partx命令重新读取分区表让内核识别新的分区，内核识别后才可以格式化。而且分区结束时按w保存分区表有时候会失败，提示重启，这时候运行partprobe命令可以代替重启就生效。</p><h1 id="gdisk"><a href="#gdisk" class="headerlink" title="gdisk"></a>gdisk</h1><p>gdisk用来划分gpt分区，需要单独安装这个工具包。</p><h1 id="Parted"><a href="#Parted" class="headerlink" title="Parted"></a>Parted</h1><p>parted支持mbr格式和gpt格式的磁盘分区。它的强大在于可以一步到位而不需要不断的交互式输入(也可以交互式)。</p><p>parted分区工具是实时的，所以每一步操作都是直接写入磁盘而不是写进内存，它不像fdisk/gdisk还需要w命令将内存中的结果保存到磁盘中。</p><h1 id="fdisk实现非交互"><a href="#fdisk实现非交互" class="headerlink" title="fdisk实现非交互"></a>fdisk实现非交互</h1><p>fdisk实现非交互的原理是从标准输入中读取，每读取一行传递一次操作。</p><p>所以可以有两种方式：</p><ul><li>使用echo和管道传递</li><li>将操作写入到文件中，从文件中读取。</li></ul><p>例如：下面的命令创建了两个分区。使用默认值时传递空行即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> -e <span class="string">&quot;n\np\n1\n\n+5G\nn\np\n2\n\n+1G\nw\n&quot;</span>  | fdisk /dev/sdb</span></span><br></pre></td></tr></table></figure><p>如果要传递的操作很多，则可以将它们写入到一个文件中，从文件中读取。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> -e <span class="string">&quot;n\np\n1\n\n+5G\nn\np\n2\n\n+1G\nw\n&quot;</span> &gt;/tmp/a.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> fdisk /dev/sdb &lt;/tmp/a.txt</span></span><br></pre></td></tr></table></figure><h1 id="gdisk实现非交互"><a href="#gdisk实现非交互" class="headerlink" title="gdisk实现非交互"></a>gdisk实现非交互</h1><p>原理同fdisk。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> -e <span class="string">&quot;n\n1\n\n+3G\n\nw\nY\n&quot;</span> | gdisk /dev/sdb</span></span><br></pre></td></tr></table></figure><p>上面传递的各参数意义为：</p><p>新建分区，分区number为1，使用默认开始扇区位置，分区大小+3G，使用默认分区类型，保存，确认。</p><h1 id="parted实现非交互"><a href="#parted实现非交互" class="headerlink" title="parted实现非交互"></a>parted实现非交互</h1><p>parted命令只能一次非交互一个命令中的所有动作。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">parted /dev/sdb mklabel msdos                 # 设置硬盘flag(msdos/gpt)</span><br><span class="line">parted /dev/sdb mkpart primary ext4 1 1000   # Mbr格式分区，分别是partition type/fstype/start/end</span><br><span class="line">parted /dev/sdb mkpart 1 ext4 1M 10240M      # gpt格式分区，分别是name/fstype/start/end</span><br><span class="line">parted /dev/sdb mkpart 1 10G 15G             # 省略fstype的交互式分区</span><br><span class="line">parted /dev/sdb rm 1                         # 删除分区</span><br><span class="line">parted /dev/sdb p                            # 输出信息</span><br></pre></td></tr></table></figure><p>如果不确定分区的起点大小，可以加上-s选项使用script模式，该模式下parted将回答一切默认值，如yes、no。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在我们日常的运维工作中，磁盘分区是必备的一项技能，掌握了就可以更好的规划存储空间，提高资源的利用率。&lt;/p&gt;
&lt;p&gt;常见的磁盘分区工具有&lt;code&gt;fdisk&lt;/code&gt;、&lt;code&gt;parted&lt;/code&gt;、&lt;code&gt;gdisk&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用方式</summary>
      
    
    
    
    <category term="linux系统" scheme="https://slions.github.io/categories/linux%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="linux" scheme="https://slions.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ceph mimic对接k8s 1.17.0(ceph-csi)</title>
    <link href="https://slions.github.io/2021/08/02/ceph%20mimic%E5%AF%B9%E6%8E%A5k8s%201.17.0/"/>
    <id>https://slions.github.io/2021/08/02/ceph%20mimic%E5%AF%B9%E6%8E%A5k8s%201.17.0/</id>
    <published>2021-08-02T03:57:37.000Z</published>
    <updated>2021-08-12T11:49:30.731Z</updated>
    
    <content type="html"><![CDATA[<p>最近测试ceph rbd在kubernetes的自动扩容问题，之前K8s v1.11.0时的策略是先找到目标卷，使用rbd resize命令对此卷扩容，找到挂载此卷的客户端宿主机，执行xfs_growfs等刷新文件系统的命令。查看网上资料k8s 在1.15版本后，ExpandInUsePersistentVolume功能被开启。意思大概就是不需要挂载到容器即可扩容PVC。按网上的手册设置相关参数并没啥用，发现github有人提到ceph-csi可以实现自动扩容pvc的功能。</p><p><img src="/doc_picture/ceph-1.png" alt="image-20210802120109616"></p><p>这里简单说下csi是啥，全称是Container Storage Interface，旨在能为容器编排引擎和存储系统间建立一套标准的存储调用接口，通过该接口能为容器编排引擎提供存储服务。</p><p>csi之前，k8s提供的存储服务通过一种“in-tree”的方式提供的，这种方式需要将存储提供者的代码逻辑放到K8S的代码库中运行，调用引擎与插件间属于强耦合。</p><h1 id="环境描述"><a href="#环境描述" class="headerlink" title="环境描述"></a>环境描述</h1><p>k8s版本：kubernetes  v1.17.0</p><p>ceph版本：ceph mimic</p><table><thead><tr><th><strong>主机名</strong></th><th>ip地址</th><th><strong>系统版本</strong>\内核版本</th><th><strong>角色</strong></th></tr></thead><tbody><tr><td>ceph1</td><td>192.168.186.10</td><td>centos 7.6\3.10.0-957.el7.x86_64</td><td>K8s_master,ceph mon,osd,mds</td></tr><tr><td>ceph2</td><td>192.168.186.11</td><td>centos 7.6\3.10.0-957.el7.x86_64</td><td>K8s_node,ceph mon,osd,mds</td></tr><tr><td>ceph3</td><td>192.168.186.12</td><td>centos 7.6\3.10.0-957.el7.x86_64</td><td>K8s_node,ceph mon,osd,mds</td></tr></tbody></table><h1 id="整体架构图"><a href="#整体架构图" class="headerlink" title="整体架构图"></a>整体架构图</h1><blockquote><p>根据ceph官方描述：<br>ceph-csi默认情况下使用RBD内核模块，这些模块可能不支持所有Ceph CRUSH可调参数或RBD图像功能。</p></blockquote><p><img src="/doc_picture/ceph-2.png" alt="image-20210802121043578"></p><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><p>我本地已经提前安装好了kubernetes与ceph,以下仅叙述如何对接。</p><h2 id="1-创建存储池"><a href="#1-创建存储池" class="headerlink" title="1.    创建存储池"></a>1.    创建存储池</h2><p>ceph在L版本之后就不会创建默认的rbd池了，我们需要建立一个单独的存储池给kubernetes使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ceph osd pool create kubernetes 64 64</span></span><br></pre></td></tr></table></figure><p>初始化新创建的池。</p><blockquote><p>这里的初始化池操作在jewel版本是不需要的，jewel之后的版本在创建了池后还需要开启对应的应用授权（rbd,cephfs,rgw）,命令为</p><p><code>ceph osd pool application enable &lt;pool-name&gt; &lt;app-name&gt;</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rbd pool init kubernetes</span></span><br></pre></td></tr></table></figure><p>这里查看创建的kubernetes池自动加入了rbd池。</p><p><img src="/doc_picture/ceph-3.png" alt="image-20210802121704441"></p><h2 id="2-配置ceph-csi"><a href="#2-配置ceph-csi" class="headerlink" title="2.    配置ceph-csi"></a>2.    配置ceph-csi</h2><p>设置ceph客户端身份验证。</p><blockquote><p>官方提供的命令是：</p><p><code>ceph auth get-or-create client.kubernetes mon &#39;profile rbd&#39; osd &#39;profile rbd pool=kubernetes&#39; mgr &#39;profile rbd pool=kubernetes&#39;</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ceph auth get-or-create client.kubernetes mon <span class="string">&#x27;allow r&#x27;</span> osd <span class="string">&#x27;allow rwx pool=kubernetes&#x27;</span> -o ceph.client.kubernetes.keyring</span></span><br></pre></td></tr></table></figure><p>生成文件中的key使用user的key，后面配置中是需要用到的</p><p><img src="/doc_picture/ceph-4.png" alt="image-20210802121940950"></p><h2 id="3-生成ceph-csi的configmap"><a href="#3-生成ceph-csi的configmap" class="headerlink" title="3.    生成ceph-csi的configmap"></a>3.    生成ceph-csi的configmap</h2><p><img src="/doc_picture/ceph-5.png" alt="image-20210802122044038"></p><p>这里一共有两个需要使用的信息，第一个是fsid(集群id)，第二个是监控节点信息。</p><blockquote><p>看到有人查询到的监控节点信息有2个版本（v1和v2），目前的ceph-csi只支持V1版本的协议，所以监控节点那里我们只能用v1的那个IP和端口号，我这里不需要改动</p></blockquote><p>编写对应的configmap。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">config.json:</span> <span class="string">|-</span></span><br><span class="line"><span class="string">    [</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        &quot;clusterID&quot;: &quot;10594fb3-68f3-4c97-8e0b-df80ba2a6745&quot;,</span></span><br><span class="line"><span class="string">        &quot;monitors&quot;: [</span></span><br><span class="line"><span class="string">          &quot;192.168.186.10:6789&quot;,</span></span><br><span class="line"><span class="string">          &quot;192.168.186.11:6789&quot;,</span></span><br><span class="line"><span class="string">          &quot;192.168.186.12:6789&quot;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string"></span><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ceph-csi-config</span></span><br></pre></td></tr></table></figure><p>部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f csi-config-map.yaml</span></span><br></pre></td></tr></table></figure><h2 id="4-生成ceph-csi认证的secret"><a href="#4-生成ceph-csi认证的secret" class="headerlink" title="4.    生成ceph-csi认证的secret"></a>4.    生成ceph-csi认证的secret</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">csi-rbd-secret</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">stringData:</span></span><br><span class="line">  <span class="attr">userID:</span> <span class="string">kubernetes</span></span><br><span class="line">  <span class="attr">userKey:</span> <span class="string">AQBEpRdf2MXxFxAA8JGQQhTX1XIHPSSbw72Gqw==</span></span><br></pre></td></tr></table></figure><p>这里就用到了之前生成的用户的用户id(kubernetes)和key</p><p>部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f csi-rbd-secret.yaml</span></span><br></pre></td></tr></table></figure><h2 id="5-配置ceph-csi插件"><a href="#5-配置ceph-csi插件" class="headerlink" title="5.    配置ceph-csi插件"></a>5.    配置ceph-csi插件</h2><p>这里的插件就是配置kubernetes上的rbac和提供存储功能的容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f csi-provisioner-rbac.yaml</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">cat</span> <span class="string">csi-provisioner-rbac.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rbd-csi-provisioner</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rbd-external-provisioner-runner</span></span><br><span class="line"><span class="attr">aggregationRule:</span></span><br><span class="line">  <span class="attr">clusterRoleSelectors:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">matchLabels:</span></span><br><span class="line">        <span class="attr">rbac.rbd.csi.ceph.com/aggregate-to-rbd-external-provisioner-runner:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="attr">rules:</span> []</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rbd-external-provisioner-runner-rules</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">rbac.rbd.csi.ceph.com/aggregate-to-rbd-external-provisioner-runner:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;nodes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;secrets&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;events&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;delete&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumeclaims&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumeclaims/status&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;storage.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;storageclasses&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;snapshot.storage.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;volumesnapshots&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;snapshot.storage.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;volumesnapshotcontents&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;create&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;snapshot.storage.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;volumesnapshotclasses&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;storage.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;volumeattachments&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;storage.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;csinodes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;snapshot.storage.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;volumesnapshotcontents/status&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;update&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rbd-csi-provisioner-role</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rbd-csi-provisioner</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rbd-external-provisioner-runner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="comment"># replace with non-default namespace name</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rbd-external-provisioner-cfg</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;configmaps&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;coordination.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;leases&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;delete&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;create&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rbd-csi-provisioner-role-cfg</span></span><br><span class="line">  <span class="comment"># replace with non-default namespace name</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rbd-csi-provisioner</span></span><br><span class="line">    <span class="comment"># replace with non-default namespace name</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rbd-external-provisioner-cfg</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f csi-nodeplugin-rbac.yaml</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">cat</span> <span class="string">csi-nodeplugin-rbac.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rbd-csi-nodeplugin</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rbd-csi-nodeplugin</span></span><br><span class="line"><span class="attr">aggregationRule:</span></span><br><span class="line">  <span class="attr">clusterRoleSelectors:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">matchLabels:</span></span><br><span class="line">        <span class="attr">rbac.rbd.csi.ceph.com/aggregate-to-rbd-csi-nodeplugin:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="attr">rules:</span> []</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rbd-csi-nodeplugin-rules</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">rbac.rbd.csi.ceph.com/aggregate-to-rbd-csi-nodeplugin:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;nodes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rbd-csi-nodeplugin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rbd-csi-nodeplugin</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rbd-csi-nodeplugin</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f csi-rbdplugin-provisioner.yaml</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">cat</span> <span class="string">csi-rbdplugin-provisioner.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">csi-rbdplugin-provisioner</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">csi-metrics</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">csi-rbdplugin-provisioner</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http-metrics</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8680</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">csi-rbdplugin-provisioner</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">csi-rbdplugin-provisioner</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">csi-rbdplugin-provisioner</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccount:</span> <span class="string">rbd-csi-provisioner</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">csi-provisioner</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">quay.io/k8scsi/csi-provisioner:v1.6.0</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--csi-address=$(ADDRESS)&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--v=5&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--timeout=150s&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--retry-interval-start=500ms&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--enable-leader-election=true&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--leader-election-type=leases&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--feature-gates=Topology=true&quot;</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ADDRESS</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">unix:///csi/csi-provisioner.sock</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">&quot;IfNotPresent&quot;</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">socket-dir</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/csi</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">csi-snapshotter</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">quay.io/k8scsi/csi-snapshotter:v2.1.0</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--csi-address=$(ADDRESS)&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--v=5&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--timeout=150s&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--leader-election=true&quot;</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ADDRESS</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">unix:///csi/csi-provisioner.sock</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">&quot;IfNotPresent&quot;</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">socket-dir</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/csi</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">csi-attacher</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">quay.io/k8scsi/csi-attacher:v2.1.1</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--v=5&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--csi-address=$(ADDRESS)&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--leader-election=true&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--retry-interval-start=500ms&quot;</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ADDRESS</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">/csi/csi-provisioner.sock</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">&quot;IfNotPresent&quot;</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">socket-dir</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/csi</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">csi-resizer</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">quay.io/k8scsi/csi-resizer:v0.5.0</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--csi-address=$(ADDRESS)&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--v=5&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--csiTimeout=150s&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--leader-election&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--retry-interval-start=500ms&quot;</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ADDRESS</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">unix:///csi/csi-provisioner.sock</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">&quot;IfNotPresent&quot;</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">socket-dir</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/csi</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">csi-rbdplugin</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">capabilities:</span></span><br><span class="line">              <span class="attr">add:</span> [<span class="string">&quot;SYS_ADMIN&quot;</span>]</span><br><span class="line">          <span class="comment"># for stable functionality replace canary with latest release version</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">quay.io/cephcsi/cephcsi:canary</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--nodeid=$(NODE_ID)&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--type=rbd&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--controllerserver=true&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--endpoint=$(CSI_ENDPOINT)&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--v=5&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--drivername=rbd.csi.ceph.com&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--pidlimit=-1&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--rbdhardmaxclonedepth=8&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--rbdsoftmaxclonedepth=4&quot;</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NODE_ID</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">spec.nodeName</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CSI_ENDPOINT</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">unix:///csi/csi-provisioner.sock</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">&quot;IfNotPresent&quot;</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">socket-dir</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/csi</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/dev</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">host-dev</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/sys</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">host-sys</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/lib/modules</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">lib-modules</span></span><br><span class="line">              <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ceph-csi-config</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/etc/ceph-csi-config/</span></span><br><span class="line">           <span class="comment"># - name: ceph-csi-encryption-kms-config</span></span><br><span class="line">           <span class="comment">#   mountPath: /etc/ceph-csi-encryption-kms-config/</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">keys-tmp-dir</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/tmp/csi/keys</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness-prometheus</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">quay.io/cephcsi/cephcsi:canary</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--type=liveness&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--endpoint=$(CSI_ENDPOINT)&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--metricsport=8680&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--metricspath=/metrics&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--polltime=60s&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--timeout=3s&quot;</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CSI_ENDPOINT</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">unix:///csi/csi-provisioner.sock</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">socket-dir</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/csi</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">&quot;IfNotPresent&quot;</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">host-dev</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/dev</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">host-sys</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/sys</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lib-modules</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/lib/modules</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">socket-dir</span></span><br><span class="line">          <span class="attr">emptyDir:</span> &#123;</span><br><span class="line">            <span class="attr">medium:</span> <span class="string">&quot;Memory&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ceph-csi-config</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">ceph-csi-config</span></span><br><span class="line">        <span class="comment">#- name: ceph-csi-encryption-kms-config</span></span><br><span class="line">        <span class="comment">#  configMap:</span></span><br><span class="line">        <span class="comment">#    name: ceph-csi-encryption-kms-config</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">keys-tmp-dir</span></span><br><span class="line">          <span class="attr">emptyDir:</span> &#123;</span><br><span class="line">            <span class="attr">medium:</span> <span class="string">&quot;Memory&quot;</span></span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><p>上面yaml文件中注释的部分是之前测试报错没有找到cm，官方文档没有创建此文件，这里注释掉无影响。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl  apply  -f  csi-rbdplugin.yaml</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">cat</span> <span class="string">csi-rbdplugin.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">csi-rbdplugin</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">csi-rbdplugin</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">csi-rbdplugin</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccount:</span> <span class="string">rbd-csi-nodeplugin</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">hostPID:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># to use e.g. Rook orchestrated cluster, and mons&#x27; FQDN is</span></span><br><span class="line">      <span class="comment"># resolved through k8s service, set dns policy to cluster first</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirstWithHostNet</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">driver-registrar</span></span><br><span class="line">          <span class="comment"># This is necessary only for systems with SELinux, where</span></span><br><span class="line">          <span class="comment"># non-privileged sidecar containers cannot access unix domain socket</span></span><br><span class="line">          <span class="comment"># created by privileged CSI driver container.</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">quay.io/k8scsi/csi-node-driver-registrar:v1.3.0</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--v=5&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--csi-address=/csi/csi.sock&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--kubelet-registration-path=/data/kubelet/plugins/rbd.csi.ceph.com/csi.sock&quot;</span></span><br><span class="line">          <span class="attr">lifecycle:</span></span><br><span class="line">            <span class="attr">preStop:</span></span><br><span class="line">              <span class="attr">exec:</span></span><br><span class="line">                <span class="attr">command:</span> [</span><br><span class="line">                  <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;rm -rf /registration/rbd.csi.ceph.com \</span></span><br><span class="line"><span class="string">                  /registration/rbd.csi.ceph.com-reg.sock&quot;</span></span><br><span class="line">                ]</span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">KUBE_NODE_NAME</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">spec.nodeName</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">socket-dir</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/csi</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">registration-dir</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/registration</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">csi-rbdplugin</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">capabilities:</span></span><br><span class="line">              <span class="attr">add:</span> [<span class="string">&quot;SYS_ADMIN&quot;</span>]</span><br><span class="line">            <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># for stable functionality replace canary with latest release version</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">quay.io/cephcsi/cephcsi:canary</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--nodeid=$(NODE_ID)&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--type=rbd&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--nodeserver=true&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--endpoint=$(CSI_ENDPOINT)&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--v=5&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--drivername=rbd.csi.ceph.com&quot;</span></span><br><span class="line">            <span class="comment"># If topology based provisioning is desired, configure required</span></span><br><span class="line">            <span class="comment"># node labels representing the nodes topology domain</span></span><br><span class="line">            <span class="comment"># and pass the label names below, for CSI to consume and advertize</span></span><br><span class="line">            <span class="comment"># its equivalent topology domain</span></span><br><span class="line">            <span class="comment"># - &quot;--domainlabels=failure-domain/region,failure-domain/zone&quot;</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NODE_ID</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">spec.nodeName</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CSI_ENDPOINT</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">unix:///csi/csi.sock</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">&quot;IfNotPresent&quot;</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">socket-dir</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/csi</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/dev</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">host-dev</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/sys</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">host-sys</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/run/mount</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">host-mount</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/lib/modules</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">lib-modules</span></span><br><span class="line">              <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ceph-csi-config</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/etc/ceph-csi-config/</span></span><br><span class="line">           <span class="comment"># - name: ceph-csi-encryption-kms-config</span></span><br><span class="line">           <span class="comment">#   mountPath: /etc/ceph-csi-encryption-kms-config/</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">plugin-dir</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/data/kubelet/plugins</span></span><br><span class="line">              <span class="attr">mountPropagation:</span> <span class="string">&quot;Bidirectional&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mountpoint-dir</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/data/kubelet/pods</span></span><br><span class="line">              <span class="attr">mountPropagation:</span> <span class="string">&quot;Bidirectional&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">keys-tmp-dir</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/tmp/csi/keys</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness-prometheus</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">quay.io/cephcsi/cephcsi:canary</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--type=liveness&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--endpoint=$(CSI_ENDPOINT)&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--metricsport=8680&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--metricspath=/metrics&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--polltime=60s&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;--timeout=3s&quot;</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CSI_ENDPOINT</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">unix:///csi/csi.sock</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">socket-dir</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/csi</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">&quot;IfNotPresent&quot;</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">socket-dir</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/data/kubelet/plugins/rbd.csi.ceph.com</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">plugin-dir</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/data/kubelet/plugins</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">Directory</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mountpoint-dir</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/data/kubelet/pods</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">registration-dir</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/data/kubelet/plugins_registry/</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">Directory</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">host-dev</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/dev</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">host-sys</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/sys</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">host-mount</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/run/mount</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lib-modules</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/lib/modules</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ceph-csi-config</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">ceph-csi-config</span></span><br><span class="line">        <span class="comment">#- name: ceph-csi-encryption-kms-config</span></span><br><span class="line">        <span class="comment">#  configMap:</span></span><br><span class="line">        <span class="comment">#    name: ceph-csi-encryption-kms-config</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">keys-tmp-dir</span></span><br><span class="line">          <span class="attr">emptyDir:</span> &#123;</span><br><span class="line">            <span class="attr">medium:</span> <span class="string">&quot;Memory&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># This is a service to expose the liveness metrics</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">csi-metrics-rbdplugin</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">csi-metrics</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http-metrics</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8680</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">csi-rbdplugin</span></span><br></pre></td></tr></table></figure><p>查看容器是否正常运行。</p><p><img src="/doc_picture/ceph-6.png" alt="image-20210802123641214"></p><h2 id="6-使用ceph块设备"><a href="#6-使用ceph块设备" class="headerlink" title="6.    使用ceph块设备"></a>6.    使用ceph块设备</h2><h3 id="创建storageclass"><a href="#创建storageclass" class="headerlink" title="创建storageclass"></a>创建storageclass</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl  apply  -f  csi-rbd-sc-filesystem.yaml</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">cat</span> <span class="string">csi-rbd-sc-filesystem.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">   <span class="attr">name:</span> <span class="string">csi-rbd-sc-filesystem</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">rbd.csi.ceph.com</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">   <span class="attr">clusterID:</span> <span class="string">10594fb3-68f3-4c97-8e0b-df80ba2a6745</span></span><br><span class="line">   <span class="attr">imageFeatures:</span> <span class="string">layering</span></span><br><span class="line">   <span class="attr">pool:</span> <span class="string">kubernetes</span></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/provisioner-secret-name:</span> <span class="string">csi-rbd-secret</span></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/provisioner-secret-namespace:</span> <span class="string">default</span></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/node-stage-secret-name:</span> <span class="string">csi-rbd-secret</span></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/node-stage-secret-namespace:</span> <span class="string">default</span></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/controller-expand-secret-name:</span> <span class="string">csi-rbd-secret</span></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/controller-expand-secret-namespace:</span> <span class="string">default</span></span><br><span class="line">   <span class="attr">csi.storage.k8s.io/fstype:</span> <span class="string">ext4</span></span><br><span class="line"><span class="attr">reclaimPolicy:</span> <span class="string">Delete</span></span><br><span class="line"><span class="attr">allowVolumeExpansion:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mountOptions:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">discard</span></span><br></pre></td></tr></table></figure><p>其中：</p><p> <code>csi.storage.k8s.io/controller-expand-secret-name: csi-rbd-secret</code></p><p><code>csi.storage.k8s.io/controller-expand-secret-namespace: default</code></p><p><code>allowVolumeExpansion: true</code></p><p>以上三个参数都是在ceph-csi支持动态扩容时需要具备的参数</p><h3 id="创建pvc"><a href="#创建pvc" class="headerlink" title="创建pvc"></a>创建pvc</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl  apply  -f  filesystem-pvc2.yaml</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">cat</span> <span class="string">filesystem-pvc2.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filesystem-pvc-2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">volumeMode:</span> <span class="string">Filesystem</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">200Mi</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">csi-rbd-sc-filesystem</span></span><br></pre></td></tr></table></figure><blockquote><p>这里除了filesystem还可以设置成block，区别就是文件系统是直接挂在文件夹下，block相当于是裸设备，有些场景服务为了性能会直接操作裸磁盘就可以用到了。</p></blockquote><p>这个时候查看卷就创建出来了。</p><p><img src="/doc_picture/ceph-7.png" alt="image-20210802124356580"></p><h2 id="存储盘扩容测试"><a href="#存储盘扩容测试" class="headerlink" title="存储盘扩容测试"></a>存储盘扩容测试</h2><p>以上面创建出来的200Mi的filesystem-pvc-2卷举例，查看pvc与pv都是200M。</p><p><img src="/doc_picture/ceph-8.png" alt="image-20210802124511152"></p><p><img src="/doc_picture/ceph-9.png" alt="image-20210802124518604"></p><p>在线修改pvc中的大小，200M修改为700M，保存退出。</p><p><img src="/doc_picture/ceph-10.png" alt="image-20210802124539312"></p><p>查看此时的pvc与pv状态</p><p><img src="/doc_picture/ceph-11.png" alt="image-20210802124656194"></p><p><img src="/doc_picture/ceph-12.png" alt="image-20210802124713132"></p><p>会发现pv已经变为了700M,pvc没有改变，查看pvc的详细信息。</p><p><img src="/doc_picture/ceph-13.png" alt="image-20210802124732583"></p><p>状态栏中已经说的很清楚了，重启文件系统就可以生效了（客户端）。</p><h2 id="扩容缺陷"><a href="#扩容缺陷" class="headerlink" title="扩容缺陷"></a>扩容缺陷</h2><p>原先的卷空间如果扩容到1G及以下会按照实际申请大小来创建，如果申请扩容大小超出1G会自动以GB为单位补全，如下例子：</p><p>将之前创建的filesystem-pvc-2扩容到1.2G</p><p><img src="/doc_picture/ceph-14.png" alt="image-20210802133810652"></p><p>保存退出，查看pv的大小，补为了2G</p><p><img src="/doc_picture/ceph-15.png" alt="image-20210802133825273"></p><p>查看ceph端的rbd大小也是2G</p><p><img src="/doc_picture/ceph-16.png" alt="image-20210802133841028"></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>Kubernetes存储介绍系列 ——CSI plugin设计：<a href="http://newto.me/k8s-csi-design/">http://newto.me/k8s-csi-design/</a></p><p>Kubernetes 兼容 CSI 做的工作： <a href="https://www.kubernetes.org.cn/4618.html">https://www.kubernetes.org.cn/4618.html</a></p><p>kubernetes部署csi:     <a href="#using-ceph-block-devices">https://docs.ceph.com/docs/master/rbd/rbd-kubernetes/#using-ceph-block-devices</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近测试ceph rbd在kubernetes的自动扩容问题，之前K8s v1.11.0时的策略是先找到目标卷，使用rbd resize命令对此卷扩容，找到挂载此卷的客户端宿主机，执行xfs_growfs等刷新文件系统的命令。查看网上资料k8s 在1.15版本后，Expan</summary>
      
    
    
    
    <category term="k8s存储" scheme="https://slions.github.io/categories/k8s%E5%AD%98%E5%82%A8/"/>
    
    
    <category term="kubernetes storage" scheme="https://slions.github.io/tags/kubernetes-storage/"/>
    
    <category term="ceph" scheme="https://slions.github.io/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title>创建开机自启程序（下篇）</title>
    <link href="https://slions.github.io/2021/08/01/%E5%88%9B%E5%BB%BA%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%B8%8B%E7%AF%87%EF%BC%89/"/>
    <id>https://slions.github.io/2021/08/01/%E5%88%9B%E5%BB%BA%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%B8%8B%E7%AF%87%EF%BC%89/</id>
    <published>2021-08-01T07:27:11.000Z</published>
    <updated>2021-08-12T11:50:06.494Z</updated>
    
    <content type="html"><![CDATA[<a href="/2021/08/01/%E5%88%9B%E5%BB%BA%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%B8%8A%E7%AF%87%EF%BC%89/" title="上篇">上篇</a>讲述了通过rc.local可以实现程序的开机自启，这篇说说centOS7以后的推荐方式`systemd service`。<h1 id="systemd-service"><a href="#systemd-service" class="headerlink" title="systemd service"></a>systemd service</h1><p>systemd Service是systemd提供的用于管理服务启动、停止和相关操作的功能，它极大的简化了服务管理的配置过程，用户只需要配置几项指令即可。</p><p>systemd service是systemd所管理的其中一项内容。实际上，systemd service是Systemd Unit的一种，除了Service，systemd还有其他几种类型的unit，比如service、socket、slice、scope、target等等。在这里，暂时了解两项内容：</p><ul><li><p>Service类型，定义服务程序的启动、停止、重启等操作和进程相关属性</p></li><li><p>Target类型，主要目的是对Service(也可以是其它Unit)进行分组、归类，可以包含一个或多个Service Unit(也可以是其它Unit)</p></li></ul><blockquote><p>systemd管理服务的一些亮点：</p><ol><li>用户可以直接在Service配置文件中定义CGroup相关指令来对该服务程序做资源限制。</li><li>用户可以选择Journal日志而非采用rsyslog，这意味着用户可以不用单独去配置rsyslog，而且可以直接通过systemctl或journalctl命令来查看某服务的日志信息。当然，该功能并不适用于所有情况，比如用户需要管理日志时</li><li>Systemd Service还有其它一些特性，比如可以动态修改服务管理配置文件，比如可以并行启动非依赖的服务，从而加速开机过程等等。</li></ol></blockquote><h1 id="systemd服务配置文件存放路径"><a href="#systemd服务配置文件存放路径" class="headerlink" title="systemd服务配置文件存放路径"></a>systemd服务配置文件存放路径</h1><p>systemd 默认从目录<code>/etc/systemd/system/</code>读取配置文件。里面存放的大部分文件都是符号链接，真正的配置文件存放在<code>/usr/lib/systemd/system/</code>，如果用户需要，可以将服务配置文件手动存放至用户配置目录<code>/etc/systemd/system</code>下。该目录下的服务配置文件可以是普通.service文件，也可以是链接至<code>/usr/lib/systemd/system</code>目录下服务配置文件的软链接。</p><p>位于<code>/usr/lib/systemd/system</code>下的服务配置文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# ls -l /usr/lib/systemd/system/*.service|head -10</span><br><span class="line">-rw-r--r--. 1 root root  275 11月 14 2018 /usr/lib/systemd/system/abrt-ccpp.service</span><br><span class="line">-rw-r--r--. 1 root root  380 11月 14 2018 /usr/lib/systemd/system/abrtd.service</span><br><span class="line">-rw-r--r--. 1 root root  361 11月 14 2018 /usr/lib/systemd/system/abrt-oops.service</span><br><span class="line">-rw-r--r--. 1 root root  266 11月 14 2018 /usr/lib/systemd/system/abrt-pstoreoops.service</span><br><span class="line">-rw-r--r--. 1 root root  262 11月 14 2018 /usr/lib/systemd/system/abrt-vmcore.service</span><br><span class="line">-rw-r--r--. 1 root root  311 11月 14 2018 /usr/lib/systemd/system/abrt-xorg.service</span><br><span class="line">-rw-r--r--. 1 root root  275 10月 31 2018 /usr/lib/systemd/system/arp-ethers.service</span><br><span class="line">-rw-r--r--. 1 root root  222 10月 31 2018 /usr/lib/systemd/system/atd.service</span><br><span class="line">-rw-r--r--. 1 root root 1384 8月   8 2019 /usr/lib/systemd/system/auditd.service</span><br><span class="line">lrwxrwxrwx. 1 root root   14 5月  21 16:45 /usr/lib/systemd/system/autovt@.service -&gt; getty@.service</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面这些目录(*.target.wants)定义各种类型下需要运行的服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# ls -1dF /etc/systemd/system/*</span><br><span class="line">/etc/systemd/system/basic.target.wants/</span><br><span class="line">/etc/systemd/system/dbus-org.freedesktop.NetworkManager.service@</span><br><span class="line">/etc/systemd/system/dbus-org.freedesktop.nm-dispatcher.service@</span><br><span class="line">/etc/systemd/system/default.target@</span><br><span class="line">/etc/systemd/system/default.target.wants/</span><br><span class="line">/etc/systemd/system/getty.target.wants/</span><br><span class="line">/etc/systemd/system/local-fs.target.wants/</span><br><span class="line">/etc/systemd/system/multi-user.target.wants/</span><br><span class="line">/etc/systemd/system/network-online.target.wants/</span><br><span class="line">/etc/systemd/system/sockets.target.wants/</span><br><span class="line">/etc/systemd/system/sysinit.target.wants/</span><br><span class="line">/etc/systemd/system/system-update.target.wants/</span><br><span class="line">/etc/systemd/system/vmtoolsd.service.requires/</span><br></pre></td></tr></table></figure><p>/etc/systemd/system/multi-user.target.wants下的服务配置文件，几乎都是软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ~]# ls -l /etc/systemd/system/multi-user.target.wants/ | awk &#x27;&#123;print $9,$10,$11&#125;&#x27;</span><br><span class="line">abrt-ccpp.service -&gt; /usr/lib/systemd/system/abrt-ccpp.service</span><br><span class="line">abrtd.service -&gt; /usr/lib/systemd/system/abrtd.service</span><br><span class="line">abrt-oops.service -&gt; /usr/lib/systemd/system/abrt-oops.service</span><br><span class="line">abrt-vmcore.service -&gt; /usr/lib/systemd/system/abrt-vmcore.service</span><br><span class="line">abrt-xorg.service -&gt; /usr/lib/systemd/system/abrt-xorg.service</span><br><span class="line">atd.service -&gt; /usr/lib/systemd/system/atd.service</span><br><span class="line">auditd.service -&gt; /usr/lib/systemd/system/auditd.service</span><br><span class="line">chronyd.service -&gt; /usr/lib/systemd/system/chronyd.service</span><br><span class="line">crond.service -&gt; /usr/lib/systemd/system/crond.service</span><br><span class="line">irqbalance.service -&gt; /usr/lib/systemd/system/irqbalance.service</span><br><span class="line">kdump.service -&gt; /usr/lib/systemd/system/kdump.service</span><br><span class="line">libstoragemgmt.service -&gt; /usr/lib/systemd/system/libstoragemgmt.service</span><br><span class="line">mdmonitor.service -&gt; /usr/lib/systemd/system/mdmonitor.service</span><br></pre></td></tr></table></figure><h1 id="systemd-service文件格式"><a href="#systemd-service文件格式" class="headerlink" title="systemd service文件格式"></a>systemd service文件格式</h1><p>基本的配置文件格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description = some descriptions</span><br><span class="line">Documentation = man:xxx(8) man:xxx_config(5)</span><br><span class="line">Requires = xxx1.target xxx2.target</span><br><span class="line">After = yyy1.target yyy2.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type = &lt;TYPE&gt;</span><br><span class="line">ExecStart = &lt;CMD_for_START&gt;</span><br><span class="line">ExecStop = &lt;CMD_for_STOP&gt;</span><br><span class="line">ExecReload = &lt;CMD_for_RELOAD&gt;</span><br><span class="line">Restart = &lt;WHEN_TO_RESTART&gt;</span><br><span class="line">RestartSec = &lt;TIME&gt;</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy = xxx.target yy.target</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个.Service配置文件分为三部分：</p><ul><li>Unit：定义该服务作为Unit角色时相关的属性</li><li>Service：定义本服务相关的属性</li><li>Install：定义本服务在设置服务开机自启动时相关的属性。换句话说，只有在创建/移除服务配置文件的软链接时，Install段才会派上用场。这一配置段不是必须的，<strong>当未配置[Install]时，设置开机自启动或禁止开机自启动的操作将无任何效果</strong></li></ul><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="http://www.jinbuguo.com/systemd/systemd.service.html">http://www.jinbuguo.com/systemd/systemd.service.html</a></p><p><a href="https://www.junmajinlong.com/linux/systemd/service_1/">https://www.junmajinlong.com/linux/systemd/service_1/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;a href=&quot;/2021/08/01/%E5%88%9B%E5%BB%BA%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%B8%8A%E7%AF%87%EF%BC%89/&quot; title=&quot;上</summary>
      
    
    
    
    <category term="linux系统" scheme="https://slions.github.io/categories/linux%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="linux" scheme="https://slions.github.io/tags/linux/"/>
    
  </entry>
  
</feed>
