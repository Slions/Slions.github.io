<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://slions.github.io/atom.xml" rel="self"/>
  
  <link href="https://slions.github.io/"/>
  <updated>2022-04-01T15:15:45.209Z</updated>
  <id>https://slions.github.io/</id>
  
  <author>
    <name>Jingyu Shi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>修改kubeadm源码中的证书过期时间</title>
    <link href="https://slions.github.io/2022/04/01/%E4%BF%AE%E6%94%B9kubeadm%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E8%AF%81%E4%B9%A6%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4/"/>
    <id>https://slions.github.io/2022/04/01/%E4%BF%AE%E6%94%B9kubeadm%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E8%AF%81%E4%B9%A6%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4/</id>
    <published>2022-04-01T15:12:14.000Z</published>
    <updated>2022-04-01T15:15:45.209Z</updated>
    
    <content type="html"><![CDATA[<p>通过kubeadm安装的kubernetes v1.22.8版本，查看集群的证书有效期依旧是一年。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 home]#  kubeadm certs check-expiration</span><br><span class="line">[check-expiration] Reading configuration from the cluster...</span><br><span class="line">[check-expiration] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span><br><span class="line"></span><br><span class="line">CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED</span><br><span class="line">admin.conf                 Mar 31, 2023 10:58 UTC   364d            ca                      no</span><br><span class="line">apiserver                  Mar 31, 2023 10:58 UTC   364d            ca                      no</span><br><span class="line">apiserver-etcd-client      Mar 31, 2023 10:58 UTC   364d            etcd-ca                 no</span><br><span class="line">apiserver-kubelet-client   Mar 31, 2023 10:58 UTC   364d            ca                      no</span><br><span class="line">controller-manager.conf    Mar 31, 2023 10:58 UTC   364d            ca                      no</span><br><span class="line">etcd-healthcheck-client    Mar 31, 2023 10:58 UTC   364d            etcd-ca                 no</span><br><span class="line">etcd-peer                  Mar 31, 2023 10:58 UTC   364d            etcd-ca                 no</span><br><span class="line">etcd-server                Mar 31, 2023 10:58 UTC   364d            etcd-ca                 no</span><br><span class="line">front-proxy-client         Mar 31, 2023 10:58 UTC   364d            front-proxy-ca          no</span><br><span class="line">scheduler.conf             Mar 31, 2023 10:58 UTC   364d            ca                      no</span><br><span class="line"></span><br><span class="line">CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED</span><br><span class="line">ca                      Mar 28, 2032 10:58 UTC   9y              no</span><br><span class="line">etcd-ca                 Mar 28, 2032 10:58 UTC   9y              no</span><br><span class="line">front-proxy-ca          Mar 28, 2032 10:58 UTC   9y              no</span><br></pre></td></tr></table></figure><h1 id="修改kubeadm源码"><a href="#修改kubeadm源码" class="headerlink" title="修改kubeadm源码"></a>修改kubeadm源码</h1><h2 id="拉取kubernetes源码"><a href="#拉取kubernetes源码" class="headerlink" title="拉取kubernetes源码"></a>拉取kubernetes源码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/kubernetes/kubernetes.git</span><br></pre></td></tr></table></figure><p>切换到匹配版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd kubernetes &amp;&amp; git checkout -b remotes/origin/release-1.22.8  v1.22.8</span><br></pre></td></tr></table></figure><h2 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h2><p>查看kubeadm对应的go版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 home]# kubeadm version</span><br><span class="line">kubeadm version: &amp;version.Info&#123;Major:&quot;1&quot;, Minor:&quot;22&quot;, GitVersion:&quot;v1.22.8&quot;, GitCommit:&quot;7061dbbf75f9f82e8ab21f9be7e8ffcaae8e0d44&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2022-03-16T14:08:54Z&quot;, GoVersion:&quot;go1.16.15&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;&#125;</span><br></pre></td></tr></table></figure><p>下载go1.16.15</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/go/go1.16.15.linux-amd64.tar.gz</span><br><span class="line">tar zxvf go1.16.15.linux-amd64.tar.gz  -C  /usr/local </span><br></pre></td></tr></table></figure><p>设置go的运行环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#编辑/etc/profile文件添加如下：</span><br><span class="line">#go setting</span><br><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export GOPATH=/usr/local/gopath</span><br><span class="line">export PATH=$PATH:$GOROOT/bin</span><br></pre></td></tr></table></figure><p>加载环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="修改源码"><a href="#修改源码" class="headerlink" title="修改源码"></a>修改源码</h2><p>修改CA有效期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim staging/src/k8s.io/client-go/util/cert/cert.go</span><br></pre></td></tr></table></figure><p><img src="https://slions.gitee.io/picbed/img/cert.png"></p><p>修改集群证书有效期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim cmd/kubeadm/app/constants/constants.go</span><br></pre></td></tr></table></figure><p><img src="https://slions.gitee.io/picbed/img/ca.png"></p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>下载编译工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc make -y</span><br></pre></td></tr></table></figure><p>编译kubeadm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make all WHAT=cmd/kubeadm GOFLAGS=-v</span><br></pre></td></tr></table></figure><p>编译完产物在<code>_output/bin/kubeadm</code>目录下,其中 bin 是使用了软连接,真实路径是<code>_output/local/bin/linux/amd64/kubeadm</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 kubernetes]# ll _output/bin/kubeadm</span><br><span class="line">-rwxr-xr-x. 1 root root 45830144 4月   1 14:52 _output/bin/kubeadm</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过kubeadm安装的kubernetes v1.22.8版本，查看集群的证书有效期依旧是一年。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin</summary>
      
    
    
    
    <category term="kubernetes" scheme="https://slions.github.io/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://slions.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>k8s网络模型与cni插件</title>
    <link href="https://slions.github.io/2022/03/22/k8s%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E4%B8%8Ecni%E6%8F%92%E4%BB%B6/"/>
    <id>https://slions.github.io/2022/03/22/k8s%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E4%B8%8Ecni%E6%8F%92%E4%BB%B6/</id>
    <published>2022-03-22T15:47:22.000Z</published>
    <updated>2022-03-22T15:31:23.457Z</updated>
    
    <content type="html"><![CDATA[<p>Docker是基于一个虚拟网桥设备<code>docker0</code>来实现宿主机上容器通信的，而k8s本身不提供网络方案，只提供cni接口，维护了一个单独的网桥（cni0）来代替 docker0，由遵从cni的第三方网络插件提供。</p><p>在使用cni插件时，一旦使用了k8s创建Pod,那么会产生一个CNI网桥来接管所有CNI插件负责的Pod，而我们单纯使用docker run命令创建的容器，还是由docker0负责。<br>Kubernetes 之所以要设置这样一个与 docker0 网桥功能几乎一样的 CNI 网桥，主要原因包括两个方面：</p><ul><li>Kubernetes 项目并没有使用 Docker 的网络模型（CNM），所以它并不希望、也不具备配置 docker0 网桥的能力；</li><li>这还与 Kubernetes 如何配置 Pod，也就是 Infra 容器的 Network Namespace密切相关。</li></ul><p><strong>CNI的设计思想是k8s在启动容器之后，就可以直接调用CNI网络插件，为这个容器的Network Namespace配置符合预期的网络栈。</strong></p><h1 id="CNI工作流程"><a href="#CNI工作流程" class="headerlink" title="CNI工作流程"></a>CNI工作流程</h1><p>在部署 Kubernetes 的时候，有一个步骤是安装 kubernetes-cni 包，它的目的就是在宿主机上安装CNI 插件所需的基础可执行文件。</p><p>在安装完成后，可以在宿主机的 /opt/cni/bin 目录下看到它们:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 ~]# ls /opt/cni/bin/</span><br><span class="line">bridge  dhcp  flannel  host-device  host-local  ipvlan  loopback  macvlan  portmap  ptp  sample  tuning  vlan</span><br></pre></td></tr></table></figure><p>可以看到flannel就在里面，k8s仓库中保留着flannel的实现。</p><p>这些 CNI 的基础可执行文件，按照功能可以分为三类：</p><ul><li>第一类，叫作 Main 插件，它是用来创建具体网络设备的二进制文件。比如，bridge（网桥设备）、ipvlan、loopback（lo 设备）、macvlan、ptp（Veth Pair 设备），以及 vlan。</li><li>第二类，叫作 IPAM（IP Address Management）插件，它是负责分配 IP 地址的二进制文件。比如，dhcp，这个文件会向 DHCP 服务器发起请求；host-local，则会使用预先配置的 IP地址段来进行分配。</li><li>第三类，是由 CNI 社区维护的内置 CNI 插件。比如：flannel，就是专门为 Flannel 项目提供的CNI 插件；tuning，是一个通过 sysctl 调整网络设备参数的二进制文件；portmap，是一个通过 iptables 配置端口映射的二进制文件；bandwidth，是一个使用 Token Bucket Filter (TBF)来进行限流的二进制文件。</li></ul><p>下面以flannel为例说明：</p><p>首先，实现这个网络方案本身。这一部分需要编写的，其实就是 flanneld 进程里的主要逻辑。</p><p>比如，创建和配置 flannel.1 设备、配置宿主机路由、配置 ARP 和 FDB 表里的信息等等。然后，实现该网络方案对应的 CNI 插件。这一部分主要需要做的，就是配置 Infra 容器里面的网络栈，并把它连接在 CNI 网桥上。</p><p>由于 Flannel 项目对应的 CNI 插件已经被内置了，所以它无需再单独安装。而对于 Weave、Calico 等其他项目来说，我们就必须在安装插件的时候，把对应的 CNI 插件的可执行文件放在 /opt/cni/bin/ 目录下。实际上，对于 Weave、Calico 这样的网络方案来说，它们的 DaemonSet 只需要挂载宿主机的 /opt/cni/bin/，就可以实现插件可执行文件的安装了。</p><p>接下来，就需要在宿主机上安装 flanneld（网络方案本身）。而在这个过程中，flanneld 启动后会在每台宿主机上生成它对应的CNI 配置文件（它其实是一个 ConfigMap），从而告诉Kubernetes，这个集群要使用 Flannel 作为容器网络方案。</p><p>这个 CNI 配置文件的内容如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 ~]# cat /etc/cni/net.d/<span class="number">10</span>-flannel.conflist</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;cbr0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;cniVersion&quot;</span>: <span class="string">&quot;0.3.1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;flannel&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;delegate&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;hairpinMode&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;isDefaultGateway&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;portmap&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;capabilities&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;portMappings&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>需要注意，Kubernetes 目前不支持多个 CNI 插件混用。如果在 CNI 配置目录（/etc/cni/net.d）里放置了多个 CNI 配置文件的话，dockershim 只会加载按字母顺序排序的第一个插件。</p><p>但另一方面，CNI 允许你在一个 CNI 配置文件里，通过 plugins 字段，定义多个插件进行协作。</p><p>比如，在我们上面这个例子里，Flannel 项目就指定了 flannel 和 portmap 这两个插件。</p></blockquote><p>下面是目前使用的flannel的服务文件，结合这个配置文件可以更好理解：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-flannel-ds-amd64</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">nodeAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">beta.kubernetes.io/os</span></span><br><span class="line">                <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                <span class="attr">values:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">linux</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">beta.kubernetes.io/arch</span></span><br><span class="line">                <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                <span class="attr">values:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">amd64</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--ip-masq</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--kube-subnet-mgr</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/opt/bin/flanneld</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">acaas-registry.agree:9980/quay.io/coreos/flannel:v0.11.0-amd64</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">kube-flannel</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">50Mi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">50Mi</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">capabilities:</span></span><br><span class="line">            <span class="attr">add:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">        <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/run/flannel</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">run</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-f</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/etc/kube-flannel/cni-conf.json</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/etc/cni/net.d/10-flannel.conflist</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cp</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">acaas-registry.agree:9980/quay.io/coreos/flannel:v0.11.0-amd64</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">install-cni</span></span><br><span class="line">        <span class="attr">resources:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">        <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">cni</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">      <span class="attr">securityContext:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">serviceAccount:</span> <span class="string">flannel</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">flannel</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">        <span class="attr">operator:</span> <span class="string">Exists</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/run/flannel</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">run</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">cni</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">defaultMode:</span> <span class="number">420</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">kube-flannel-cfg</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">flannel-cfg</span></span><br><span class="line">  <span class="attr">updateStrategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">cni-conf.json:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;name&quot;: &quot;cbr0&quot;,</span></span><br><span class="line"><span class="string">      &quot;cniVersion&quot;: &quot;0.3.1&quot;,</span></span><br><span class="line"><span class="string">      &quot;plugins&quot;: [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;flannel&quot;,</span></span><br><span class="line"><span class="string">          &quot;delegate&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;hairpinMode&quot;: true,</span></span><br><span class="line"><span class="string">            &quot;isDefaultGateway&quot;: true</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          &quot;type&quot;: &quot;portmap&quot;,</span></span><br><span class="line"><span class="string">          &quot;capabilities&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;portMappings&quot;: true</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span>  <span class="attr">net-conf.json:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;Network&quot;: &quot;10.244.0.0/16&quot;,</span></span><br><span class="line"><span class="string">      &quot;Backend&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;Type&quot;: &quot;vxlan&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flannel</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">node</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-flannel-cfg</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure><p>可以看出,flannel 清单中创建了一个configMap，其内包含两个json文件，其中cni-conf.json，这个configmap会被flannel的init-container挂载，挂载完毕后会执行cp命令到/etc/cni/net下面。</p><blockquote><p>在 Kubernetes 中，处理容器网络相关的逻辑并不会在 kubelet 主干代码里执行，而是会在具体的 CRI（Container Runtime Interface，容器运行时接口）实现里完成。对于 Docker 项目来说，它的 CRI 实现叫作 dockershim.</p></blockquote><h2 id="CRI网络处理流程："><a href="#CRI网络处理流程：" class="headerlink" title="CRI网络处理流程："></a>CRI网络处理流程：</h2><ol><li><p>当 kubelet 组件需要创建 Pod 的时候，它第一个创建的一定是 Infra 容器。所以在这一步，dockershim 就会先调用 Docker API 创建并启动 Infra 容器，紧接着执行一个叫作 SetUpPod的方法。这个方法的作用就是：为 CNI 插件准备参数，然后调用 CNI 插件为 Infra 容器配置网络。</p></li><li><p>这里要调用的 CNI 插件，就是<code>/opt/cni/bin/flannel</code>；而调用它所需要的参数，分为两部分。<br>一部分是一组CNI环境变量，用于定义当前的操作（ADD或者DEL，也就是添加一个veth pair或者拆除一个veth pair），根据这两个操作类型，flannel则会对应的实现两个方法，从而实现ADD和DEL流程；另一部分则是从上文中提到的 CNI配置文件中拿到的一些配置信息（被flannel从configMap挂载到了 宿主机的 <code>/etc/cni/net.d/10-flannel.conflist</code>），组装成json格式的<strong>Network COnfiguration</strong> 通过 stdin 传递给 flannel 插件</p></li><li><p>所以有了这两部分参数，flannel插件就可以实现具体的网络栈配置了；在Flannel 的 CNI 配置文件（ <code>/etc/cni/net.d/10-flannel.conflist</code>）里有这么一个字段，叫作 <strong>delegate</strong></p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;flannel&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;delegate&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;hairpinMode&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;isDefaultGateway&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Delegate 字段的意思是，这个 CNI 插件并不会自己做事儿，而是会调用 Delegate 指定的某种 CNI 内置插件来完成。对于 Flannel 来说，它调用的 Delegate 插件，就是前面介绍到的 CNI bridge 插件。所以说，<strong>dockershim 对 Flannel CNI 插件的调用，其实就是走了个过场。Flannel CNI插件唯一需要做的，就是对 dockershim 传来的 Network Configuration 进行补充</strong>。比如：将Delegate 的 Type 字段设置为 bridge，将 Delegate 的 IPAM 字段设置为 host-local 等。经过 Flannel CNI 插件补充后的、完整的 Delegate 字段如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;cniVersion&quot;</span>:<span class="string">&quot;0.3.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hairpinMode&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;ipMasq&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;ipam&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;routes&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;dst&quot;</span>:<span class="string">&quot;10.244.0.0/16&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;subnet&quot;</span>:<span class="string">&quot;10.244.0.0/24&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;host-local&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;isDefaultGateway&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;isGateway&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;mtu&quot;</span>:<span class="number">1450</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;cbr0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;bridge&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，ipam 字段里的信息，比如 10.244.1.0/24，读取自 Flannel 在宿主机上生成的 Flannel配置文件，即：宿主机上的 <code>/run/flannel/subnet.env </code>文件。</p><ol start="4"><li><p>接下来，Flannel CNI 插件就会调用 CNI bridge 插件，也就是执行：/opt/cni/bin/bridge 二进制文件。<br>这一次，调用 CNI bridge 插件需要的两部分参数的第一部分、也就是 CNI 环境变量，并没有变化。所以，它里面的 CNI_COMMAND 参数的值还是“ADD”。而第二部分 Network Configration，正是上面补充好的 Delegate 字段。Flannel CNI 插件会把 Delegate 字段的内容以标准输入（stdin）的方式传递给 CNI bridge 插件。</p></li><li><p>最后，flannel通过代理bridge完成将容器插入的CNI网络，如果没有CNI网桥，则会创建一个，这也是为什么如果集群为空的时候，其实宿主机看不到cni0网桥，创建了第一个pod后才会出现；而上面hairpinMode参数意思是 发夹模式，默认情况下，网桥设备不允许一个数据包从一个端口进来，再从一个端口出去，开启了这个模式则是取消这个限制，因为我们要允许在 NAT模式下，容器自己访问自己：比如将宿主机的8080端口映射到容器的80端口，完全可能在容器内访问宿主机的8080端口来访问自己，这样就成了报文从容器出去，又会原路返回，所以要打开这个限制。</p></li></ol><h1 id="Flannel-vxlan在k8s中的实现"><a href="#Flannel-vxlan在k8s中的实现" class="headerlink" title="Flannel vxlan在k8s中的实现"></a>Flannel vxlan在k8s中的实现</h1><h2 id="原理图："><a href="#原理图：" class="headerlink" title="原理图："></a>原理图：</h2><p><img src="https://slions.gitee.io/picbed/img/f_vxlan4.png"></p><p><strong>Cni0：</strong>网桥设备，每创建一个 Pod 都会创建一对 Veth Pair。其中一端是 Pod 中的 eth0，另一端是 cni0 网桥中的端口（网卡）。Pod 中从网卡 eth0 发出的流量都会发送到 cni0 网桥设备的端口（网卡）上。</p><p>注：cni0 设备获得的 IP 地址是该节点分配到的网段的第一个地址。</p><p><strong>Flannel.1：</strong>Overlay 网络的设备，用来进行 Vxlan 报文的处理（封包和解包）。不同 Node 之间的 Pod 数据流量都从 Overlay 设备以隧道的形式发送到对端。</p><p><strong>Flanneld：</strong>Flannel 在每个主机中运行 Flanneld 作为 Agent，它会为所在主机从集群的网络地址空间中，获取一个小的网段 Subnet，本主机内所有容器的 IP 地址都将从中分配。</p><p>同时 Flanneld 监听 K8S 集群数据库（etcd），为 Flannel.1 设备提供封装数据时必要的 Mac，IP 等网络数据信息。</p><h2 id="跨主-Pod-的通信流程："><a href="#跨主-Pod-的通信流程：" class="headerlink" title="跨主 Pod 的通信流程："></a>跨主 Pod 的通信流程：</h2><ol><li>Pod 中产生数据，根据 Pod 的路由信息，将数据发送到 cni0。</li><li>cni0 根据节点的路由表，将数据发送到隧道设备 Flannel.1。</li><li>Flannel.1 查看数据包的目的 IP，从 Flanneld 获得对端隧道设备的必要信息，封装数据包。</li></ol><blockquote><p><strong>内层封装：</strong>Flannel.1 为 Vxlan 隧道端点，当数据包来到 Flannel.1 时，需要将数据包封装起来。此时：<br>源 IP src ip 为 源pod_ip。目的 IP dst ip 为目标pod_ip。<br>数据包继续封装需要知道目的pod_IP 地址对应的 Mac 地址。此时，Flannel.1 会将请求发送到用户空间的 Flanned 程序。Flanned 程序收到内核的请求事件之后，从 etcd 查找能够匹配该地址的子网的 Flannel.1 设备的 Mac 地址，即发往的 Pod 所在 Host 中 Flannel.1 设备的 Mac 地址。通过上面的介绍我们可知Flannel 在为 Node 节点分配 POD_IP 网段时记录了所有的网段和 Mac 等信息。<br>Flanned 将查询到的信息放入 Master 节点的 ARP Cache 表中：可以通过arp -n来查看。</p><p><strong>外层封装：</strong>此时内层封装已经准备好，需要找到 Vxlan 的外层封装。Kernel 需要查看 Node 上的 FDB（forwarding database）以获得内层封包中目的 Vtep 设备所在的 Node 地址。<br>因为已经从 ARP Table 中查到目的设备（flannel.1） Mac 地址，同时在 FDB 中存在该 Mac 地址对应的 Node 节点的 IP 地址。<br>如果 FDB 中没有这个信息，那么 Kernel 会向用户空间的 Flanned 程序发起“L2 MISS”事件。Flanneld 收到该事件后，会查询 etcd，获取该 Vtep 设备对应的 Node 的“Public IP”，并将信息注册到 FDB 中。<br>当内核获得了发往机器的 IP 地址后，ARP 得到 Mac 地址，之后就能完成 Vxlan 的外层封装。</p></blockquote><p><img src="https://slions.gitee.io/picbed/img/f_vxlan5.png"></p><ol start="4"><li>Flannel.1 将数据包发送到对端设备。节点的网卡接收到数据包，发现数据包为 Overlay 数据包，解开外层封装，并发送内层封装到 Flannel.1 设备。</li><li>Flannel.1 设备查看数据包，根据路由表匹配，将数据发送给 cni0 设备。</li><li>cni0 匹配路由表，发送数据给网桥上对应的端口。</li></ol><h2 id="一些实现细节"><a href="#一些实现细节" class="headerlink" title="一些实现细节"></a>一些实现细节</h2><p>kubernetes 会对每个 node 去标识一個名 <strong>PodCIDR</strong> 的值，代表该 Node 可以使用的网段。flanneld 的 Pod 会去读取该信息，并且记录在<code>/run/flannel/subnet.env</code>文件中。</p><p><strong>flannel CNI</strong> 收到任何创建pod请求时，会去读取<code>/run/flannel/subnet.env</code>文件，并且将其內容转换，发给 <strong>host-local</strong> 这个 <strong>IPAM CNI</strong>，来取得可以用的ip设定在pod身上。一旦当 <strong>host-local</strong> 处理结束后，就会在<code>/var/run/cni/cbr0/networks</code>看到一系列由 <strong>host-local</strong> 所维护的正在使用 IP 清单，这些IP清单内容记录着对应pod infra容器的container id。</p><p>在创建容器时，Flannel CNI 插件还会把 Delegate 字段以 JSON 文件的方式，保存在/var/lib/cni/flannel 目录下。这是为了给后面删除容器调用 DEL 操作时使用的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 CompassProject]# kubectl describe nodes|grep -w PodCIDR</span><br><span class="line">PodCIDR:                      10.244.0.0/24</span><br><span class="line">PodCIDR:                      10.244.1.0/24</span><br><span class="line">[root@test1 CompassProject]# cat /run/flannel/subnet.env</span><br><span class="line">FLANNEL_NETWORK=10.244.0.0/16</span><br><span class="line">FLANNEL_SUBNET=10.244.0.1/24</span><br><span class="line">FLANNEL_MTU=1450</span><br><span class="line">FLANNEL_IPMASQ=true</span><br><span class="line">[root@test1 CompassProject]# ls /var/lib/cni/networks/cbr0/</span><br><span class="line">10.244.0.4  10.244.0.5  last_reserved_ip.0  lock</span><br><span class="line">[root@test1 CompassProject]# cat /var/lib/cni/networks/cbr0/10.244.0.4</span><br><span class="line">5730c8d6756736dfc71452542a0395b9aaf3e2de2aef3b547a320cdc55069781</span><br><span class="line">[root@test1 CompassProject]# docker ps --no-trunc |grep $(cat /var/lib/cni/networks/cbr0/10.244.0.4)</span><br><span class="line">5730c8d6756736dfc71452542a0395b9aaf3e2de2aef3b547a320cdc55069781   acaas-registry.agree:9980/k8s.gcr.io/pause:3.1                 &quot;/pause&quot;                                                         37 hours ago                                  Up 37 hours                             k8s_POD_coredns-5b7d5f6cc8-hpqqb_kube-system_1f3a3347-3d16-4066-bf9b-791e28b7967f_4</span><br><span class="line">[root@test1 ~]# cat /var/lib/cni/flannel/</span><br><span class="line">5730c8d6756736dfc71452542a0395b9aaf3e2de2aef3b547a320cdc55069781  f6a039290fe9bc7b0469ed82a81bb7f29aee041b2b8a0025ce8bdf7cb47c7d06</span><br><span class="line">[root@test1 ~]# cat /var/lib/cni/flannel/5730c8d6756736dfc71452542a0395b9aaf3e2de2aef3b547a320cdc55069781</span><br><span class="line">&#123;&quot;cniVersion&quot;:&quot;0.3.1&quot;,&quot;hairpinMode&quot;:true,&quot;ipMasq&quot;:false,&quot;ipam&quot;:&#123;&quot;routes&quot;:[&#123;&quot;dst&quot;:&quot;10.244.0.0/16&quot;&#125;],&quot;subnet&quot;:&quot;10.244.0.0/24&quot;,&quot;type&quot;:&quot;host-local&quot;&#125;,&quot;isDefaultGateway&quot;:true,&quot;isGateway&quot;:true,&quot;mtu&quot;:1450,&quot;name&quot;:&quot;cbr0&quot;,&quot;type&quot;:&quot;bridge&quot;&#125;</span><br></pre></td></tr></table></figure><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>《Kubernetes网络模型与CNI网络插件》 张磊</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Docker是基于一个虚拟网桥设备&lt;code&gt;docker0&lt;/code&gt;来实现宿主机上容器通信的，而k8s本身不提供网络方案，只提供cni接口，维护了一个单独的网桥（cni0）来代替 docker0，由遵从cni的第三方网络插件提供。&lt;/p&gt;
&lt;p&gt;在使用cni插件时，一</summary>
      
    
    
    
    <category term="云原生" scheme="https://slions.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="kubernetes" scheme="https://slions.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>docker跨主机通信</title>
    <link href="https://slions.github.io/2022/03/22/docker%E8%B7%A8%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1/"/>
    <id>https://slions.github.io/2022/03/22/docker%E8%B7%A8%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1/</id>
    <published>2022-03-22T02:00:05.000Z</published>
    <updated>2022-03-24T13:38:17.530Z</updated>
    
    <content type="html"><![CDATA[<p>Docker默认的网络模式有三种：bridge、host、none，其中想实现不同宿主机上的容器相互访问是做不到的。对应”docker跨主通信”的需求，社区里涌现了大批的方案，其中<code>flannel</code>是用的最多也是较为简单的。</p><h1 id="Flannel"><a href="#Flannel" class="headerlink" title="Flannel"></a>Flannel</h1><p>Flannel本身是个框架，真正提供网络功能的是flannel的后端实现。Flannel支持三种后端实现：</p><ul><li>udp</li><li>vxlan</li><li>host-gw</li></ul><h2 id="udp"><a href="#udp" class="headerlink" title="udp"></a>udp</h2><p>flannel最早期的网络方案，实现最简单但是性能最差。</p><p>udp的原理图：</p><p><img src="https://slions.gitee.io/picbed/img/f_udp.png"></p><p>Flannel UDP 模式提供的其实是一个三层的 Overlay 网络，即：它首先对发出端的 IP包进行 UDP 封装，然后在接收端进行解封装拿到原始的 IP 包，进而把这个 IP 包转发给目标容器。这就好比，Flannel 在不同宿主机上的两个容器之间打通了一条“隧道”，使得这两个容器可以直接使用 IP 地址进行通信，而无需关心容器和宿主机的分布情况。</p><p>实际上，相比于两台宿主机之间的直接通信，基于 Flannel UDP 模式的容器通信多了一个额外的步骤，即 flanneld 的处理过程。而这个过程，由于使用到了 flannel0 这个 TUN 设备，仅在发出 IP包的过程中，就需要经过三次用户态与内核态之间的数据拷贝，如下所示：</p><p><img src="https://slions.gitee.io/picbed/img/f_udp2.png"></p><p>第一次：用户态的容器进程发出的 IP 包经过 docker0 网桥进入内核态；</p><p>第二次：IP 包根据路由表进入 TUN（flannel0）设备，从而回到用户态的 flanneld 进程；</p><p>第三次：flanneld 进行 UDP 封包之后重新进入内核态，将 UDP 包通过宿主机的 eth0 发出去。</p><p>此外，我们还可以看到，Flannel 进行 UDP 封装（Encapsulation）和解封装（Decapsulation）的过程，也都是在用户态完成的。在 Linux 操作系统中，上述这些上下文切换和用户态操作的代价其实是比较高的，这也正是造成 Flannel UDP 模式性能不好的主要原因。</p><h2 id="vxlan"><a href="#vxlan" class="headerlink" title="vxlan"></a>vxlan</h2><p> Virtual Extensible LAN（虚拟可扩展局域网），是 Linux 内核本身就支持的一种网络虚似化技术。所以说，VXLAN 可以完全在内核态实现上述封装和解封装的工作，从而通过与前面相似的“隧道”机制，构建出覆盖网络（Overlay Network）。</p><p>VXLAN 的覆盖网络的设计思想是：在现有的三层网络之上，“覆盖”一层虚拟的、由内核 VXLAN模块负责维护的二层网络，使得连接在这个 VXLAN 二层网络上的“主机”之间，可以像在同一个局域网（LAN）里那样自由通信。为了能够在二层网络上打通“隧道”，VXLAN 会在宿主机上设置一个特殊的网络设备作为“隧道”的两端。这个设备就叫作 VTEP，即：VXLAN Tunnel End Point（虚拟隧道端点）</p><p>而 VTEP 设备的作用，其实跟前面的 flanneld 进程非常相似。只不过，它进行封装和解封装的对象，是二层数据帧（Ethernet frame）；而且这个工作的执行流程，全部是在内核里完成的（因为VXLAN 本身就是 Linux 内核中的一个模块）。</p><p><img src="https://slions.gitee.io/picbed/img/f_vxlan.png"></p><p>图中每台宿主机上名叫 flannel.1 的设备，就是 VXLAN 所需的 VTEP 设备，它既有 IP地址，也有 MAC 地址。</p><p>可以看到，图中每台宿主机上名叫 flannel.1 的设备，就是 VXLAN 所需的 VTEP 设备，它既有 IP地址，也有 MAC 地址。</p><p>现在，我们的 container-1 的 IP 地址是 10.1.15.2，要访问的 container-2 的 IP 地址是10.1.16.3。</p><p>那么，与前面 UDP 模式的流程类似，当 container-1 发出请求之后，这个目的地址是 10.1.16.3的 IP 包，会先出现在 docker0 网桥，然后被路由到本机 flannel.1 设备进行处理。</p><p>为了能够将“原始 IP 包”封装并且发送到正确的宿主机，VXLAN 就需要找到这条“隧道”的出口，即：目的宿主机的 VTEP 设备。</p><p>而这个设备的信息，正是每台宿主机上的 flanneld 进程负责维护的。</p><p>当 一个新Node启动并加入 Flannel 网络之后，在 所有的节点上，flanneld就会添加一条去往对端的路由，凡是发往对端网段的 IP 包，都需要经过 flannel.1 设备发出。</p><p>在本例中，“源 VTEP 设备”收到“原始 IP 包”后，就要想办法把“原始 IP 包”加上一个目的 MAC 地址，封装成一个二层数据帧，然后发给“目的 VTEP 设备”</p><p>此时，根据前面的路由记录，我们已经知道了“目的 VTEP 设备”的 IP 地址。而要根据三层 IP 地址查询对应的二层 MAC 地址，这正是 ARP表的功能。而这里要用到的 ARP 记录，也是 flanneld 进程在 Node 2 节点启动时，自动添加在 Node 1 上的。我们可以通过 ip 命令看到它，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在 Node 1 上</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ip neigh show dev flannel.1</span></span><br><span class="line">10.1.16.0 lladdr 5e:f8:4f:00:e3:37 PERMANENT</span><br></pre></td></tr></table></figure><p>有了这个“目的 VTEP 设备”的 MAC 地址，Linux 内核就可以开始二层封包工作了。这个二层帧的格式，如下所示：</p><p><img src="https://slions.gitee.io/picbed/img/f_vxlan2.png"></p><p>可以看到，Linux 内核会把“目的 VTEP 设备”的 MAC 地址，填写在图中的 Inner EthernetHeader 字段，得到一个二层数据帧。</p><p>需要注意的是，上述封包过程只是加一个二层头，不会改变“原始 IP 包”的内容。所以图中的Inner IP Header 字段，依然是 container-2 的 IP 地址，即 10.1.16.3。</p><p>但是，上面提到的这些 VTEP 设备的 MAC 地址，对于宿主机网络来说并没有什么实际意义。所以上面封装出来的这个数据帧，并不能在我们的宿主机二层网络里传输。为了方便叙述，我们把它称为“内部数据帧”。</p><p>所以接下来，Linux 内核还需要再把“内部数据帧”进一步封装成为宿主机网络里的一个普通的数据帧，好让它“载着”“内部数据帧”，通过宿主机的 eth0 网卡进行传输。</p><p>我们把这次要封装出来的、宿主机对应的数据帧称为“外部数据帧”（Outer Ethernet Frame）。为了实现这个“搭便车”的机制，Linux 内核会在“内部数据帧”前面，加上一个特殊的 VXLAN头，用来表示这个“乘客”实际上是一个 VXLAN 要使用的数据帧。</p><p>而这个 VXLAN 头里有一个重要的标志叫作VNI，它是 VTEP 设备识别某个数据帧是不是应该归自己处理的重要标识。而在 Flannel 中，VNI 的默认值是 1，这也是为何，宿主机上的 VTEP 设备都叫作 flannel.1 的原因，这里的“1”，其实就是 VNI 的值。</p><p>然后，Linux 内核会把这个数据帧封装进一个 UDP 包里发出去。</p><p>在宿主机看来，它会以为自己的 flannel.1 设备只是在向另外一台宿主机的 flannel.1 设备，发起了一次普通的 UDP 链接。它哪里会知道，这个 UDP 包里面，其实是一个完整的二层数据帧。</p><p>不过，不要忘了，一个 flannel.1 设备只知道另一端的 flannel.1 设备的 MAC 地址，却不知道对应的宿主机地址是什么。</p><p>也就是说，这个 UDP 包该发给哪台宿主机呢？</p><p>在这种场景下，flannel.1 设备实际上要扮演一个“网桥”的角色，在二层网络进行 UDP 包的转发。而在 Linux 内核里面，“网桥”设备进行转发的依据，来自于一个叫作 FDB（Forwarding Database）的转发数据库。</p><p>不难想到，这个 flannel.1“网桥”对应的 FDB 信息，也是 flanneld 进程负责维护的。它的内容可以通过 bridge fdb 命令查看到，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在 Node 1 上，使用“目的 VTEP 设备”的 MAC 地址进行查询</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> bridge fdb show flannel.1 | grep 5e:f8:4f:00:e3:37</span></span><br><span class="line">5e:f8:4f:00:e3:37 dev flannel.1 dst 10.168.0.3 self permanent</span><br></pre></td></tr></table></figure><p>可以看到，在上面这条 FDB 记录里，指定了这样一条规则，即：</p><p>发往我们前面提到的“目的 VTEP 设备”（MAC 地址是 5e:f8:4f:00:e3:37）的二层数据帧，应该通过 flannel.1 设备，发往 IP 地址为10.168.0.3 的主机。显然，这台主机正是 Node 2，UDP 包要发往的目的地就找到了。</p><p>所以接下来的流程，就是一个正常的、宿主机网络上的封包工作。</p><p>我们知道，UDP 包是一个四层数据包，所以 Linux 内核会在它前面加上一个 IP 头，即原理图中的Outer IP Header，组成一个 IP 包。并且，在这个 IP 头里，会填上前面通过 FDB 查询出来的目的主机的 IP 地址，即 Node 2 的 IP 地址 10.168.0.3。</p><p>然后，Linux 内核再在这个 IP 包前面加上二层数据帧头，即原理图中的 Outer Ethernet Header，并把 Node 2 的 MAC 地址填进去。这个 MAC 地址本身，是 Node 1 的 ARP 表要学习的内容，无需 Flannel 维护。这时候，我们封装出来的“外部数据帧”的格式，如下所示：</p><p><img src="https://slions.gitee.io/picbed/img/f_vxlan3.png"></p><p>这样，封包工作就宣告完成了。</p><p>接下来，Node 1 上的 flannel.1 设备就可以把这个数据帧从 Node 1 的 eth0 网卡发出去。显然，这个帧会经过宿主机网络来到 Node 2 的 eth0 网卡。</p><p>这时候，Node 2 的内核网络栈会发现这个数据帧里有 VXLAN Header，并且 VNI=1。所以 Linux内核会对它进行拆包，拿到里面的内部数据帧，然后根据 VNI 的值，把它交给 Node 2 上的flannel.1 设备。</p><p>而 flannel.1 设备则会进一步拆包，取出“原始 IP 包”。接下来就是docker正常的网络流转了。最终，IP 包就进入到了 container-2 容器的 Network Namespace里。</p><h2 id="host-gw"><a href="#host-gw" class="headerlink" title="host-gw"></a>host-gw</h2><p>与 udp和vxlan 模式不同，host-gw是一种纯三层网络方案。</p><p><img src="https://slions.gitee.io/picbed/img/f_gw1.png"></p><p>假设现在，Node 1 上的 Infra-container-1，要访问 Node 2 上的 Infra-container-2。</p><p>设置 Flannel 使用 host-gw 模式：</p><p><img src="https://slions.gitee.io/picbed/img/f_gw0.png"></p><p>重启flannel后，flanneld 会在宿主机上创建这样一条规则，以Node 1 为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ip route</span></span><br><span class="line">...</span><br><span class="line">10.244.1.0/24 via 10.168.0.3 dev eth0</span><br></pre></td></tr></table></figure><p>可以看到，host-gw 模式的工作原理，其实就是将每个 Flannel 子网（Flannel Subnet，比如：10.244.1.0/24）的“下一跳”，设置成了该子网对应的宿主机的 IP 地址。</p><p>也就是说，这台“主机”（Host）会充当这条容器通信路径里的“网关”（Gateway）。这也正是“host-gw”的含义。</p><p>当然，Flannel 子网和主机的信息，都是保存在 Etcd 当中的。flanneld 只需要 WACTH 这些数据的变化，然后实时更新路由表即可。</p><h1 id="优略点"><a href="#优略点" class="headerlink" title="优略点"></a>优略点</h1><p><strong>udp模式</strong>：使用设备flannel.0进行封包解包，不是内核原生支持，上下文切换较大，性能非常差。<br><strong>vxlan模式</strong>：使用flannel.1进行封包解包，内核原生支持，性能较强。<br><strong>host-gw模式</strong>：无需flannel.1这样的中间设备，无需额外的解封包操作，直接宿主机当作子网的下一跳地址，性能最强。但又因host-gw是把宿主机网卡当作网关，所以集群节点要在一个局域网内（二层联通性）。</p><p><strong>host-gw的性能损失大约在10%左右，而其他所有基于VXLAN“隧道”机制 的网络方案，性能损失在20%~30%左右。</strong></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>《深入解析容器跨主机网络》 张磊</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Docker默认的网络模式有三种：bridge、host、none，其中想实现不同宿主机上的容器相互访问是做不到的。对应”docker跨主通信”的需求，社区里涌现了大批的方案，其中&lt;code&gt;flannel&lt;/code&gt;是用的最多也是较为简单的。&lt;/p&gt;
&lt;h1 id=&quot;F</summary>
      
    
    
    
    <category term="docker" scheme="https://slions.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://slions.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker网络</title>
    <link href="https://slions.github.io/2022/03/21/docker%E7%BD%91%E7%BB%9C/"/>
    <id>https://slions.github.io/2022/03/21/docker%E7%BD%91%E7%BB%9C/</id>
    <published>2022-03-21T14:14:19.000Z</published>
    <updated>2022-03-21T14:42:52.349Z</updated>
    
    <content type="html"><![CDATA[<a href="/2021/07/13/network-namespace%E9%9A%94%E7%A6%BB%E6%B5%8B%E8%AF%95/" title="自己动手实现network namespace">自己动手实现network namespace</a>中演示了network namespace的实现方式，network namespace可以为命名空间内的所有进程提供了全新隔离的网络协议栈。而所谓“网络栈”，就包括了：网卡（Network Interface）、回环设备（Loopback Device）、路由表（Routing Table）和 iptables 规则。对于一个进程来说，这些要素，构成了它发起和响应网络请求的基本环境。<p>作为一个容器，它可以声明直接使用宿主机的网络栈（–net=host），即：不开启 Network Namespace，比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run –d –net=host --name nginx-host nginx</span></span><br></pre></td></tr></table></figure><p>直接使用主机网络模式虽然可以为容器提供良好的网络性能，但会引入共享网络资源的问题，比如端口冲突。所以，在大多数情况下，我们都希望容器进程能使用自己 Network Namespace 里的网络栈，即：拥有属于自己的 IP 地址和端口。</p><p>如何让隔离的容器进程跟其他 Network Namespace 里的容器进程进行交互呢？Linux 中可以通过虚拟网桥实现，docker中也是通过“网桥”实现的。</p><h1 id="Docker-Bridge"><a href="#Docker-Bridge" class="headerlink" title="Docker Bridge"></a>Docker Bridge</h1><p>当 Docker 启动时，会自动在主机上创建一个 docker0 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。</p><p>创建一个 Docker 容器的时候，同时会创建了一对 veth pair 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 eth0 ；另一端在本地并被挂载到docker0 网桥，名称以 veth 开头（例如vethAQI)。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。</p><p><img src="https://slions.gitee.io/picbed/img/dn1.png"></p><p>brctl show查看当前的网桥：</p><p><img src="https://slions.gitee.io/picbed/img/dn2.png"></p><p>上面显示中的接口是由对应的桥提供网络流转的，在宿主机上也可以看出只有bridge拥有ip地址，而挂在bridge上的vethxxx则没有ip。</p><p><img src="https://slions.gitee.io/picbed/img/dn3.png"></p><h1 id="网络流转拓扑"><a href="#网络流转拓扑" class="headerlink" title="网络流转拓扑"></a>网络流转拓扑</h1><p><img src="https://slions.gitee.io/picbed/img/dn4.png"></p><h2 id="容器与宿主机通信"><a href="#容器与宿主机通信" class="headerlink" title="容器与宿主机通信"></a>容器与宿主机通信</h2><p>在桥接模式下，Docker Daemon 将 veth0 附加到 docker0 网桥上，保证宿主机的报文有能力发往 veth0。再将 veth1 添加到 Docker 容器所属的网络命名空间，保证宿主机的网络报文若发往 veth0 可以立即被 veth1 收到。</p><h2 id="容器与外界通信"><a href="#容器与外界通信" class="headerlink" title="容器与外界通信"></a>容器与外界通信</h2><p>容器如果需要联网，则需要采用 NAT 方式。准确的说，是 NATP (网络地址端口转换) 方式。NATP 包含两种转换方式：SNAT 和 DNAT 。</p><h3 id="外部访问容器"><a href="#外部访问容器" class="headerlink" title="外部访问容器"></a>外部访问容器</h3><blockquote><p>目的 NAT (Destination NAT，DNAT): 修改数据包的目的地址。</p></blockquote><p>当宿主机以外的世界需要访问容器时，数据包的流向如下图所示：</p><p><img src="https://slions.gitee.io/picbed/img/dn5.png"></p><p>由于容器的 IP 与端口对外都是不可见的，所以数据包的目的地址为宿主机的 ip 和端口，为 192.168.1.10:24 。</p><p>数据包经过路由器发给宿主机 eth0，再经 eth0 转发给 docker0 网桥。由于存在 DNAT 规则，会将数据包的目的地址转换为容器的 ip 和端口，为 172.17.0.n:24 。</p><p>宿主机上的 docker0 网桥识别到容器 ip 和端口，于是将数据包发送附加到 docker0 网桥上的 veth0 接口，veth0 接口再将数据包发送给容器内部的 veth1 接口，容器接收数据包并作出响应。</p><p><img src="https://slions.gitee.io/picbed/img/dn6.png"></p><h3 id="容器访问外部"><a href="#容器访问外部" class="headerlink" title="容器访问外部"></a>容器访问外部</h3><blockquote><p>目的 NAT (Destination NAT，DNAT): 修改数据包的目的地址。</p></blockquote><p>当容器需要访问宿主机以外的世界时，数据包的流向为下图所示：</p><p><img src="https://slions.gitee.io/picbed/img/dn7.png"></p><p>此时数据包的源地址为容器的 ip 和端口，为 172.17.0.n:24，容器内部的 veth1 接口将数据包发往 veth0 接口，到达 docker0 网桥。</p><p>宿主机上的 docker0 网桥发现数据包的目的地址为外界的 IP 和端口，便会将数据包转发给 eth0 ，并从 eth0 发出去。由于存在 SNAT 规则，会将数据包的源地址转换为宿主机的 ip 和端口，为 192.168.1.10:24 。</p><p>由于路由器可以识别到宿主机的 ip 地址，所以再将数据包转发给外界，外界接受数据包并作出响应。这时候，在外界看来，这个数据包就是从 192.168.1.10:24 上发出来的，Docker 容器对外是不可见的。</p><p><img src="https://slions.gitee.io/picbed/img/dn8.png"></p><p>docker0 之所以能将对外报文转发到eth0，是因为在一个主机内，通过路由表规则进行转发，在主机内docker0可以reach到eth0所对应的IP。</p><p>当进行端口映射的时候我们可以查看到宿主机中多了一个进程，这就是前面所说的docker-proxy，每增加一个端口映射，宿主机就会多出一个docker-proxy进程，当其他的人访问这个主机的时候，docker-proxy就会自动找到对应容器的端口。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://blog.daocloud.io/4896.html">http://blog.daocloud.io/4896.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;a href=&quot;/2021/07/13/network-namespace%E9%9A%94%E7%A6%BB%E6%B5%8B%E8%AF%95/&quot; title=&quot;自己动手实现network namespace&quot;&gt;自己动手实现network namespace&lt;/a&gt;中演示了</summary>
      
    
    
    
    <category term="docker" scheme="https://slions.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://slions.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>ARP</title>
    <link href="https://slions.github.io/2022/03/20/ARP/"/>
    <id>https://slions.github.io/2022/03/20/ARP/</id>
    <published>2022-03-20T08:14:39.000Z</published>
    <updated>2022-03-20T08:35:25.539Z</updated>
    
    <content type="html"><![CDATA[<p><strong>地址解析协议</strong>（Address Resolution Protocol），其基本功能为透过目标设备的IP地址，查询目标设备的MAC地址，以保证通信的顺利进行。它是IPv4中网络层必不可少的协议，不过在IPv6中已不再适用，并被邻居发现协议（NDP）所替代。</p><h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><p>假设主机A和B在同一个网段，主机A要向主机B发送信息，具体的地址解析过程如下：</p><ol><li>主机A首先查看自己的ARP表，确定其中是否包含有主机B对应的ARP表项。如果找到了对应的MAC地址，则主机A直接利用ARP表中的MAC地址，对IP数据包进行帧封装，并将数据包发送给主机B。</li><li>如果主机A在ARP表中找不到对应的MAC地址，<strong>则将缓存该数据报文</strong>，然后以广播方式发送一个ARP请求报文。ARP请求报文中的发送端IP地址和发送端MAC地址为主机A的IP地址和MAC地址，目标IP地址和目标MAC地址为主机B的IP地址和ff-ff-ff-ff-ff-ff的MAC地址。由于ARP请求报文以<strong>广播方式</strong>发送，该网段上的所有主机都可以接收到该请求，但只有被请求的主机（即主机B）会对该请求进行处理。</li><li>主机B比较自己的IP地址和ARP请求报文中的目标IP地址，当两者相同时进行如下处理：将ARP请求报文中的发送端（即主机A）的IP地址和MAC地址存入自己的ARP表中。之后以<strong>单播方式</strong>发送ARP响应报文给主机A，其中包含了自己的MAC地址。</li><li>主机A收到ARP响应报文后，<strong>将主机B的MAC地址加入到自己的ARP表中以用于后续报文的转发</strong>，同时将IP数据包进行封装后发送出去。</li></ol><h1 id="ARP报文"><a href="#ARP报文" class="headerlink" title="ARP报文"></a>ARP报文</h1><img src="https://gitee.com/Slions/picbed/raw/master/img/arp1.png"/><p>一般说以太网地址就是指MAC地址。</p><ul><li>字段1是ARP请求的目的以太网地址，全1时代表广播地址。</li><li>字段2是发送ARP请求的以太网地址。</li><li>字段3以太网帧类型表示的是后面的数据类型，ARP请求和ARP应答这个值为0x0806。</li><li>字段4表示硬件地址的类型，硬件地址不只以太网一种，是以太网类型时此值为1。</li><li>字段5表示要映射的协议地址的类型，要对IPv4地址进行映射，此值为0x0800。</li><li>字段6和7表示硬件地址长度和协议地址长度，MAC地址占6字节，IP地址占4字节。</li><li>字段8是操作类型字段，值为1，表示进行ARP请求；值为2，表示进行ARP应答；值，表示进行RARP请求；值为4，表示进行RARP应答。</li><li>字段9是发送端ARP请求或应答的硬件地址，这里是以太网地址，和字段2相同。</li><li>字段10是发送ARP请求或应答的IP地址。</li><li>字段11和12是目的端的硬件地址和协议地址。</li></ul><p>图中红框圈起来的是一对ARP请求和ARP应答。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/arp2.png"/><h2 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h2><img src="https://gitee.com/Slions/picbed/raw/master/img/arp3.png"/><h2 id="应答报文"><a href="#应答报文" class="headerlink" title="应答报文"></a>应答报文</h2><p>ARP应答分组中，将ARP请求中的源和目的地址进行交换，此外，变化的还有字段8 Opcode。其余字段内容不会发生变化。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/arp4.png"/><h1 id="ARP表"><a href="#ARP表" class="headerlink" title="ARP表"></a>ARP表</h1><p>设备通过ARP解析到目的MAC地址后，将会在自己的ARP表中增加IP地址到MAC地址的映射表项，以用于后续到同一目的地报文的转发。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/arp5.png"/><h2 id="动态ARP表"><a href="#动态ARP表" class="headerlink" title="动态ARP表"></a>动态ARP表</h2><p>动态ARP表项由ARP协议通过ARP报文自动生成和维护，可以被老化，可以被新的ARP报文更新，可以被静态ARP表项覆盖。当到达老化时间、接口down时会删除相应的动态ARP表项。</p><h2 id="静态ARP表"><a href="#静态ARP表" class="headerlink" title="静态ARP表"></a>静态ARP表</h2><p>静态ARP表项通过手工配置和维护，不会被老化，不会被动态ARP表项覆盖。</p><p><strong>配置静态ARP表项可以增加通信的安全性</strong>。静态ARP表项可以限制和指定IP地址的设备通信时只使用指定的MAC地址，此时攻击报文无法修改此表项的IP地址和MAC地址的映射关系，从而保护了本设备和指定设备间的正常通信。</p><h1 id="免费ARP"><a href="#免费ARP" class="headerlink" title="免费ARP"></a>免费ARP</h1><p>免费ARP指主机发送ARP查找自己的IP地址，通常发生在系统引导期间进行接口配置时。与标准ARP的区别就是免费ARP分组的目的IP地址字段封装的是自己的IP地址，即向所在网络请求自己的MAC地址。</p><p>免费ARP的作用有：</p><ol><li>一个主机可以通过它来确定另一个主机是否设置了相同的 IP地址。</li></ol><p>正常情况下发送免费ARP请求不会收到ARP应答，如果收到了一个ARP应答，则说明网络中存在与本机相同的IP地址的主机，发生了地址冲突。</p><ol start="2"><li>   更新其他主机高速缓存中旧的硬件地址信息。</li></ol><p>如果发送免费ARP的主机正好改变了硬件地址，如更换了接口卡。<br>其他主机接收到这个ARP请求的时候，发现自己的ARP高速缓存表中存在对应的IP地址，但是MAC地址不匹配，那么就需要利用接收的ARP请求来更新本地的ARP高速缓存表表项。</p><ol start="3"><li>网关利用免费ARP防止ARP攻击</li></ol><p>有些网关设备在一定的时间间隔内向网络主动发送免费ARP报文，让网络内的其他主机更新ARP表项中的网关MAC地址信息，以达到防止或缓解ARP攻击的效果。</p><ol start="4"><li>利用免费ARP进行ARP攻击</li></ol><p>ARP协议并不只在发送了ARP请求才接收ARP应答，计算机只要接收到ARP应答数据包，就会使用应答中的IP和MAC地址对本地的ARP缓存进行更新。<br>主机可以构造虚假的免费ARP应答，将ARP的源MAC地址设为错误的MAC地址，并把这个虚假的免费ARP应答发送到网络中，那么所有接收到这个免费ARP应答的主机都会更新本地ARP表项中相应IP地址对应的MAC地址。更新成功后，这些主机的数据报文就会被转发到错误的MAC地址，从而实现了ARP欺骗的攻击。</p><h1 id="代理ARP"><a href="#代理ARP" class="headerlink" title="代理ARP"></a>代理ARP</h1><p>代理ARP就是通过使用一个主机(通常为router)，来作为指定的设备使用自己的 MAC 地址来对另一设备的ARP请求作出应答。</p><p>为什么需要代理ARP？</p><p>先要了解，路由器的重要功能之一就是把局域网的广播包限制在该网内，阻止其扩散，否则会造成网络风暴。</p><p>ARP请求是个广播包，它询问的对象如果在同一个局域网内，就会收到应答。但是如果询问的对象不在同一个局域网该如何处理？路由器就提供了代理ARP为这个问题提供了解决方案。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/arp6.png"/><p>两台主机A和B处于同一网段但不同的广播段（不在同一物理网络上）时，主机A发送ARP请求主机B的MAC地址时，因为路由器不转发广播包的原因，ARP请求只能到达路由器。如果路由器启用了代理ARP功能，并知道主机B属于它连接的网络，那么路由器就用自己接口的MAC地址代替主机B的MAC地址来对主机A进行ARP应答。主机A接收ARP应答，但并不知道代理ARP的存在。</p><p>代理ARP的<strong>优缺点</strong></p><p><strong>优点</strong>：代理ARP能在不影响路由表的情况下添加一个新的Router，使子网对该主机变得透明化。一般代理ARP应该使用在主机没有配置默认网关或没有任何路由策略的网络上。</p><p><strong>缺点</strong>：从工作工程可以看到，这其实是一种ARP欺骗。而且，通过两个物理网络之间的路由器的代理ARP功能其实互相隐藏了物理网络，这导致无法对网络拓扑进行网络概括。此外，代理ARP增加了使用它的那段网络的ARP流量，主机需要更大的ARP缓存空间，也不会为不使用ARP进行地址解析的网络工作。</p><h1 id="ARP攻击"><a href="#ARP攻击" class="headerlink" title="ARP攻击"></a>ARP攻击</h1><p>我们知道，当PC1对PC2正常通信的时候（先别管攻击者PC3），PC2、PC1会先后建立对方的IP和MAC地址的映射（即建立ARP缓存表），同时对于交换机而言，它也具有记忆功能，会基于源MAC地址建立一个CAM缓存表（记录MAC对应接口的信息），理解为当PC1发送消息至交换机的Port1时，交换机会把源MAC（也就是MAC1）记录下来，添加一条MAC1和Port1的映射，之后交换机可以根据MAC帧的目的MAC进行端口转发，这个时候PC3只是处于监听状态，会把PC1的广播丢弃。</p><p>正常的PC3会把广播包丢弃，同样的PC3可以抓住这一环节的漏洞，把不属于自己的广播包接收，同时回应一个虚假的回应包，告诉PC1我就是PC2</p><p>（IP2-MAC3），这样PC1会收到两个回应包（一个正确的IP2-MAC2，一个虚假的IP2-MAC3），但是PC1并不知道到底哪个是真的，所以PC1会做出判断，并且判断后到达的为真，那么怎么让虚假的回应包后到达呢，PC3可以连续不断的发送这样的回应包，总会把哪个正确的回应包覆盖掉。</p><p>而后PC1会建立IP2-MAC3这样一条ARP缓存条目，以后当PC1给PC2发送信息的时候，PC1依据OSI模型从上至下在网络层给数据封装目的IP为IP2的包头，在链路层通过查询ARP缓存表封装目的MAC为MAC3的数据帧，送至交换机，根据查询CAM表，发现MAC3对应的接口为Port3，就这样把信息交付到了PC3，完成了一次ARP攻击。</p><p>一般情况下，受到ARP攻击的计算机会出现两种现象：</p><ol><li>不断弹出“本机的XXX段硬件地址与网络中的XXX段地址冲突”的对话框。</li><li>计算机不能正常上网，出现网络中断的症状。</li></ol><p>因为这种攻击是利用ARP请求报文进行“欺骗”的，所以防火墙会误以为是正常的请求数据包，不予拦截。因此普通的防火墙很难抵挡这种攻击。</p><h1 id="ARP老化时间"><a href="#ARP老化时间" class="headerlink" title="ARP老化时间"></a>ARP老化时间</h1><img src="https://gitee.com/Slions/picbed/raw/master/img/arp7.png"/><h1 id="命令解析"><a href="#命令解析" class="headerlink" title="命令解析"></a>命令解析</h1><p>arp指令用来管理系统的arp缓冲区，可以显示、删除、添加静态mac地址。ARP以各种方式操纵内核的ARP缓存。主要选项是清除地址映射项并手动设置。为了调试目的，ARP程序还允许对ARP缓存进行完全转储。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-v          显示详细信息--verbose；</span><br><span class="line">-n          以数字地址形式显示；</span><br><span class="line">-i          If选择界面；</span><br><span class="line">-H          type设置和查询arp缓存时检查 type 类型的地址；</span><br><span class="line">-a          [hostname]  显示指定 hostname 的所有入口；</span><br><span class="line">-d          hostname  删除指定 hostname 的所有入口；</span><br><span class="line">-D          使用ifa硬件地址界面；</span><br><span class="line">-s          hostname hw_addr  手工加入 hostname 的地址映射；</span><br><span class="line">-f          filename  从指定文件中读入 hostname 和硬件地址信息</span><br></pre></td></tr></table></figure><p><strong>常用示例</strong>：</p><p>添加静态映射：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp -i eth0 -s 192.168.1.6 ff:ee:ee:ee:ee:ee</span><br></pre></td></tr></table></figure><p>以数字方式显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arp -vn</span><br><span class="line">Address                  HWtype  HWaddress          Flags Mask            Iface</span><br><span class="line">10.0.2.2                 ether   52:54:00:12:35:02   C                     eth0</span><br><span class="line">192.168.1.6              ether   ff:ee:ee:ee:ee:ee   CM                    eth0</span><br></pre></td></tr></table></figure><p>删除一个arp表项，这里，删除之后只是硬件地址没有了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp -d 10.1.10.118</span><br></pre></td></tr></table></figure><p>指定回复的MAC地址，当eth0收到IP地址为10.0.0.2的请求时，将会用eth1的MAC地址回答。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp -i eth0 -Ds 10.0.0.2 eth1 pub</span><br></pre></td></tr></table></figure><blockquote><p>以上输出结果中用”C”表示ARP缓存内容，”M”表示永久性表项，”P”表示公共的表项。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;地址解析协议&lt;/strong&gt;（Address Resolution Protocol），其基本功能为透过目标设备的IP地址，查询目标设备的MAC地址，以保证通信的顺利进行。它是IPv4中网络层必不可少的协议，不过在IPv6中已不再适用，并被邻居发现协议（N</summary>
      
    
    
    
    <category term="Network" scheme="https://slions.github.io/categories/Network/"/>
    
    
    <category term="Network" scheme="https://slions.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>排查是否存在ip地址占用现象</title>
    <link href="https://slions.github.io/2022/03/20/%E6%8E%92%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8ip%E5%9C%B0%E5%9D%80%E5%8D%A0%E7%94%A8%E7%8E%B0%E8%B1%A1/"/>
    <id>https://slions.github.io/2022/03/20/%E6%8E%92%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8ip%E5%9C%B0%E5%9D%80%E5%8D%A0%E7%94%A8%E7%8E%B0%E8%B1%A1/</id>
    <published>2022-03-20T05:39:11.000Z</published>
    <updated>2022-03-20T07:41:56.088Z</updated>
    
    <content type="html"><![CDATA[<p>arping干嘛用的？</p><p>arping主要干的活就是查看ip的MAC地址及IP占用的问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-A ARP回复模式，更新邻居</span><br><span class="line">-b 保持广播</span><br><span class="line">-D 复制地址检测模式</span><br><span class="line">-f 得到第一个回复就 退出</span><br><span class="line">-q 不显示警告信息</span><br><span class="line">-U 主动的ARP模式，更新邻居</span><br><span class="line">-c&lt;数据包的数目&gt; 发送的数据包的数目</span><br><span class="line">-w&lt;超时时间&gt; 设置超时时间</span><br><span class="line">-I&lt;网卡&gt; 使用指定的以太网设备，默认情况下使用eth0</span><br><span class="line">-s 指定源IP地址</span><br><span class="line">-h 显示帮助信息</span><br><span class="line">-V 显示版本信息</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arping -I eth1 -c 3 -f -D 172.x.x.x</span><br></pre></td></tr></table></figure><img src="https://gitee.com/Slions/picbed/raw/master/img/ipp1.png"/><p>Received 0 response(s)   说明这个IP地址没有被局域网占用</p><p>Received 1 response(s)   已被占用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;arping干嘛用的？&lt;/p&gt;
&lt;p&gt;arping主要干的活就是查看ip的MAC地址及IP占用的问题。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    <category term="Network" scheme="https://slions.github.io/categories/Network/"/>
    
    
    <category term="Network" scheme="https://slions.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>改变系统默认dns解析顺序</title>
    <link href="https://slions.github.io/2022/03/20/%E6%94%B9%E5%8F%98%E7%B3%BB%E7%BB%9F%E9%BB%98%E8%AE%A4dns%E8%A7%A3%E6%9E%90%E9%A1%BA%E5%BA%8F/"/>
    <id>https://slions.github.io/2022/03/20/%E6%94%B9%E5%8F%98%E7%B3%BB%E7%BB%9F%E9%BB%98%E8%AE%A4dns%E8%A7%A3%E6%9E%90%E9%A1%BA%E5%BA%8F/</id>
    <published>2022-03-20T05:38:35.000Z</published>
    <updated>2022-03-20T06:56:02.647Z</updated>
    
    <content type="html"><![CDATA[<p>linux中，往往解析一个域名时，先会找/etc/hosts文件，如果/etc/hosts文件没有对应，才会去找DNS，如何让主机先找DNS呢？</p><p>在<code>/etc/nsswitch.conf</code>这个文件里定义:</p><p>编辑<code>/etc/nsswitch.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hosts:   files dns   //找到这段，改成下面这样</span><br><span class="line">hosts:   dns files</span><br></pre></td></tr></table></figure><p>其中dns代表/etc/resolv.conf，files代表/etc/hosts，这样，主机就会先去找DNS，再去找hosts。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;linux中，往往解析一个域名时，先会找/etc/hosts文件，如果/etc/hosts文件没有对应，才会去找DNS，如何让主机先找DNS呢？&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;/etc/nsswitch.conf&lt;/code&gt;这个文件里定义:&lt;/p&gt;
&lt;p&gt;编辑&lt;code&gt;/</summary>
      
    
    
    
    <category term="Network" scheme="https://slions.github.io/categories/Network/"/>
    
    
    <category term="Network" scheme="https://slions.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>查看端口被占用的四种方式</title>
    <link href="https://slions.github.io/2022/03/20/%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://slions.github.io/2022/03/20/%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2022-03-20T05:38:16.000Z</published>
    <updated>2022-03-20T06:53:04.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="netstat-anlp或ss"><a href="#netstat-anlp或ss" class="headerlink" title="netstat -anlp或ss"></a>netstat -anlp或ss</h1><img src="https://gitee.com/Slions/picbed/raw/master/img/s1.png"/><h1 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h1><img src="https://gitee.com/Slions/picbed/raw/master/img/s2.png"/><h1 id="fuser"><a href="#fuser" class="headerlink" title="fuser"></a>fuser</h1><img src="https://gitee.com/Slions/picbed/raw/master/img/s3.png"/><h1 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h1><img src="https://gitee.com/Slions/picbed/raw/master/img/s4.png"/>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;netstat-anlp或ss&quot;&gt;&lt;a href=&quot;#netstat-anlp或ss&quot; class=&quot;headerlink&quot; title=&quot;netstat -anlp或ss&quot;&gt;&lt;/a&gt;netstat -anlp或ss&lt;/h1&gt;&lt;img src=&quot;https://g</summary>
      
    
    
    
    <category term="Network" scheme="https://slions.github.io/categories/Network/"/>
    
    
    <category term="Network" scheme="https://slions.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>RARP</title>
    <link href="https://slions.github.io/2022/03/20/RARP/"/>
    <id>https://slions.github.io/2022/03/20/RARP/</id>
    <published>2022-03-20T05:37:49.000Z</published>
    <updated>2022-03-20T06:49:58.449Z</updated>
    
    <content type="html"><![CDATA[<p><strong>反向地址转换</strong>协议简称RARP。</p><p>RARP是许多无盘系统在引导时用来获取IP地址的。RARP实现起来要比ARP复杂，因为RARP请求是在硬件层上广播的。这意味着他们不经过路由器进行转发。为了能让无盘系统在RARP关机的情况下也能引导，通常要在一个网络上（一根电缆）提供多个RARP服务器。</p><p>允许局域网的物理机器从网关服务器的 ARP 表或者缓存上请求其 IP 地址。网络管理员在局域网网关路由器里创建一个表以映射物理地址（MAC）和与其对应的 IP 地址。</p><p>当设置一台新的机器时，其 RARP 客户机程序需要向路由器上的 RARP 服务器请求相应的 IP 地址。假设在路由表中已经设置了一个记录，RARP 服务器将会返回 IP 地址给机器，此机器就会存储起来以便日后使用。 RARP 可以使用于以太网、光纤分布式数据接口及令牌环 LAN。</p><h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><ol><li>发送主机发送一个本地的RARP广播，在此广播包中，声明自己的MAC地址并且请求任何收到此请求的RARP服务器分配一个IP地址；</li><li>本地网段上的RARP服务器收到此请求后，检查其RARP列表，查找该MAC地址对应的IP地址；</li><li>如果存在，RARP服务器就给源主机发送一个响应数据包并将此IP地址提供给对方主机使用；</li><li>如果不存在，RARP服务器对此不做任何的响应；</li><li>源主机收到从RARP服务器的响应信息，就利用得到的IP地址进行通讯；如果一直没有收到RARP服务器的响应信息，表示初始化失败。</li></ol><blockquote><p>如果在第1-3中被ARP病毒攻击，则服务器做出的反映就会被占用，源主机同样得不到RARP服务器的响应信息，此时并不是服务器没有响应而是服务器返回的源主机的IP被占用。</p></blockquote><p>发送的是广播包，所以，正常情况下，如果多个服务器都对该广播服务，那冲突是不可避免的。</p><p><strong>解决策略</strong></p><p>方法一：所有服务器分配的IP地址一样<br>方法二：再一个局域网里为什么存在多个服务器，可以只保留一个<br>方法三：通过VLAN进行控制</p><p>是可以设置一个服务器为主服务器，收到请求后立即应答，其他的在收到后延时应答，或者在多次收到同样的请求的时候才应答，此时说明可能住服务器关机了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;反向地址转换&lt;/strong&gt;协议简称RARP。&lt;/p&gt;
&lt;p&gt;RARP是许多无盘系统在引导时用来获取IP地址的。RARP实现起来要比ARP复杂，因为RARP请求是在硬件层上广播的。这意味着他们不经过路由器进行转发。为了能让无盘系统在RARP关机的情况下也能</summary>
      
    
    
    
    <category term="Network" scheme="https://slions.github.io/categories/Network/"/>
    
    
    <category term="Network" scheme="https://slions.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>ping和traceroute</title>
    <link href="https://slions.github.io/2022/03/20/ping%E5%92%8Ctraceroute/"/>
    <id>https://slions.github.io/2022/03/20/ping%E5%92%8Ctraceroute/</id>
    <published>2022-03-20T05:37:38.000Z</published>
    <updated>2022-03-20T08:07:44.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h1><p>ping 程序的主要目的是测试主机是否可达，它发送 ICMP 回显请求报文给目的主机，返回 ICMP 回显应答。</p><h2 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h2><p>ping 程序一般会周期性持续地发送 ICMP 请求报文，除非用户手动终止，或指定了发包个数，回显请求和回显应答通过序列号（icmp_seq）进行匹配，下图中序列号依次为 1、2、..</p><p>ping 程序通过数据报中记录的发送请求时间值和接收到回显应答报文的当前时间值，计算往返耗时（time）</p><img src="https://gitee.com/Slions/picbed/raw/master/img/ping1.png"/><blockquote><p>为什么 ping 第一次一般会产生更多耗时：</p><p> 因为 ping 第一次的时候，需要首先进行 ARP 解析，获取 IP 地址对应的 MAC 地址（同时将映射关系缓存），</p><p> 而下次 ping 的时候会直接从 ARP 高速缓存读取，少了一个步骤，自然时间就缩短了。</p></blockquote><h2 id="ping报文"><a href="#ping报文" class="headerlink" title="ping报文"></a>ping报文</h2><p>Request的报文类型为8。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/ping2.png"/><p>Reply的类型为0。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/ping3.png"/><p>通过具体的ping报文可以看到ping报文的大小为84字节。其中ICMP报文56个字节，再加上20个字节的IP首部和8个字节的ICMP首部。因此IP报文的总长度为84字节。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/ping4.png"/><p>可以改变ICMP的报文大小，通过-s命令， 将ICMP报文大小设置为32字节。加上20字节的IP首部以及8字节的ICMP首部，总共60个字节。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/ping5.png"/><p>Ping程序中还可以通过设置ping的次数，通过-c。在ping了3次以后，ping程序自动停止。</p><h2 id="IP记录路由选项"><a href="#IP记录路由选项" class="headerlink" title="IP记录路由选项"></a>IP记录路由选项</h2><p>ping程序还可以记录所经过路径的IP地址。这个通过-R的方法来实现。Ping程序在发送出去的IP数据报中设置IP RR选项。这样每个处理该数据报的路由器都把它的IP地址放入选项字段中。当数据包达到目的端时，IP地址清单就复制到ICMP回显应答中。当ping程序收到回显应答时，它就打印出这份IP地址清单。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/ping6.png"/><p><strong>弊端：</strong></p><p>由于IP首部中的首部长度字段只有4bit，因此IP首部最长只能包含15个32bit的字=60字节。IP首部为20个字节。RR选项用去3个字节。这样只剩下37个字节来存放IP地址清单，一个IP地址为4个字节，因此最大也就只能存放9个IP地址。在当前的互联网场景下，9个IP地址太少了。一般情况下都满足不了要求。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/ping7.png"/><h1 id="Traceroute"><a href="#Traceroute" class="headerlink" title="Traceroute"></a>Traceroute</h1><p>前面讲到IP可以记录路由选项。但是IP首部中留给选项空间有限，不可能存放太多的路径，最多只能存放9个地址，对于现在的网络来说远远不够，那么如果我们想探究网络路径可以用traceroute命令。</p><h2 id="工作机制-1"><a href="#工作机制-1" class="headerlink" title="工作机制"></a>工作机制</h2><p>通过封装一份 UDP 数据报（指定一个不可能使用的端口，30000以上），依次将数据报的 TTL 值置为 1、2、3…，并发送给目的主机。</p><ol><li>当路径上第一个路由器收到 TTL 值为 1 的数据报时，首先将该数据报的 TTL 值减 1，发现 TTL 值为 0，而自己并非该数据报的目的主机，就会向源主机发送一个 ICMP 超时报文，traceroute 收到该超时报文，就得到了路径上第一台路由器的地址；</li><li>然后照此原理，traceroute 发送 TTL 为 2 的数据报时，会收到路径上第二台路由器返回的 ICMP 超时报文，记录第二台路由器的地址；</li><li>直到报文到达目的主机，目的主机不会返回 ICMP 超时，但由于端口无法使用，就会返回一份端口不可达报文给源主机，源主机收到端口不可达报文，证明数据报已经到达了目的地，停止后续的 UDP 数据报发送，将记录的路径依次打印出来，使命完成，结束任务。</li></ol><img src="https://gitee.com/Slions/picbed/raw/master/img/traceroute1.png"/><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>Windows下使用的是ICMP报文，而linux下使用的是UDP报文。</p><p>首先来看windows的报文。从报文中可以看出ttl不断的在增长。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/traceroute2.png"/><p>而且主机发出的报文全都是ICMP报文。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/traceroute3.png"/><p>Linux下的报文可以看到主机发出的报文都是UDP报文，而且每个报文都带有一个目的端口，端口每次都在增长。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/traceroute4.png"/><p>带的是一个UDP报文，而非ICMP报文</p><img src="https://gitee.com/Slions/picbed/raw/master/img/traceroute5.png"/><p>但是从对端反馈回的报文都是ICMP报文。且最终目的地址反馈一个port unreachable的报文。这个端口不可达的报文在windows系统中并没有找到。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/traceroute6.png"/><p>从上面的报文对比可以看到windows下和linux下的traceroute报文是不一样的。Windows下是纯粹使用ICMP报文。直到找到目的地址，并记录经过的路径。</p><p>而linux下是发出一个UDP报文。且同样也设置TTL时长，但选择一个不可能的值作为UDP端口(大于30000),使目的主机的任何一个应用程序都不可能使用这个端口。最终目的主机会产生一份端口不可达的错误。此时就判断结束。具体流程参考下图</p><img src="https://gitee.com/Slions/picbed/raw/master/img/traceroute7.png"/><h2 id="命令输出解析"><a href="#命令输出解析" class="headerlink" title="命令输出解析"></a>命令输出解析</h2><img src="https://gitee.com/Slions/picbed/raw/master/img/traceroute9.png"/><p>记录按序列号从1开始，每个纪录就是一跳 ，每跳表示一个网关，我们看到每行有三个时间，单位是 ms，其实就是-q的默认参数。探测数据包向每个网关发送三个数据包后，网关响应后返回的时间；如果您用 traceroute -q 4 <a href="http://www.123.com/">www.123.com</a> ，表示向每个网关发送4个数据包。</p><h2 id="traceroute约束与缺陷"><a href="#traceroute约束与缺陷" class="headerlink" title="traceroute约束与缺陷"></a>traceroute约束与缺陷</h2><h3 id="约束："><a href="#约束：" class="headerlink" title="约束："></a>约束：</h3><ol><li>不能保证现在的路由也是将来所要采用的路由，甚至两份连续的 IP 数据报都可能采用不同的路由；</li><li>不能保证 ICMP 报文的路由与 traceoute 程序发送的 UDP 数据报采用同一路由，时间测量可能不准；</li><li>返回的 ICMP 报文中的信源 IP 地址是 UDP 数据报到达的路由器接口的 IP 地址；</li></ol><img src="https://gitee.com/Slions/picbed/raw/master/img/traceroute8.png"/><p>当从网络1某主机执行 traceroute 程序到网络3某主机，返回的路径将是 if1 和 if3 的地址；而反方向，将打印出 if4 和 if2 的地址。</p><h3 id="缺陷："><a href="#缺陷：" class="headerlink" title="缺陷："></a>缺陷：</h3><ol><li>中间路由器有可能做了限制，不返回 ICMP 超时报文，traceroute 就无法获得其地址了，只能打印出 * 或 no reply</li><li>目的主机可能由于安全原因不会向源主机返回端口不可达的 ICMP 报文，尽管探测数据报已经到达了目的主机，但 traceroute 程序收不到端口不可达报文，就仍会持续发送请求 …</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>如果在局域网中的不同网段之间，我们可以通过traceroute 来排查问题所在，是主机的问题还是网关的问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ping&quot;&gt;&lt;a href=&quot;#Ping&quot; class=&quot;headerlink&quot; title=&quot;Ping&quot;&gt;&lt;/a&gt;Ping&lt;/h1&gt;&lt;p&gt;ping 程序的主要目的是测试主机是否可达，它发送 ICMP 回显请求报文给目的主机，返回 ICMP 回显应答。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Network" scheme="https://slions.github.io/categories/Network/"/>
    
    
    <category term="Network" scheme="https://slions.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>ip选路</title>
    <link href="https://slions.github.io/2022/03/20/ip%E9%80%89%E8%B7%AF/"/>
    <id>https://slions.github.io/2022/03/20/ip%E9%80%89%E8%B7%AF/</id>
    <published>2022-03-20T05:37:09.000Z</published>
    <updated>2022-03-20T06:41:54.570Z</updated>
    
    <content type="html"><![CDATA[<p>选路是IP最重要的功能之一。需要进行选路的数据报可以由本地主机产生，也可以由其他主机产生。在后一种情况下，主机必须配置成一个路由器，否则通过网络接口接收到的数据报，如果目的地址不是本机就要被丢弃（例如，悄无声息地被丢弃）。</p><h1 id="选路原理"><a href="#选路原理" class="headerlink" title="选路原理"></a>选路原理</h1><p>ip搜索路由表的步骤：</p><ol><li>搜索匹配的主机地址；</li><li>搜索匹配的网络地址；</li><li>搜索默认表项（默认表项一般在路由表中被指定为一个网络表项，其网络号为0）。匹配主机地址步骤始终发生在匹配网络地址步骤之前。</li></ol><p>IP层进行的选路实际上是一种选路机制，它搜索路由表并决定向哪个网络接口发送分组。这区别于选路策略，它只是一组决定把哪些路由放入路由表的规则。I P执行选路机制，而路由守护程序则一般提供选路策略。</p><h1 id="简单路由表"><a href="#简单路由表" class="headerlink" title="简单路由表"></a>简单路由表</h1><p>首先来看一看一些典型的主机路由表。在主机s v r 4上，先执行带-r选项的netstat命令列出路由表，然后以-n选项再次执行该命令，以数字格式打印出I P地址（我们这样做是因为路由表中的一些表项是网络地址，而不是主机地址。如果没有- n选项，netstat命令将搜索文件/etc/networks并列出其中的网络名。这样会与另一种形式的名字—网络名加主机名相混淆）。</p><img src="https://gitee.com/Slions/picbed/raw/master/img/ip route1.png"/><p>对于一个给定的路由器，可以打印出五种不同的标志（flag)：</p><ul><li><strong>U</strong> 该路由可以使用。</li><li><strong>G</strong> 该路由是到一个网关（路由器）。如果没有设置该标志，说明目的地是直接相连的。</li><li><strong>H</strong> 该路由是到一个主机，也就是说，目的地址是一个完整的主机地址。如果没有设置该标志，说明该路由是到一个网络，而目的地址是一个网络地址：一个网络号，或者网络号与子网号的组合。</li><li><strong>D</strong> 该路由是由重定向报文创建的。</li><li><strong>M</strong> 该路由已被重定向报文修改。</li></ul><p>标志G是非常重要的，因为由它区分了间接路由和直接路由（对于直接路由来说是不设置标志G的）IP地址指明的是最终的目的地，但是链路层地址指明的是网关（即下一站路由器）。简单的说，直接路由时MAC地址和IP地址都是目的地址的MAC和IP地址；而间接路由时MAC地址为网关的MAC地址，而IP地址则还是目的IP地址。</p><p> <strong>Refcnt</strong>: 正在使用路由的活动进程个数。<br> <strong>Use</strong>: 通过该路由发送的分组数。<br> <strong>Interface</strong>: 网络接口。</p><blockquote><p><strong>基本概念</strong></p><p>一般，我们在配置好一个网络接口的时候，一个路由就被直接创建好了。当然我们也可以手动添加路由。用route add命令就可以了。</p><p>而当一个IP包在某一个路由器的时候发现没有路由可走，那么该路由器就会给源主机发送“主机不可达”或者“网络不可达”的ICMP包来报错。如果是被转发的数据报，那么就给原始发送端发送一份I C M P主机不可达的差错报文。</p><p>注意，一般的操作系统默认是没有路由功能的（不能转发数据包），这需要自己配置。</p></blockquote><h1 id="ICMP重定向差错"><a href="#ICMP重定向差错" class="headerlink" title="ICMP重定向差错"></a>ICMP重定向差错</h1><p>当I P数据报应该被发送到另一个路由器时，收到数据报的路由器就要发送I C M P重定向差</p><p>错报文给I P数据报的发送端。这在概念上是很简单的。只有当主机可以选择路由器发送分组的情况下，我们才可能看到I C M P重定向报文。</p><ol><li>我们假定主机发送一份I P数据报给R 1。这种选路决策经常发生，因为R 1是该主机的默认路由。</li><li>R1收到数据报并且检查它的路由表，发现R 2是发送该数据报的下一站。当它把数据报发送给R2时，R 1检测到它正在发送的接口与数据报到达接口是相同的（即主机和两个路由器所在的L A N）。这样就给路由器发送重定向报文给原始发送端提供了线索。</li><li>R1 发送一份I C M P重定向报文给主机，告诉它以后把数据报发送给R 2而不是R 1。</li></ol><img src="https://gitee.com/Slions/picbed/raw/master/img/ip route2.png"/><h1 id="ICMP的IP重定向报文和路由发现报文"><a href="#ICMP的IP重定向报文和路由发现报文" class="headerlink" title="ICMP的IP重定向报文和路由发现报文"></a>ICMP的IP重定向报文和路由发现报文</h1><p>当IP包在某一个地方转向的时候，都回给发送IP报的源主机一个ICMP重定向报文，而源主机就可以利用这个信息来更新自己的路由表，这样，随着网络通信的逐渐增多，路由表也就越来越完备，数据转发的速度也会越来越快。我们需要注意的是：</p><ul><li>重定向报文只能由路由器发出。</li><li>重定向报文为主机所用，而不是为路由器所用。</li></ul><p>在主机引导的时候，一般会发送在网内广播一个路由请求的ICMP报文，而多个路由器则会回应一个路由通告报文。而且，路由其本身不定期的在网络内发布路由通告报文，这样，根据这些报文，每一个主机都会有机会建立自己的路由表而实现网络通信。路由器在一份通告报文中可以通告多个地址，并且给出每一个地址的优先等级，这个优先等级是该IP作为默认路由的等级，至于怎么算的就不深究了。</p><p>路由器一般会在450-600秒的时间间隔内发布一次通告，而一个给定的通告报文的寿命是30分钟。而主机在引导的时候会每三秒发送一次请求报文，一旦接受到一个有效的通告报文，就停止发送请求报文。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;选路是IP最重要的功能之一。需要进行选路的数据报可以由本地主机产生，也可以由其他主机产生。在后一种情况下，主机必须配置成一个路由器，否则通过网络接口接收到的数据报，如果目的地址不是本机就要被丢弃（例如，悄无声息地被丢弃）。&lt;/p&gt;
&lt;h1 id=&quot;选路原理&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="Network" scheme="https://slions.github.io/categories/Network/"/>
    
    
    <category term="Network" scheme="https://slions.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>iptables</title>
    <link href="https://slions.github.io/2022/03/20/iptables/"/>
    <id>https://slions.github.io/2022/03/20/iptables/</id>
    <published>2022-03-20T05:36:59.000Z</published>
    <updated>2022-03-20T06:29:40.963Z</updated>
    
    <content type="html"><![CDATA[<p>老的系统防火墙使用的一直是iptables，centos/redhat7后默认的防火墙变为了firewalld，</p><p>iptables主要是通过四表五链对网络数据进行处理，firewalld则是通过设置zone来限制网络，firewalld与iptables不能共存，会产生不兼容的问题。</p><p>我们一般只是知道iptables，但它实际上由两个组件netfilter 和 iptables 组成。</p><p>netfilter 组件也称为内核空间（kernelspace），是内核的一部分，由一些信息包过滤表组成，这些表包含内核用来控制信息包过滤处理的规则集。</p><p>iptables 组件是一种工具，也称为用户空间（userspace），它使插入、修改和除去信息包过滤表中的规则变得容易。</p><h1 id="iptables原理"><a href="#iptables原理" class="headerlink" title="iptables原理"></a>iptables原理</h1><img src="https://gitee.com/Slions/picbed/raw/master/img/iptables0.png"/><img src="https://gitee.com/Slions/picbed/raw/master/img/iptables2.png"/><p>上图可以看出一个数据包发往本地的流向。</p><p>（1） 一个数据包进入网卡时，它首先进入PREROUTING链，内核根据数据包目的IP判断是否需要转发出去。</p><p>（2） 如果数据包就是进入本机的，它就会沿着图向下移动，到达INPUT链。数据包到了INPUT链后，任何进程都会收到它。本机上运行的程序可以发送数据包，这些数据包会经 过OUTPUT链，然后到达POSTROUTING链输出。</p><p>（3）如果数据包是要转发出去的，且内核允许转发，数据包就会如图所示向右移动，经过 FORWARD链，然后到达POSTROUTING链输出。</p><h1 id="表、链、规则"><a href="#表、链、规则" class="headerlink" title="表、链、规则"></a>表、链、规则</h1><p>表（tables）：</p><p>用来提供特定的功能</p><table><thead><tr><th align="left">table name</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">nat</td><td align="left">地址转换</td></tr><tr><td align="left">filter</td><td align="left">数据过滤</td></tr><tr><td align="left">mangle</td><td align="left">数据标记</td></tr><tr><td align="left">raw</td><td align="left">数据跟踪</td></tr></tbody></table><p>链（chains）：</p><p>数据包传播的路径，每一条链其实就是众多规则中的一个检查清单，每一条链中可以有一条或数条规则。</p><table><thead><tr><th align="left">chain name</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">PREROUTING</td><td align="left">路由前</td></tr><tr><td align="left">INPUT</td><td align="left">入站</td></tr><tr><td align="left">FORWARD</td><td align="left">转发</td></tr><tr><td align="left">OUTPUT</td><td align="left">出站</td></tr><tr><td align="left">POSTROUTING</td><td align="left">路由后</td></tr></tbody></table><p>规则（rules）：</p><p>网络管理员预定义的条件和处理方式, “如果数据包头符合这样的条件，就这样处理这个数据包”</p><p>条件包括了源ip，目的ip，传输协议和服务类型。</p><p>常见动作包含以下</p><table><thead><tr><th>action</th><th>作用</th></tr></thead><tbody><tr><td>ACCEPT</td><td>放行</td></tr><tr><td>DROP</td><td>丢弃；数据包会直接丢掉</td></tr><tr><td>REJECT</td><td>拒绝；数据包可以进入主机，但是进程都不会对其进行响应，等到超时时间到了</td></tr></tbody></table><p><strong>配置防火墙的主要工作就是添加、修改和删除这些规则。</strong></p><p><img src="https://gitee.com/Slions/picbed/raw/master/img/iptable3.png"></p><p>（1）RAW表</p><p>只使用在PREROUTING链和OUTPUT链上,因为优先级最高，从而可以对收到的数据包在连接跟踪前进行处理。</p><p>（2）filter表</p><p>Filter表是<strong>默认</strong>的表，如果没有指定哪个表，iptables 就默认使用filter表来执行所有命令，在filter表中只能允许对数据包进行接受，丢弃的操作，而无法对数据包进行更改。</p><p>（3）nat表</p><p>主要用于网络地址转换NAT，该表可以实现一对一，一对多，多对多等NAT 工作，iptables就是使用该表实现共享上网的，NAT表包含了PREROUTING链（修改即将到来的数据包），POSTROUTING链（修改即将出去的数据包），OUTPUT链（修改路由之前本地生成的数据包）</p><p>（4）mangle表</p><p>主要用于对指定数据包进行更改，在内核版本2.4.18 后的linux版本中该表包含的链为：INPUT链（处理进入的数据包），RORWARD链（处理转发的数据包），OUTPUT链（处理本地生成的数据包）POSTROUTING链（修改即将出去的数据包），PREROUTING链（修改即将到来的数据包）</p><p><strong>规则表之间的优先顺序：</strong></p><p>Raw——mangle——nat——filter</p><h1 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables [-t 表] -命令 匹配   操作</span><br></pre></td></tr></table></figure><p>表：使用 -t 指定表名</p><p>命令：规定了执行方式，包括插入规则，添加规则和删除规则。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-P  --policy        &lt;链名&gt;  定义默认策略</span><br><span class="line">-L  --list          &lt;链名&gt;  查看iptables规则列表</span><br><span class="line">-A  --append        &lt;链名&gt;  在规则列表的最后增加1条规则</span><br><span class="line">-I  --insert        &lt;链名&gt;  在指定的位置插入1条规则</span><br><span class="line">-D  --delete        &lt;链名&gt;  从规则列表中删除1条规则</span><br><span class="line">-R  --replace       &lt;链名&gt;  替换规则列表中的某条规则</span><br><span class="line">-F  --flush         &lt;链名&gt;  删除表中所有规则</span><br><span class="line">-Z  --zero          &lt;链名&gt;  将表中数据包计数器和流量计数器归零</span><br><span class="line">-X  --delete-chain  &lt;链名&gt;  删除自定义链</span><br><span class="line">-v  --verbose       &lt;链名&gt;  与-L他命令一起使用显示更多更详细的信息</span><br></pre></td></tr></table></figure><p>匹配规则：指定数据包与规则的匹配条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-i --in-interface    网络接口名&gt;     指定数据包从哪个网络接口进入，</span><br><span class="line">-o --out-interface   网络接口名&gt;     指定数据包从哪个网络接口输出</span><br><span class="line">-p ---proto          协议类型        指定数据包匹配的协议，如TCP、UDP和ICMP等</span><br><span class="line">-s --source          源地址或子网&gt;   指定数据包匹配的源地址</span><br><span class="line">   --sport           源端口号&gt;       指定数据包匹配的源端口号</span><br><span class="line">   --dport           目的端口号&gt;     指定数据包匹配的目的端口号</span><br><span class="line">-m --match           匹配的模块      指定数据包规则所使用的过滤模块</span><br></pre></td></tr></table></figure><p>iptables执行规则时，是从规则表中从上至下顺序执行的，如果没遇到匹配的规则，就一条一条往下执行，如果遇到匹配的规则后，那么就执行本规则，执行后根据本规则的动作(accept，reject，log，drop等)，决定下一步执行的情况，后续执行一般有三种情况。</p><ul><li>一种是继续执行当前规则队列内的下一条规则。</li><li>一种是中止当前规则队列的执行，转到下一条规则队列。比如从执行过accept后就中断Filter队列内其它规则，跳到nat队列规则去执行</li><li>一种是中止所有规则队列的执行。</li></ul><h1 id="规则的动作"><a href="#规则的动作" class="headerlink" title="规则的动作"></a>规则的动作</h1><p>iptables处理动作除了 ACCEPT、REJECT、DROP、REDIRECT 、MASQUERADE 以外，还多出 LOG、ULOG、DNAT、RETURN、TOS、SNAT、MIRROR、QUEUE、TTL、MARK等。其中最常用的动作说明如下：</p><p><strong>REJECT</strong> 拦阻该数据包，并返回数据包通知对方，可以返回的数据包有几个选择：ICMP port-unreachable、ICMP echo-reply 或是tcp-reset（这个数据包包会要求对方关闭联机），进行完此处理动作后，将不再比对其它规则，直接中断过滤程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A  INPUT -p TCP --dport 22 -j REJECT --reject-with ICMP echo-reply</span><br></pre></td></tr></table></figure><p><strong>DROP</strong> 丢弃数据包不予处理，进行完此处理动作后，将不再比对其它规则，直接中断过滤程序。</p><p><strong>REDIRECT</strong> 将封包重新导向到另一个端口（PNAT），进行完此处理动作后，将会继续比对其它规则。这个功能可以用来实作透明代理 或用来保护web 服务器。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT--to-ports 8081</span><br></pre></td></tr></table></figure><p><strong>MASQUERADE</strong> 改写封包来源IP为防火墙的IP，可以指定port 对应的范围，进行完此处理动作后，直接跳往下一个规则链（mangle:postrouting）。这个功能与 SNAT 略有不同，当进行IP 伪装时，不需指定要伪装成哪个 IP，IP 会从网卡直接读取。范例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -p TCP -j MASQUERADE --to-ports 21000-31000</span><br></pre></td></tr></table></figure><p><strong>LOG</strong> 将数据包相关信息纪录在 /var/log 中，详细位置请查阅 /etc/syslog.conf 配置文件，进行完此处理动作后，将会继续比对其它规则。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp -j LOG --log-prefix &quot;input packet&quot;</span><br></pre></td></tr></table></figure><p><strong>SNAT</strong> 改写封包来源 IP 为某特定 IP 或 IP 范围，可以指定 port 对应的范围，进行完此处理动作后，将直接跳往下一个规则链（mangle:postrouting）。范例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -p tcp -o eth0 -j SNAT --to-source 192.168.10.15-192.168.10.160:2100-3200 </span><br></pre></td></tr></table></figure><p><strong>DNAT</strong> 改写数据包包目的地 IP 为某特定 IP 或 IP 范围，可以指定 port 对应的范围，进行完此处理动作后，将会直接跳往下一个规则链（filter:input 或 filter:forward）。范例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp -d 15.45.23.67 --dport 80 -j DNAT --to-destination 192.168.10.1-192.168.10.10:80-100</span><br></pre></td></tr></table></figure><p><strong>MIRROR</strong> 镜像数据包，也就是将来源 IP与目的地IP对调后，将数据包返回，进行完此处理动作后，将会中断过滤程序。</p><p><strong>MARK</strong> 将封包标上某个代号，以便提供作为后续过滤的条件判断依据，进行完此处理动作后，将会继续比对其它规则。范例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t mangle -A PREROUTING -p tcp --dport 22 -j MARK --set-mark 22</span><br></pre></td></tr></table></figure><h1 id="保存规则"><a href="#保存规则" class="headerlink" title="保存规则"></a>保存规则</h1><p>使用iptables创建了规则会存在内存中，当重启iptables时即失效，可以通过以下两种方式来持久化保存所创建的规则。</p><ul><li>RHEL和ceontos系统可以使用service iptables save将当前内存中的规则保存到/etc/sysconfig/iptables文件中</li><li>修改/etc/sysconfig/iptables-config 将里面的IPTABLES_SAVE_ON_STOP=”no”, 这一句的”no”改为”yes”这样每次服务在停止之前会自动将现有的规则保存在 /etc/sysconfig/iptables 这个文件中去。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;老的系统防火墙使用的一直是iptables，centos/redhat7后默认的防火墙变为了firewalld，&lt;/p&gt;
&lt;p&gt;iptables主要是通过四表五链对网络数据进行处理，firewalld则是通过设置zone来限制网络，firewalld与iptables不能共</summary>
      
    
    
    
    <category term="Network" scheme="https://slions.github.io/categories/Network/"/>
    
    
    <category term="Network" scheme="https://slions.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>k8s部署EFK</title>
    <link href="https://slions.github.io/2021/12/27/k8s%E9%83%A8%E7%BD%B2EFK/"/>
    <id>https://slions.github.io/2021/12/27/k8s%E9%83%A8%E7%BD%B2EFK/</id>
    <published>2021-12-27T07:12:53.000Z</published>
    <updated>2021-12-28T06:27:51.667Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>EFK架构分别代表Elasticsearch、Filebeat、Kibana。</p><p>下面所验证的是通过filebeat来收集pods的控制台日志，通过es来检索存储收集到的日志，通过kibana来进行图形化的展示。</p></blockquote><h1 id="环境描述"><a href="#环境描述" class="headerlink" title="环境描述"></a>环境描述</h1><table><thead><tr><th><strong>主机名</strong></th><th>ip地址</th><th><strong>系统环境</strong></th><th>系统版本</th><th>内核版本</th></tr></thead><tbody><tr><td>slions-pc1</td><td>192.168.100.10</td><td>cpu:x4  mem:8GB  filesystem:40GB</td><td>CentOS  7.6.1810</td><td>3.10.0-957.el7.x86_64</td></tr></tbody></table><p><code>kubernetes version</code>: <code>1.19.0</code></p><p><code>filebeat</code>: <code>6.8.8</code></p><p><code>elasticsearch</code>: <code>6.8.8</code></p><p><code>kibana</code>: <code>6.8.8</code></p><h1 id="安装EFK"><a href="#安装EFK" class="headerlink" title="安装EFK"></a>安装EFK</h1><p>将efk部署在一个单独的namespaces中，提前创建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@slions-pc1 ~]# kubectl create namespace agree-logging</span><br></pre></td></tr></table></figure><h2 id="部署elasticsearch"><a href="#部署elasticsearch" class="headerlink" title="部署elasticsearch"></a>部署elasticsearch</h2><ol><li>部署前，需要调整es节点”限制一个进程可以拥有的VMA(虚拟内存区域)的数量”，以下通过初始化容器来进行环境设置。</li><li>此次部署就一个节点，要将此es节点赋予master、node、ingest的角色。</li><li>es实际存储路径为hostpath设置的<code>/es-data</code></li></ol><h3 id="configmap"><a href="#configmap" class="headerlink" title="configmap"></a>configmap</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@slions-pc1</span> <span class="string">es-statefulset</span>]<span class="comment"># cat es-statefulset-cm.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">cluster.name:</span> <span class="string">&quot;elasticsearch-cluster&quot;</span></span><br><span class="line">  <span class="attr">node.name:</span> <span class="string">&quot;$&#123;HOSTNAME&#125;&quot;</span></span><br><span class="line">  <span class="attr">bootstrap.memory_lock:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">  <span class="attr">discovery.zen.ping.unicast.hosts:</span> <span class="string">&quot;elasticsearch-discovery&quot;</span></span><br><span class="line">  <span class="attr">discovery.zen.minimum_master_nodes:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">  <span class="attr">discovery.zen.ping_timeout:</span> <span class="string">&quot;5s&quot;</span></span><br><span class="line">  <span class="attr">node.master:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">  <span class="attr">node.data:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">  <span class="attr">node.ingest:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">  <span class="attr">ES_JAVA_OPTS:</span> <span class="string">&quot;-Xms1000m -Xmx1000m&quot;</span></span><br><span class="line">  <span class="attr">TZ:</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">es-statefulsets-configmaps</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">agree-logging</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">acaas-logcenter</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">agree-logging</span></span><br></pre></td></tr></table></figure><h3 id="rbac"><a href="#rbac" class="headerlink" title="rbac"></a>rbac</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@slions-pc1</span> <span class="string">acaas</span>]<span class="comment"># cat es-rbac.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">agree-logging</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">acaas-logcenter</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">    <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="attr">addonmanager.kubernetes.io/mode:</span> <span class="string">Reconcile</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">acaas-logcenter</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">    <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="attr">addonmanager.kubernetes.io/mode:</span> <span class="string">Reconcile</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;services&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;namespaces&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;endpoints&quot;</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;get&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">agree-logging</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">acaas-logcenter</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">    <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="attr">addonmanager.kubernetes.io/mode:</span> <span class="string">Reconcile</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">agree-logging</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="statefulset"><a href="#statefulset" class="headerlink" title="statefulset"></a>statefulset</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@slions-pc1</span> <span class="string">es-statefulset</span>]<span class="comment"># cat es-statefulset.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">agree-logging</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">acaas-logcenter</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">6.8</span><span class="number">.8</span></span><br><span class="line">    <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="attr">addonmanager.kubernetes.io/mode:</span> <span class="string">Reconcile</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">        <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">priorityClassName:</span> <span class="string">system-cluster-critical</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">acaas-registry.agree:9980/library/elasticsearch:6.8.8</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9200</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">db</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9300</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">transport</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">         <span class="attr">requests:</span></span><br><span class="line">           <span class="attr">memory:</span> <span class="string">2000Mi</span></span><br><span class="line">         <span class="attr">limits:</span></span><br><span class="line">           <span class="attr">memory:</span> <span class="string">2000Mi</span></span><br><span class="line">        <span class="attr">envFrom:</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">es-statefulsets-configmaps</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">agree-logging</span></span><br><span class="line">            <span class="attr">valueFrom:</span></span><br><span class="line">              <span class="attr">fieldRef:</span></span><br><span class="line">                <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">          <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">          <span class="attr">httpGet:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/_cluster/health</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">9200</span></span><br><span class="line">            <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">180</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">30</span></span><br><span class="line">          <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/usr/share/elasticsearch/data</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">acaas-registry.agree:9980/library/alpine:3.6</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;/sbin/sysctl&quot;</span>, <span class="string">&quot;-w&quot;</span>, <span class="string">&quot;vm.max_map_count=262144&quot;</span>]</span><br><span class="line">        <span class="attr">name:</span> <span class="string">elasticsearch-logging-init</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/es-data</span>                        <span class="comment"># 日志存储路径</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">elasticsearch-logging</span></span><br></pre></td></tr></table></figure><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@slions-pc1</span> <span class="string">acaas</span>]<span class="comment"># cat es-svc.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">agree-logging</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">acaas-logcenter</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">    <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="attr">addonmanager.kubernetes.io/mode:</span> <span class="string">Reconcile</span></span><br><span class="line">    <span class="attr">kubernetes.io/name:</span> <span class="string">&quot;Elasticsearch&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">9200</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">30007</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">elasticsearch-discovery</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">agree-logging</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">acaas-logcenter</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">    <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="attr">addonmanager.kubernetes.io/mode:</span> <span class="string">Reconcile</span></span><br><span class="line">    <span class="attr">kubernetes.io/name:</span> <span class="string">&quot;Elasticsearch&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">9300</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="string">transport</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elasticsearch-logging</span></span><br></pre></td></tr></table></figure><h2 id="部署filebeat"><a href="#部署filebeat" class="headerlink" title="部署filebeat"></a>部署filebeat</h2><p>创建一个mynginx示例服务，查看其/var/log/containers/下的日志即为其控制台日志（标准输出），可以看到其是<code>/var/log/pods/$&lt;pod_name&gt;/xxx.log</code>下的软连接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@slions-pc1 ~]# kubectl get pods</span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">mynginx-5bb654c97-ng8jn   1/1     Running   0          13s</span><br><span class="line">[root@slions-pc1 ~]# ll /var/log/containers/mynginx-5bb654c97-ng8jn_default_nginx-949db3d8631e6de802f0fd70c2ee8af52ebdae827c30bbc0e0f9ecef89e57ae6.log</span><br><span class="line">lrwxrwxrwx 1 root root 94 12月 28 11:39 /var/log/containers/mynginx-5bb654c97-ng8jn_default_nginx-949db3d8631e6de802f0fd70c2ee8af52ebdae827c30bbc0e0f9ecef89e57ae6.log -&gt; /var/log/pods/default_mynginx-5bb654c97-ng8jn_14e795c4-66e3-4195-b550-72b50f84d364/nginx/0.log</span><br></pre></td></tr></table></figure><p>可以看到<code>/var/log/pods/$&lt;pod_name&gt;/xxx.log</code>也是软连接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@slions-pc1 ~]# ll /var/log/pods/default_mynginx-5bb654c97-ng8jn_14e795c4-66e3-4195-b550-72b50f84d364/nginx/0.log</span><br><span class="line">lrwxrwxrwx 1 root root 157 12月 28 11:39 /var/log/pods/default_mynginx-5bb654c97-ng8jn_14e795c4-66e3-4195-b550-72b50f84d364/nginx/0.log -&gt; /export/containers/949db3d8631e6de802f0fd70c2ee8af52ebdae827c30bbc0e0f9ecef89e57ae6/949db3d8631e6de802f0fd70c2ee8af52ebdae827c30bbc0e0f9ecef89e57ae6-json.log</span><br></pre></td></tr></table></figure><p>Docker默认的日志驱动（LogDriver）是<code>json-driver</code>，其会将日志以JSON文件的方式存储。所有容器输出到控制台的日志，都会以<code>*-json.log</code>的命名方式保存在<code>/$&#123;Docker Root Dir&#125;/containers/</code>目录下。</p><p>知道了pod控制台日志的路径后可完成filebeat配置。</p><h3 id="configmap-1"><a href="#configmap-1" class="headerlink" title="configmap"></a>configmap</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">agree-logging</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">filebeat</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">filebeat.yml:</span> <span class="string">|-</span></span><br><span class="line"><span class="string">    filebeat.inputs:</span></span><br><span class="line"><span class="string">    - type: log</span></span><br><span class="line"><span class="string">      paths:</span></span><br><span class="line"><span class="string">        - /var/lib/docker/containers/*/*.log*</span></span><br><span class="line"><span class="string">      enable: true</span></span><br><span class="line"><span class="string">      scan_frequency: 3s                  # 检测新文件频率</span></span><br><span class="line"><span class="string">      close_inactive: 1m                  # 在指定时间没有被读取，将关闭文件句柄</span></span><br><span class="line"><span class="string">      close_timeout: 1h                   # harvester设置预定义关闭时间</span></span><br><span class="line"><span class="string">      clean_inactive: 48h                 # 从注册表文件中删除先前收获的文件的状态</span></span><br><span class="line"><span class="string">      ignore_older: 46h                   # 忽略超过设置值未更新的文件或者文件从来没有被harvester收集</span></span><br><span class="line"><span class="string">      max_bytes: 1000000                  # 单个日志消息可以拥有的最大字节数</span></span><br><span class="line"><span class="string">    tags: [&quot;acaas&quot;,&quot;testlog&quot;]             # 列表中添加标签，用于过滤</span></span><br><span class="line"><span class="string">    fields:                               # 新增字段</span></span><br><span class="line"><span class="string">      log_type: sjydemo111</span></span><br><span class="line"><span class="string">    fields_under_root: true               # fields存储在输出文档的顶级位置</span></span><br><span class="line"><span class="string">    processors:                           # 将数据发送到配置的输出之前，可以使用处理器来过滤和增强数据。</span></span><br><span class="line"><span class="string">      - add_kubernetes_metadata:             # 添加kubernetes元数据</span></span><br><span class="line"><span class="string">          in_cluster: true                   # 作为pods运行时需设置为true</span></span><br><span class="line"><span class="string">    setup.template.overwrite: true           # 是否覆盖默认模板</span></span><br><span class="line"><span class="string">    setup.template.enabled: true             # 是否开启自定义模板</span></span><br><span class="line"><span class="string">    output.elasticsearch.index: &quot;fb-slions-%&#123;+yyyy.MM.dd&#125;&quot;       # 要输出的es index名称</span></span><br><span class="line"><span class="string">    setup.template.pattern: &quot;fb-slions*&quot;       # 模板适配的索引</span></span><br><span class="line"><span class="string">    setup.template.name: &quot;fb-slions&quot;           # 模板名称</span></span><br><span class="line"><span class="string">    setup.template.settings:                   # index级别的设置</span></span><br><span class="line"><span class="string">      index:</span></span><br><span class="line"><span class="string">         number_of_shards: 1</span></span><br><span class="line"><span class="string">         number_of_replicas: 0</span></span><br><span class="line"><span class="string">    queue.mem.events: 2000                     # 写入的缓存队列的大小</span></span><br><span class="line"><span class="string">    queue.mem.flush.min_events: 1000           # 写入缓存的最小队列大小</span></span><br><span class="line"><span class="string">    logging.level: info                        # 日志级别</span></span><br><span class="line"><span class="string">    output.elasticsearch:</span></span><br><span class="line"><span class="string">      hosts: [&#x27;$&#123;ELASTICSEARCH_HOST:elasticsearch-logging&#125;:$&#123;ELASTICSEARCH_PORT:9200&#125;&#x27;]</span></span><br><span class="line"><span class="string">      max_message_bytes: 1000000</span></span><br></pre></td></tr></table></figure><h3 id="rbac-1"><a href="#rbac-1" class="headerlink" title="rbac"></a>rbac</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">agree-logging</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">filebeat</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>] <span class="comment"># &quot;&quot; indicates the core API group</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">namespaces</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">agree-logging</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">filebeat</span></span><br></pre></td></tr></table></figure><h3 id="daemonset"><a href="#daemonset" class="headerlink" title="daemonset"></a>daemonset</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">agree-logging</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">filebeat</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">filebeat</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">filebeat</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">filebeat</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">docker.elastic.co/beats/filebeat:6.8.8</span></span><br><span class="line">        <span class="attr">args:</span> [</span><br><span class="line">          <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/etc/filebeat.yml&quot;</span>,</span><br><span class="line">          <span class="string">&quot;-e&quot;</span>,</span><br><span class="line">        ]</span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ELASTICSEARCH_HOST</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ELASTICSEARCH_PORT</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;9200&quot;</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">runAsUser:</span> <span class="number">0</span></span><br><span class="line">          <span class="comment"># If using Red Hat OpenShift uncomment this:</span></span><br><span class="line">          <span class="comment">#privileged: true</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">200Mi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">100Mi</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/filebeat.yml</span>              <span class="comment"># filebeat配置文件</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">subPath:</span> <span class="string">filebeat.yml</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/filebeat/data</span>       <span class="comment"># filebeat注册文件</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlibdockercontainers</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/lib/docker/containers</span>     <span class="comment"># pod控制台日志存储路径</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">defaultMode:</span> <span class="number">0600</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">filebeat-config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlibdockercontainers</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/export/containers</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/filebeat-data</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br></pre></td></tr></table></figure><h2 id="部署kibana"><a href="#部署kibana" class="headerlink" title="部署kibana"></a>部署kibana</h2><h3 id="configmap-2"><a href="#configmap-2" class="headerlink" title="configmap"></a>configmap</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@slions-pc1</span> <span class="string">kibana</span>]<span class="comment"># cat kibana-cm.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">agree-logging</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kibana-config</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">kibana</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">kibana.yml:</span> <span class="string">|-</span></span><br><span class="line"><span class="string">    server.host: 0.0.0.0</span></span><br><span class="line"><span class="string">    elasticsearch:</span></span><br><span class="line"><span class="string">      hosts: &quot;http://elasticsearch-logging.agree-logging.svc.cluster.local:9200&quot;</span></span><br></pre></td></tr></table></figure><h3 id="deployment"><a href="#deployment" class="headerlink" title="deployment"></a>deployment</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@slions-pc1 kibana]# cat kibana-dep.yaml</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  namespace: agree-logging</span><br><span class="line">  name: kibana</span><br><span class="line">  labels:</span><br><span class="line">    app: kibana</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: kibana</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: kibana</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: kibana</span><br><span class="line">        image: docker.elastic.co/kibana/kibana:6.8.8</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 5601</span><br><span class="line">          name: webinterface</span><br><span class="line">        env:</span><br><span class="line">        - name: ELASTICSEARCH_HOSTS</span><br><span class="line">          value: &quot;http://elasticsearch-logging.agree-logging.svc.cluster.local:9200&quot;</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: config</span><br><span class="line">          mountPath: /usr/share/kibana/config/kibana.yml</span><br><span class="line">          readOnly: true</span><br><span class="line">          subPath: kibana.yml</span><br><span class="line">      volumes:</span><br><span class="line">      - name: config</span><br><span class="line">        configMap:</span><br><span class="line">          name: kibana-config</span><br></pre></td></tr></table></figure><h3 id="svc"><a href="#svc" class="headerlink" title="svc"></a>svc</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@slions-pc1</span> <span class="string">kibana</span>]<span class="comment"># cat kibana-svc.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kibana-api</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">agree-logging</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5601</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">5601</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">30006</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">kibana</span></span><br></pre></td></tr></table></figure><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>访问es地址：<a href="http://192.168.100.10:30007/">http://192.168.100.10:30007/</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;masternode&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;cluster_name&quot;</span> : <span class="string">&quot;elasticsearch-cluster&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;TgyaNTKTTai93ukKjRwqVA&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;number&quot;</span> : <span class="string">&quot;6.8.8&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_flavor&quot;</span> : <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_type&quot;</span> : <span class="string">&quot;docker&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_hash&quot;</span> : <span class="string">&quot;2f4c224&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_date&quot;</span> : <span class="string">&quot;2020-03-18T23:22:18.622755Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_snapshot&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;lucene_version&quot;</span> : <span class="string">&quot;7.7.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="string">&quot;5.6.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;minimum_index_compatibility_version&quot;</span> : <span class="string">&quot;5.0.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;tagline&quot;</span> : <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问es健康接口：<a href="http://192.168.100.10:30007/_cat/health?v">http://192.168.100.10:30007/_cat/health?v</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">epoch      timestamp cluster               status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent</span><br><span class="line">1640671797 06:09:57  elasticsearch-cluster green           1         1     14  14    0    0        0             0                  -                100.0%</span><br></pre></td></tr></table></figure><p>访问kibana地址：<a href="http://192.168.100.10:30006/">http://192.168.100.10:30006/</a></p><p>monitoring中会展示当前es与kibana的状态：</p><p><img src="https://slions.gitee.io/picbed/img/elk02.png"></p><p>management中点击index management查看当前集群中的索引信息：</p><p><img src="https://slions.gitee.io/picbed/img/elk01.png"></p><p>log中能实时查看已收集到的日志，并可根据过滤条件进行查询，因为在filebeat中设置了存储到es的索引模板，这里需要添加<code>Log indices</code>项<code>fb-*</code></p><p><img src="https://slions.gitee.io/picbed/img/elk03.png"></p><p>dev tools中可以通过接口方式来操作es</p><p><img src="https://slions.gitee.io/picbed/img/elk04.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;EFK架构分别代表Elasticsearch、Filebeat、Kibana。&lt;/p&gt;
&lt;p&gt;下面所验证的是通过filebeat来收集pods的控制台日志，通过es来检索存储收集到的日志，通过kibana来进行图形化的展示。&lt;/p&gt;
&lt;/block</summary>
      
    
    
    
    <category term="云原生" scheme="https://slions.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="kubernetes" scheme="https://slions.github.io/tags/kubernetes/"/>
    
    <category term="logging" scheme="https://slions.github.io/tags/logging/"/>
    
  </entry>
  
  <entry>
    <title>日志系统之Filebeat</title>
    <link href="https://slions.github.io/2021/12/18/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E4%B9%8BFilebeat/"/>
    <id>https://slions.github.io/2021/12/18/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E4%B9%8BFilebeat/</id>
    <published>2021-12-18T08:36:46.000Z</published>
    <updated>2021-12-23T02:57:33.805Z</updated>
    
    <content type="html"><![CDATA[<p>日志系统架构上可分为收集、纳管、展示三个层级，业界常说的ELK架构是指elasticsearch（搜索、存储）、Logstash（采集、清洗）、Kibana（展示）的日志系统解决方案。在日志采集方面，logstash对内存、CPU、io等资源消耗比较高，与同类产品Beats比，性能有较大的开销。</p><p>Beats是一个轻量级日志采集器，目前Beats家族有7个成员：</p><ul><li>Packetbeat：网络数据（收集网络流量数据）</li><li>Metricbeat：指标（收集系统、进程和文件系统级别的CPU和内存使用情况等数据）</li><li>Filebeat：日志文件（收集文件数据）</li><li>Winlogbeat：Windows事件日志（收集Windows事件日志数据）</li><li>Auditbeat：审计数据（收集审计日志）</li><li>Heartbeat：运行时间监控（收集系统运行时的数据）</li><li>Functionbeat： 面向云端数据的无服务器采集器</li></ul><p>了解更多可查看<a href="https://www.elastic.co/cn/beats/">官方文档</a></p><h1 id="Filebeat"><a href="#Filebeat" class="headerlink" title="Filebeat"></a>Filebeat</h1><p><code>Filebeat</code>是用于转发和集中日志数据的轻量级传送工具。<code>Filebeat</code>监视服务器上指定的日志文件或位置，收集日志事件，并将它们转发到<code>Elasticsearch</code>或<code> Logstash</code>进行索引。</p><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>启动<code>Filebeat</code>时，它将启动一个或多个<code>input</code>（输入），这些<code>input</code>会在指定的日志数据目录中查找。对于<code>Filebeat</code>所找到的每个日志，<code>Filebeat</code>都会启动<code>harvester</code>（收集器）。每个<code>harvester</code>都读取单个日志以获取新内容，并将新日志数据发送到<code>libbeat</code>，<code>libbeat</code>将聚集事件，并将聚集的数据发送到为Filebeat配置的<code>output</code>（输出）。</p><p><img src="https://slions.gitee.io/picbed/img/filebear1.png"></p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="组件构成"><a href="#组件构成" class="headerlink" title="组件构成"></a>组件构成</h3><p><code>Filebeat</code>由<code>inputs</code>（输入）和<code>harvesters</code>（收集器）这两个组件组成，这些组件一起工作来跟踪文件并将事件数据发送到指定的output（输出）。</p><p>harvester负责读取单个文件的内容。harvester逐行读取每个文件，并将内容发送到输出。为每个文件启动一个harvester。harvester负责打开和关闭文件，这意味着文件描述符在harvester运行时保持打开状态。如果在收集文件时删除或重命名文件，Filebeat将继续读取该文件。</p><p>一个input负责管理harvesters和寻找所有来源读取。如果input类型是log，则input将查找驱动器上与定义的路径匹配的所有文件，并为每个文件启动一个harvester。每个input在它自己的Go协程中运行，Filebeat当前支持多种输入类型。每个输入类型可以定义多次。日志输入检查每个文件，以查看是否需要启动一个harvester，是否已经在运行，或者是否可以忽略该文件(参见ignore_older)。只有在harvesters（收集器）关闭后文件的大小发生变化时，才会提取新行。</p><h3 id="如何保存文件的状态"><a href="#如何保存文件的状态" class="headerlink" title="如何保存文件的状态"></a>如何保存文件的状态</h3><p>Filebeat保留每个文件的状态，并经常将状态刷新到磁盘中的注册表文件中。该状态用于记住harvester读取的最后一个偏移量，并确保发送所有日志行。如果无法访问输出（如Elasticsearch或Logstash），Filebeat将跟踪最后发送的行，并在输出再次可用时继续读取文件。当Filebeat运行时，每个输入的状态信息也保存在内存中。当Filebeat重新启动时，将使用来自注册表文件的数据重新构建状态，Filebeat在最后一个已知位置继续每个harvester。</p><p>对于每个输入，Filebeat都会保留它找到的每个文件的状态。由于文件可以重命名或移动，文件名和路径不足以标识文件。对于每个文件，Filebeat存储唯一的标识符，以检测文件是否以前被捕获。</p><h3 id="如何保证至少一次数据消费"><a href="#如何保证至少一次数据消费" class="headerlink" title="如何保证至少一次数据消费"></a>如何保证至少一次数据消费</h3><p>因为它将每个事件的传递状态存储在注册表文件中。在已定义的输出被阻止且未确认所有事件的情况下，Filebeat将继续尝试发送事件，直到输出确认已接收到事件为止。如果Filebeat在发送事件的过程中关闭，它不会等待输出确认所有事件后再关闭。当Filebeat重新启动时，将再次将Filebeat关闭前未确认的所有事件发送到输出。这样可以确保每个事件至少发送一次，但最终可能会有重复的事件发送到输出。通过设置<code>shutdown_timeout</code>选项，可以将Filebeat配置为在关机前等待特定时间。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>filebeat提供多种部署模式：</p><ul><li>rpm包</li><li>docker</li><li>kubernetes</li></ul><p>本次实验采用rpm包的方式进行。</p><h2 id="环境描述"><a href="#环境描述" class="headerlink" title="环境描述"></a>环境描述</h2><table><thead><tr><th><strong>主机名</strong></th><th>ip地址</th><th><strong>系统环境</strong></th><th>系统版本</th><th>内核版本</th></tr></thead><tbody><tr><td>test1</td><td>192.168.100.10</td><td>cpu:x4  mem:8GB  filesystem:50GB</td><td>CentOS  7.9.2009</td><td>3.10.0-1160.el7.x86_64</td></tr></tbody></table><p>本地之前已经安装了nginx服务，后面拿该服务作为用例测试。</p><p>因本次使用6.8.x版本filebeat进行实验，涉及到的配置可能与高版本有差异。</p><h2 id="下载软件包"><a href="#下载软件包" class="headerlink" title="下载软件包"></a>下载软件包</h2><p>登录<a href="https://www.elastic.co/cn/downloads/past-releases#filebeat]">官网地址</a>下载对应版本软件包</p><p><img src="https://slions.gitee.io/picbed/img/filebeat2.png"></p><h2 id="本地解压并安装"><a href="#本地解压并安装" class="headerlink" title="本地解压并安装"></a>本地解压并安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 ~]# ls</span><br><span class="line">anaconda-ks.cfg    filebeat-6.8.8-x86_64.rpm</span><br><span class="line">[root@test1 ~]# rpm -iv filebeat-6.8.8-x86_64.rpm</span><br><span class="line">警告：filebeat-6.8.8-x86_64.rpm: 头V4 RSA/SHA512 Signature, 密钥 ID d88e42b4: NOKEY</span><br><span class="line">软件包准备中...</span><br><span class="line">filebeat-6.8.8-1.x86_64</span><br></pre></td></tr></table></figure><h1 id="配置filebeat"><a href="#配置filebeat" class="headerlink" title="配置filebeat"></a>配置filebeat</h1><p>默认的配置文件在<code>/etc/filebeat/filebeat.yml</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 ~]# rpm -qc filebeat</span><br><span class="line">/etc/filebeat/filebeat.yml</span><br><span class="line">/etc/filebeat/modules.d/apache2.yml.disabled</span><br><span class="line">/etc/filebeat/modules.d/auditd.yml.disabled</span><br><span class="line">/etc/filebeat/modules.d/elasticsearch.yml.disabled</span><br><span class="line">/etc/filebeat/modules.d/haproxy.yml.disabled</span><br><span class="line">/etc/filebeat/modules.d/icinga.yml.disabled</span><br><span class="line">/etc/filebeat/modules.d/iis.yml.disabled</span><br><span class="line">/etc/filebeat/modules.d/iptables.yml.disabled</span><br><span class="line">/etc/filebeat/modules.d/kafka.yml.disabled</span><br><span class="line">/etc/filebeat/modules.d/kibana.yml.disabled</span><br><span class="line">/etc/filebeat/modules.d/logstash.yml.disabled</span><br><span class="line">/etc/filebeat/modules.d/mongodb.yml.disabled</span><br><span class="line">/etc/filebeat/modules.d/mysql.yml.disabled</span><br><span class="line">/etc/filebeat/modules.d/nginx.yml.disabled</span><br><span class="line">/etc/filebeat/modules.d/osquery.yml.disabled</span><br><span class="line">/etc/filebeat/modules.d/postgresql.yml.disabled</span><br><span class="line">/etc/filebeat/modules.d/redis.yml.disabled</span><br><span class="line">/etc/filebeat/modules.d/suricata.yml.disabled</span><br><span class="line">/etc/filebeat/modules.d/system.yml.disabled</span><br><span class="line">/etc/filebeat/modules.d/traefik.yml.disabled</span><br></pre></td></tr></table></figure><p>配置示例文件：<code>/etc/filebeat/filebeat.reference.yml</code>（包含所有未过时的配置项）</p><p><a href="https://www.elastic.co/guide/en/beats/filebeat/6.8/configuring-howto-filebeat.html">官方的配置介绍</a></p><h2 id="输入与输出配置"><a href="#输入与输出配置" class="headerlink" title="输入与输出配置"></a>输入与输出配置</h2><p>filebeat 支持的input（输出）有以下几种：</p><ul><li><a href="https://www.elastic.co/guide/en/beats/filebeat/6.8/filebeat-input-log.html">Log</a></li><li><a href="https://www.elastic.co/guide/en/beats/filebeat/6.8/filebeat-input-stdin.html">Stdin</a></li><li><a href="https://www.elastic.co/guide/en/beats/filebeat/6.8/filebeat-input-redis.html">Redis</a></li><li><a href="https://www.elastic.co/guide/en/beats/filebeat/6.8/filebeat-input-udp.html">UDP</a></li><li><a href="https://www.elastic.co/guide/en/beats/filebeat/6.8/filebeat-input-docker.html">Docker</a></li><li><a href="https://www.elastic.co/guide/en/beats/filebeat/6.8/filebeat-input-tcp.html">TCP</a></li><li><a href="https://www.elastic.co/guide/en/beats/filebeat/6.8/filebeat-input-syslog.html">Syslog</a></li><li><a href="https://www.elastic.co/guide/en/beats/filebeat/6.8/filebeat-input-netflow.html">NetFlow</a></li></ul><p>filebeat 支持的output（输出）有以下几种：</p><ul><li><a href="https://www.elastic.co/guide/en/beats/filebeat/6.8/elasticsearch-output.html">Elasticsearch</a></li><li><a href="https://www.elastic.co/guide/en/beats/filebeat/6.8/logstash-output.html">Logstash</a></li><li><a href="https://www.elastic.co/guide/en/beats/filebeat/6.8/kafka-output.html">Kafka</a></li><li><a href="https://www.elastic.co/guide/en/beats/filebeat/6.8/redis-output.html">Redis</a></li><li><a href="https://www.elastic.co/guide/en/beats/filebeat/6.8/file-output.html">File</a></li><li><a href="https://www.elastic.co/guide/en/beats/filebeat/6.8/console-output.html">Console</a></li><li><a href="https://www.elastic.co/guide/en/beats/filebeat/6.8/configure-cloud-id.html">Cloud</a></li></ul><p>其中常用的输入是log，输出是es，本次不搭建es了，输出类型选择file。</p><p>下面是对log组件的官方配置项介绍进行简要解释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">paths：                      #指定要监控的日志，目前按照Go语言的glob函数处理。没有对配置目录做递归处理，比如配置的如果是：</span><br><span class="line">- /var/log/* /*.log，则只会去/var/log目录的所有子目录中寻找以&quot;.log&quot;结尾的文件，而不会寻找/var/log目录下以&quot;.log&quot;结尾的文件。</span><br><span class="line">recursive_glob.enabled:      #启用全局递归模式，默认是开启的，例如/foo/**包括/foo, /foo/*, /foo/*/*，如果启用，它将单个**扩展为一个8级深度*模式。</span><br><span class="line">encoding：                   #指定被监控的文件的编码类型，使用plain和utf-8都是可以处理中文日志的</span><br><span class="line">exclude_lines: [&#x27;^DBG&#x27;]      #不包含匹配正则的行,如果还指定了multiline，则每个多行消息在被exclude_lines过滤之前被合并成一行。</span><br><span class="line">include_lines: [&#x27;^ERR&#x27;, &#x27;^WARN&#x27;]  #包含匹配正则的行，如果还指定了multiline，则每个多行消息在被include_lines过滤之前被合并成一行。</span><br><span class="line">harvester_buffer_size: 16384      #每个harvester在获取文件时使用的缓冲区的字节大小</span><br><span class="line">max_bytes: 10485760          #单个日志消息可以拥有的最大字节数。max_bytes之后的所有字节都被丢弃而不发送。默认值为10MB (10485760)</span><br><span class="line">exclude_files: [&#x27;\.gz$&#x27;]     #用于匹配希望Filebeat忽略的文件的正则表达式列表</span><br><span class="line">ingore_older: 0              #默认为0，表示禁用，可以配置2h，2m等，注意ignore_older必须大于close_inactive的值.表示忽略超过设置值未更新的文件或者文件从来没有被harvester收集</span><br><span class="line">close_*                      #close_ *配置选项用于在特定标准或时间之后关闭harvester。 关闭harvester意味着关闭文件处理程序。如果在harvester关闭后文件被更新，则在scan_frequency过后，文件将被重新拾取。 但是，如果在harvester关闭时移动或删除文件，Filebeat将无法再次接收文件，并且harvester未读取的任何数据都将丢失。</span><br><span class="line">close_inactive               #启动选项时，如果在指定时间没有被读取，将关闭文件句柄，读取的最后一条日志定义为下一次读取的起始点，而不是基于文件的修改时间，如果关闭的文件发生变化，一个新的harverster将在scan_frequency运行后被启动，建议至少设置一个大于读取日志频率的值，配置多个prospector来实现针对不同更新速度的日志文件，使用内部时间戳机制，来反映记录日志的读取，每次读取到最后一行日志时开始倒计时使用，2h 5m 来表示。</span><br><span class="line">close_rename                 #当选项启动，如果文件被重命名和移动，filebeat关闭文件的处理读取</span><br><span class="line">close_removed                #该选项默认是启动的，Filebeat会在文件被移除时关闭harvester。通常，只有在close_inactive指定的时间段内，文件才应该被删除。然而，如果一个文件被提前删除，而没有启用close_removed, Filebeat会保持文件打开，以确保收割器已经完成。</span><br><span class="line">close_eof                    #适合只写一次日志的文件，然后filebeat关闭文件的处理读取</span><br><span class="line">close_timeout                #当选项启动时，filebeat会给每个harvester设置预定义时间，不管这个文件是否被读取，达到设定时间后，将被关闭，close_timeout不能等于ignore_older,会导致文件更新时，不会被读取，如果output一直没有输出日志事件，这个timeout是不会被启动的，至少要要有一个事件发送，然后haverter将被关闭，设置0，表示不启动</span><br><span class="line">clean_inactived              #从注册表文件中删除先前收获的文件的状态，设置必须大于ignore_older+scan_frequency，以确保在文件仍在收集时没有删除任何状态，配置选项有助于减小注册表文件的大小，特别是如果每天都生成大量的新文件，此配置选项也可用于防止在Linux上重用inode的Filebeat问题</span><br><span class="line">clean_removed                #启动选项后，如果文件在磁盘上找不到，Filebeat将从注册表中清除这些文件。</span><br><span class="line">scan_frequency               #prospector检查指定用于收集的路径中的新文件的频率,默认10s</span><br><span class="line">tail_files：                 #如果设置为true，Filebeat从文件尾开始监控文件新增内容，把新增的每一行文件作为一个事件依次发送，而不是从文件开始处重新发送所有内容。</span><br><span class="line">symlinks：                   #符号链接选项允许Filebeat除常规文件外,可以收集符号链接。收集符号链接时，即使报告了符号链接的路径，Filebeat也会打开并读取原始文件。</span><br><span class="line">backoff：                    #backoff选项指定Filebeat如何积极地抓取新文件进行更新。默认1s，backoff选项定义Filebeat在达到EOF之后再次检查文件之间等待的时间。</span><br><span class="line">max_backoff：                #在达到EOF之后再次检查文件之前Filebeat等待的最长时间</span><br><span class="line">backoff_factor：             #指定backoff尝试等待时间几次，默认是2</span><br><span class="line">harvester_limit：            #harvester_limit选项限制一个prospector并行启动的harvester数量，直接影响文件打开数</span><br><span class="line">multiline.pattern            #必须匹配的regexp模式</span><br><span class="line">multiline.negate             #定义上面的模式匹配条件的动作是否定的，默认是false，假如模式匹配条件&#x27;^b&#x27;，默认是false模式，表示讲按照模式匹配进行匹配 将不是以b开头的日志行进行合并，如果是true，表示将不以b开头的日志行进行合并</span><br><span class="line">multiline.match              #指定Filebeat如何将匹配行组合成事件,在之前或者之后，取决于上面所指定的negate</span><br><span class="line">multiline.max_lines          #可以组合成一个事件的最大行数，超过将丢弃，默认500</span><br><span class="line">multiline.timeout            #定义超时时间，如果开始一个新的事件在超时时间内没有发现匹配，也将发送日志，默认是5s</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">所有输入都支持以下配置选项：</span><br><span class="line">enable: true          #表示是该类型配置生效</span><br><span class="line">max_procs                    #设置可以同时执行的最大CPU数。默认值为系统中可用的逻辑CPU的数量。</span><br><span class="line">name                         #为该filebeat指定名字，默认为主机的hostname</span><br><span class="line">tags                         #列表中添加标签，用于过滤，例如：tags: [&quot;json&quot;]</span><br><span class="line">fields                       #可选字段，选择额外的字段进行输出可以是标量值，元组，字典等嵌套类型</span><br><span class="line">默认在sub-dictionary位置</span><br><span class="line">filebeat.inputs:</span><br><span class="line">fields:</span><br><span class="line">  log_type: trace</span><br><span class="line">  namespace: default</span><br><span class="line">fields_under_root            #如果值为ture，那么fields存储在输出文档的顶级位置</span><br></pre></td></tr></table></figure><p>file组件的配置项如下进行简要解释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">output.file:</span><br><span class="line">  enabled: true                      #启用输出</span><br><span class="line">  path: &quot;tmp/filebeat&quot;               #生成文件的路径</span><br><span class="line">  filename: slions_nginx_fb          #生成文件的名称</span><br><span class="line">  rotate_every_kb: 1000              #每个文件的最大大小，达到这个大小时，将轮转文件。</span><br><span class="line">  number_of_files: 3                 #保留的文件个数</span><br><span class="line">  permissions: 0600                  #创建文件时使用的权限。默认值是0600</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>测试用例nginx服务的日志路径为<code>/var/log/nginx</code></p><p>filebeat 配置文件内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">fields:</span></span><br><span class="line">    <span class="attr">log_se:</span> <span class="string">slions</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/log/nginx/*.log</span>           <span class="comment">#绝对路径</span></span><br><span class="line">  <span class="attr">scan_frequency:</span> <span class="string">3s</span>                 <span class="comment">#检测频率</span></span><br><span class="line">  <span class="attr">close_inactive:</span> <span class="string">1m</span>                 <span class="comment">#在指定时间没有被读取，将关闭文件句柄</span></span><br><span class="line">  <span class="attr">close_timeout:</span> <span class="string">1h</span>                  <span class="comment">#harvester设置预定义关闭时间</span></span><br><span class="line">  <span class="attr">clean_inactive:</span> <span class="string">48h</span>                <span class="comment">#从注册表文件中删除先前收获的文件的状态</span></span><br><span class="line">  <span class="attr">ignore_older:</span> <span class="string">46h</span>                  <span class="comment">#忽略超过设置值未更新的文件或者文件从来没有被harvester收集</span></span><br><span class="line">  <span class="attr">max_bytes:</span> <span class="number">1000000</span>                 <span class="comment">#单个日志消息可以拥有的最大字节数</span></span><br><span class="line">  <span class="attr">encoding:</span> <span class="string">utf-8</span>                    <span class="comment">#文件编码</span></span><br><span class="line"><span class="attr">output.file:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span>                      <span class="comment">#启用输出</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&quot;tmp/filebeat&quot;</span>               <span class="comment">#生成文件的路径</span></span><br><span class="line">  <span class="attr">filename:</span> <span class="string">slions_nginx_fb</span>          <span class="comment">#生成文件的名称</span></span><br><span class="line">  <span class="attr">rotate_every_kb:</span> <span class="number">1000</span>              <span class="comment">#每个文件的最大大小，达到这个大小时，将轮转文件。</span></span><br><span class="line">  <span class="attr">number_of_files:</span> <span class="number">3</span>                 <span class="comment">#保留的文件个数</span></span><br><span class="line">  <span class="attr">permissions:</span> <span class="number">0600</span>                  <span class="comment">#创建文件时使用的权限。默认值是0600</span></span><br></pre></td></tr></table></figure><p>查看当前<code>/var/log/nginx</code>目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 nginx]# ll /var/log/nginx/</span><br><span class="line">总用量 28</span><br><span class="line">-rw-r-----  1 root  adm    106 12月 20 09:45 access.log</span><br><span class="line">-rw-r-----  1 nginx adm    703 12月  7 14:38 access.log-20211207.gz</span><br><span class="line">-rw-r-----  1 root  adm    472 12月 17 14:32 access.log-20211218.gz</span><br><span class="line">-rw-r-----  1 root  adm  10875 12月 19 12:39 access.log-20211219</span><br><span class="line">-rw-r-----. 1 root  adm      0 12月  6 19:47 error.log</span><br></pre></td></tr></table></figure><h1 id="启动filebeat"><a href="#启动filebeat" class="headerlink" title="启动filebeat"></a>启动filebeat</h1><p>查看通过rpm安装的filebeat默认的启动文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 nginx]# systemctl cat filebeat.service --no-pager</span><br><span class="line"><span class="meta">#</span><span class="bash"> /usr/lib/systemd/system/filebeat.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Filebeat sends log files to Logstash or directly to Elasticsearch.</span><br><span class="line">Documentation=https://www.elastic.co/products/beats/filebeat</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/share/filebeat/bin/filebeat -c /etc/filebeat/filebeat.yml -path.home /usr/share/filebeat -path.config /etc/filebeat -path.data /var/lib/filebeat -path.logs /var/log/filebeat</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 nginx]# systemctl start filebeat</span><br><span class="line">[root@test1 nginx]# systemctl enable filebeat</span><br></pre></td></tr></table></figure><p>编辑<code>/var/log/nginx/access.log</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 nginx]# cat access.log</span><br><span class="line">[192.168.100.10] - 我的老家就住在这个屯</span><br><span class="line">[192.168.100.10] - 我是这个屯里土生土长的人</span><br></pre></td></tr></table></figure><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>观察日志输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">2021-12-20T11:11:08.761+0800    INFO    instance/beat.go:611    Home path: [/usr/share/filebeat] Config path: [/etc/filebeat] Data path: [/var/lib/filebeat] Logs path: [/var/log/filebeat]</span><br><span class="line">2021-12-20T11:11:08.762+0800    INFO    instance/beat.go:618    Beat UUID: a9f23f5d-a653-418b-9563-dbd1ef658c0c</span><br><span class="line">2021-12-20T11:11:08.763+0800    INFO    [seccomp]       seccomp/seccomp.go:116  Syscall filter successfully installed</span><br><span class="line">2021-12-20T11:11:08.763+0800    INFO    [beat]  instance/beat.go:931    Beat info       &#123;&quot;system_info&quot;: &#123;&quot;beat&quot;: &#123;&quot;path&quot;: &#123;&quot;config&quot;: &quot;/etc/filebeat&quot;, &quot;data&quot;: &quot;/var/lib/filebeat&quot;, &quot;home&quot;: &quot;/usr/share/filebeat&quot;, &quot;logs&quot;: &quot;/var/log/filebeat&quot;&#125;, &quot;type&quot;: &quot;filebeat&quot;, &quot;uuid&quot;: &quot;a9f23f5d-a653-418b-9563-dbd1ef658c0c&quot;&#125;&#125;&#125;</span><br><span class="line">2021-12-20T11:11:08.763+0800    INFO    [beat]  instance/beat.go:940    Build info      &#123;&quot;system_info&quot;: &#123;&quot;build&quot;: &#123;&quot;commit&quot;: &quot;ecd273d59ab89c70355504b89445563e9a987812&quot;, &quot;libbeat&quot;: &quot;6.8.8&quot;, &quot;time&quot;: &quot;2020-03-18T22:26:53.000Z&quot;, &quot;version&quot;: &quot;6.8.8&quot;&#125;&#125;&#125;</span><br><span class="line">2021-12-20T11:11:08.763+0800    INFO    [beat]  instance/beat.go:943    Go runtime info &#123;&quot;system_info&quot;: &#123;&quot;go&quot;: &#123;&quot;os&quot;:&quot;linux&quot;,&quot;arch&quot;:&quot;amd64&quot;,&quot;max_procs&quot;:4,&quot;version&quot;:&quot;go1.10.8&quot;&#125;&#125;&#125;</span><br><span class="line">2021-12-20T11:11:08.765+0800    INFO    [beat]  instance/beat.go:947    Host info       &#123;&quot;system_info&quot;: &#123;&quot;host&quot;: &#123;&quot;architecture&quot;:&quot;x86_64&quot;,&quot;boot_time&quot;:&quot;2021-12-19T12:09:18+08:00&quot;,&quot;containerized&quot;:false,&quot;name&quot;:&quot;test1&quot;,&quot;ip&quot;:[&quot;127.0.0.1/8&quot;,&quot;::1/128&quot;,&quot;192.168.100.10/24&quot;,&quot;192.168.100.10/32&quot;,&quot;fe80::c386:ac85:34e8:af4c/64&quot;,&quot;172.17.0.1/16&quot;,&quot;172.18.0.1/16&quot;,&quot;fe80::42:cbff:fe39:a363/64&quot;,&quot;fe80::5028:e0ff:fe0e:66c/64&quot;,&quot;fe80::b8b1:54ff:fe2c:8485/64&quot;,&quot;fe80::38eb:d3ff:feed:c2f/64&quot;,&quot;fe80::90ec:66ff:fedb:fe9e/64&quot;,&quot;fe80::ac4f:9fff:fe22:13c3/64&quot;,&quot;fe80::6499:51ff:fe96:94ff/64&quot;,&quot;10.96.0.1/32&quot;,&quot;10.96.0.10/32&quot;,&quot;244.244.0.0/32&quot;,&quot;fe80::48ab:a9ff:fe87:a4fd/64&quot;,&quot;244.244.0.1/24&quot;,&quot;fe80::2c97:87ff:fe1b:58a1/64&quot;,&quot;fe80::6417:4aff:fe52:9e62/64&quot;,&quot;fe80::94ef:1ff:fe57:d967/64&quot;],&quot;kernel_version&quot;:&quot;3.10.0-1160.el7.x86_64&quot;,&quot;mac&quot;:[&quot;00:0c:29:85:bf:35&quot;,&quot;02:42:69:f9:b2:45&quot;,&quot;02:42:cb:39:a3:63&quot;,&quot;52:28:e0:0e:06:6c&quot;,&quot;ba:b1:54:2c:84:85&quot;,&quot;3a:eb:d3:ed:0c:2f&quot;,&quot;92:ec:66:db:fe:9e&quot;,&quot;ae:4f:9f:22:13:c3&quot;,&quot;66:99:51:96:94:ff&quot;,&quot;b2:68:e8:ca:48:45&quot;,&quot;be:df:d2:f3:67:0b&quot;,&quot;4a:ab:a9:87:a4:fd&quot;,&quot;2e:97:87:1b:58:a1&quot;,&quot;66:17:4a:52:9e:62&quot;,&quot;96:ef:01:57:d9:67&quot;],&quot;os&quot;:&#123;&quot;family&quot;:&quot;redhat&quot;,&quot;platform&quot;:&quot;centos&quot;,&quot;name&quot;:&quot;CentOS Linux&quot;,&quot;version&quot;:&quot;7 (Core)&quot;,&quot;major&quot;:7,&quot;minor&quot;:9,&quot;patch&quot;:2009,&quot;codename&quot;:&quot;Core&quot;&#125;,&quot;timezone&quot;:&quot;CST&quot;,&quot;timezone_offset_sec&quot;:28800,&quot;id&quot;:&quot;8666f48bd1b948818ebf5c08ddddcb2a&quot;&#125;&#125;&#125;</span><br><span class="line">2021-12-20T11:11:08.766+0800    INFO    [beat]  instance/beat.go:976    Process info    &#123;&quot;system_info&quot;: &#123;&quot;process&quot;: &#123;&quot;capabilities&quot;: &#123;&quot;inheritable&quot;:null,&quot;permitted&quot;:[&quot;chown&quot;,&quot;dac_override&quot;,&quot;dac_read_search&quot;,&quot;fowner&quot;,&quot;fsetid&quot;,&quot;kill&quot;,&quot;setgid&quot;,&quot;setuid&quot;,&quot;setpcap&quot;,&quot;linux_immutable&quot;,&quot;net_bind_service&quot;,&quot;net_broadcast&quot;,&quot;net_admin&quot;,&quot;net_raw&quot;,&quot;ipc_lock&quot;,&quot;ipc_owner&quot;,&quot;sys_module&quot;,&quot;sys_rawio&quot;,&quot;sys_chroot&quot;,&quot;sys_ptrace&quot;,&quot;sys_pacct&quot;,&quot;sys_admin&quot;,&quot;sys_boot&quot;,&quot;sys_nice&quot;,&quot;sys_resource&quot;,&quot;sys_time&quot;,&quot;sys_tty_config&quot;,&quot;mknod&quot;,&quot;lease&quot;,&quot;audit_write&quot;,&quot;audit_control&quot;,&quot;setfcap&quot;,&quot;mac_override&quot;,&quot;mac_admin&quot;,&quot;syslog&quot;,&quot;wake_alarm&quot;,&quot;block_suspend&quot;],&quot;effective&quot;:[&quot;chown&quot;,&quot;dac_override&quot;,&quot;dac_read_search&quot;,&quot;fowner&quot;,&quot;fsetid&quot;,&quot;kill&quot;,&quot;setgid&quot;,&quot;setuid&quot;,&quot;setpcap&quot;,&quot;linux_immutable&quot;,&quot;net_bind_service&quot;,&quot;net_broadcast&quot;,&quot;net_admin&quot;,&quot;net_raw&quot;,&quot;ipc_lock&quot;,&quot;ipc_owner&quot;,&quot;sys_module&quot;,&quot;sys_rawio&quot;,&quot;sys_chroot&quot;,&quot;sys_ptrace&quot;,&quot;sys_pacct&quot;,&quot;sys_admin&quot;,&quot;sys_boot&quot;,&quot;sys_nice&quot;,&quot;sys_resource&quot;,&quot;sys_time&quot;,&quot;sys_tty_config&quot;,&quot;mknod&quot;,&quot;lease&quot;,&quot;audit_write&quot;,&quot;audit_control&quot;,&quot;setfcap&quot;,&quot;mac_override&quot;,&quot;mac_admin&quot;,&quot;syslog&quot;,&quot;wake_alarm&quot;,&quot;block_suspend&quot;],&quot;bounding&quot;:[&quot;chown&quot;,&quot;dac_override&quot;,&quot;dac_read_search&quot;,&quot;fowner&quot;,&quot;fsetid&quot;,&quot;kill&quot;,&quot;setgid&quot;,&quot;setuid&quot;,&quot;setpcap&quot;,&quot;linux_immutable&quot;,&quot;net_bind_service&quot;,&quot;net_broadcast&quot;,&quot;net_admin&quot;,&quot;net_raw&quot;,&quot;ipc_lock&quot;,&quot;ipc_owner&quot;,&quot;sys_module&quot;,&quot;sys_rawio&quot;,&quot;sys_chroot&quot;,&quot;sys_ptrace&quot;,&quot;sys_pacct&quot;,&quot;sys_admin&quot;,&quot;sys_boot&quot;,&quot;sys_nice&quot;,&quot;sys_resource&quot;,&quot;sys_time&quot;,&quot;sys_tty_config&quot;,&quot;mknod&quot;,&quot;lease&quot;,&quot;audit_write&quot;,&quot;audit_control&quot;,&quot;setfcap&quot;,&quot;mac_override&quot;,&quot;mac_admin&quot;,&quot;syslog&quot;,&quot;wake_alarm&quot;,&quot;block_suspend&quot;],&quot;ambient&quot;:null&#125;, &quot;cwd&quot;: &quot;/&quot;, &quot;exe&quot;: &quot;/usr/share/filebeat/bin/filebeat&quot;, &quot;name&quot;: &quot;filebeat&quot;, &quot;pid&quot;: 71667, &quot;ppid&quot;: 1, &quot;seccomp&quot;: &#123;&quot;mode&quot;:&quot;filter&quot;,&quot;no_new_privs&quot;:true&#125;, &quot;start_time&quot;: &quot;2021-12-20T11:11:08.640+0800&quot;&#125;&#125;&#125;</span><br><span class="line">2021-12-20T11:11:08.766+0800    INFO    instance/beat.go:280    Setup Beat: filebeat; Version: 6.8.8</span><br><span class="line">2021-12-20T11:11:08.766+0800    INFO    fileout/file.go:97      Initialized file output. path=tmp/filebeat/slions_nginx_fb max_size_bytes=1024000 max_backups=3 permissions=-rw-------</span><br><span class="line">2021-12-20T11:11:08.766+0800    INFO    [publisher]     pipeline/module.go:110  Beat name: test1</span><br><span class="line">2021-12-20T11:11:08.769+0800    INFO    instance/beat.go:402    filebeat start running.</span><br><span class="line">2021-12-20T11:11:08.769+0800    INFO    registrar/registrar.go:97       No registry file found under: /var/lib/filebeat/registry. Creating a new registry file.</span><br><span class="line">2021-12-20T11:11:08.769+0800    INFO    [monitoring]    log/log.go:117  Starting metrics logging every 30s</span><br><span class="line">2021-12-20T11:11:08.772+0800    INFO    registrar/registrar.go:134      Loading registrar data from /var/lib/filebeat/registry</span><br><span class="line">2021-12-20T11:11:08.772+0800    INFO    registrar/registrar.go:141      States Loaded from registrar: 0</span><br><span class="line">2021-12-20T11:11:08.772+0800    WARN    beater/filebeat.go:367  Filebeat is unable to load the Ingest Node pipelines for the configured modules because the Elasticsearch output is not configured/enabled. If you have already loaded the Ingest Node pipelines or are using Logstash pipelines, you can ignore this warning.</span><br><span class="line">2021-12-20T11:11:08.772+0800    INFO    crawler/crawler.go:72   Loading Inputs: 1</span><br><span class="line">2021-12-20T11:11:08.772+0800    INFO    log/input.go:148        Configured paths: [/var/log/nginx/*.log]</span><br><span class="line">2021-12-20T11:11:08.772+0800    INFO    input/input.go:114      Starting input of type: log; ID: 9032486846567354227</span><br><span class="line">2021-12-20T11:11:08.772+0800    INFO    crawler/crawler.go:106  Loading and starting Inputs completed. Enabled inputs: 1</span><br><span class="line">2021-12-20T11:11:08.772+0800    INFO    log/harvester.go:255    Harvester started for file: /var/log/nginx/access.log</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查看filebeat文件"><a href="#查看filebeat文件" class="headerlink" title="查看filebeat文件"></a>查看filebeat文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 nginx]# cat /tmp/filebeat/slions_nginx_fb</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2021-12-20T03:11:08.772Z&quot;,&quot;@metadata&quot;:&#123;&quot;beat&quot;:&quot;filebeat&quot;,&quot;type&quot;:&quot;doc&quot;,&quot;version&quot;:&quot;6.8.8&quot;&#125;,&quot;offset&quot;:0,&quot;input&quot;:&#123;&quot;type&quot;:&quot;log&quot;&#125;,&quot;host&quot;:&#123;&quot;name&quot;:&quot;test1&quot;&#125;,&quot;message&quot;:&quot;[192.168.100.10] - 我的老家就住在这个屯&quot;,&quot;source&quot;:&quot;/var/log/nginx/access.log&quot;,&quot;log&quot;:&#123;&quot;file&quot;:&#123;&quot;path&quot;:&quot;/var/log/nginx/access.log&quot;&#125;&#125;,&quot;prospector&quot;:&#123;&quot;type&quot;:&quot;log&quot;&#125;,&quot;fields&quot;:&#123;&quot;log_se&quot;:&quot;slions&quot;&#125;,&quot;beat&quot;:&#123;&quot;name&quot;:&quot;test1&quot;,&quot;hostname&quot;:&quot;test1&quot;,&quot;version&quot;:&quot;6.8.8&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2021-12-20T03:11:08.773Z&quot;,&quot;@metadata&quot;:&#123;&quot;beat&quot;:&quot;filebeat&quot;,&quot;type&quot;:&quot;doc&quot;,&quot;version&quot;:&quot;6.8.8&quot;&#125;,&quot;source&quot;:&quot;/var/log/nginx/access.log&quot;,&quot;input&quot;:&#123;&quot;type&quot;:&quot;log&quot;&#125;,&quot;fields&quot;:&#123;&quot;log_se&quot;:&quot;slions&quot;&#125;,&quot;beat&quot;:&#123;&quot;name&quot;:&quot;test1&quot;,&quot;hostname&quot;:&quot;test1&quot;,&quot;version&quot;:&quot;6.8.8&quot;&#125;,&quot;message&quot;:&quot;[192.168.100.10] - 我是这个屯里土生土长的人&quot;,&quot;offset&quot;:50,&quot;log&quot;:&#123;&quot;file&quot;:&#123;&quot;path&quot;:&quot;/var/log/nginx/access.log&quot;&#125;&#125;,&quot;prospector&quot;:&#123;&quot;type&quot;:&quot;log&quot;&#125;,&quot;host&quot;:&#123;&quot;name&quot;:&quot;test1&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>收集到的文件内容放置在了message中。</p><h2 id="查看注册表文件"><a href="#查看注册表文件" class="headerlink" title="查看注册表文件"></a>查看注册表文件</h2><p>从之前的filebeat日志中可知注册表文件为<code>/var/lib/filebeat/registry</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2021-12-20T11:11:08.769+0800    INFO    registrar/registrar.go:97       No registry file found under: /var/lib/filebeat/registry. Creating a new registry file.</span><br><span class="line">2021-12-20T11:11:08.772+0800    INFO    registrar/registrar.go:134      Loading registrar data from /var/lib/filebeat/registry</span><br></pre></td></tr></table></figure><blockquote><p>默认的路径是 <code>$&#123;path.data&#125;/registry</code>，可编辑配置文件中 <code>filebeat.registry_file: registry</code>对其修改。</p></blockquote><blockquote><p>配置<code>registry_flush </code>来控制何时将注册表项写入磁盘(刷新)的超时值。当一个未写的更新超过这个值时，当一个未写的更新超过这个值时，它会触发对磁盘的写操作。默认是0,既每批事件成功发布后，注册表将被写入磁盘。</p></blockquote><p>每收集到一个文件都会将相关信息记录到注册表中，其中通过inode定位文件，通过offset识别位置，通过timestamp记录时间戳。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 nginx]# cat /var/lib/filebeat/registry</span><br><span class="line">[&#123;&quot;source&quot;:&quot;/var/log/nginx/access.log&quot;,&quot;offset&quot;:106,&quot;timestamp&quot;:&quot;2021-12-20T11:12:13.778841289+08:00&quot;,&quot;ttl&quot;:172800000000000,&quot;type&quot;:&quot;log&quot;,&quot;meta&quot;:null,&quot;FileStateOS&quot;:&#123;&quot;inode&quot;:72139638,&quot;device&quot;:64768&#125;&#125;]</span><br></pre></td></tr></table></figure><p>注册表文件仅在刷新新事件时更新，而不是在预定义的时间段内更新。这意味着，在TTL过期的情况下，只有在处理新事件时，这些状态才会被删除。</p><h1 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h1><p>默认情况下，Filebeat将其所有输出发送到syslog。在前台运行Filebeat时，使用-e命令行标志将输出重定向到标准错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filebeat -e</span><br></pre></td></tr></table></figure><p>通过指定-c标志来使用不同的配置文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filebeat -e -c myfilebeatconfig.yml</span><br></pre></td></tr></table></figure><p>启用一个或多个debug选择器，可以增加调试消息的冗长程度。例如，要查看与发布者相关的消息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filebeat -e -d &quot;publisher&quot;</span><br></pre></td></tr></table></figure><p>查看所有的调试输出，使用*:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filebeat -e -d &quot;*&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;日志系统架构上可分为收集、纳管、展示三个层级，业界常说的ELK架构是指elasticsearch（搜索、存储）、Logstash（采集、清洗）、Kibana（展示）的日志系统解决方案。在日志采集方面，logstash对内存、CPU、io等资源消耗比较高，与同类产品Beats</summary>
      
    
    
    
    <category term="云原生" scheme="https://slions.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="logging" scheme="https://slions.github.io/tags/logging/"/>
    
  </entry>
  
  <entry>
    <title>k8s替换容器运行时为containerd</title>
    <link href="https://slions.github.io/2021/12/16/k8s%E6%9B%BF%E6%8D%A2%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E4%B8%BAcontainerd/"/>
    <id>https://slions.github.io/2021/12/16/k8s%E6%9B%BF%E6%8D%A2%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E4%B8%BAcontainerd/</id>
    <published>2021-12-16T11:37:22.000Z</published>
    <updated>2021-12-16T12:51:30.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境描述"><a href="#环境描述" class="headerlink" title="环境描述"></a>环境描述</h1><table><thead><tr><th><strong>主机名</strong></th><th>ip地址</th><th><strong>系统环境</strong></th><th>系统版本</th><th>集群角色</th></tr></thead><tbody><tr><td>slions_pc1</td><td>192.168.100.10</td><td>cpu:x4  mem:8GB  filesystem:40GB</td><td>CentOS  7.6.1810</td><td>k8s master &amp; node</td></tr></tbody></table><p>我本地之前已经安装过kubernetes v1.19.0，使用的运行时是docker，本次测试下如何将k8s的容器运行时换为containerd。</p><h1 id="变更前的工作"><a href="#变更前的工作" class="headerlink" title="变更前的工作"></a>变更前的工作</h1><p>因为这是我的本地测试环境，如果是真实环境需要考虑如何将业务影响最小化，以下是整体的一个思路。</p><h2 id="维护节点"><a href="#维护节点" class="headerlink" title="维护节点"></a>维护节点</h2><p>首先标记需要切换的节点为维护模式，强制驱逐节点上正在运行的 Pod，这样可以最大程度降低切换过程中影响应用的正常运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl cordon  $&lt;NODE_NAME&gt; </span><br></pre></td></tr></table></figure><p>执行完上面的命令后，slions_pc1节点变成了一个 <code>SchedulingDisabled</code> 状态，表示不可调度，这样新创建的 Pod 就不会调度到当前节点上来了。</p><p>接下来维护 slions_pc1节点，使用 <code>kubectl drain</code> 命令来维护节点并驱逐节点上的 Pod：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl drain  $&lt;NODE_NAME&gt;  --ignore-daemonsets</span><br></pre></td></tr></table></figure><p>上面的命令会强制将 node1 节点上的 Pod 进行驱逐，加了一个 <code>--ignore-daemonsets</code> 的参数可以用来忽略 DaemonSet 控制器管理的 Pods，因为这些 Pods 不用驱逐到其他节点去，当节点驱逐完成后接下来我们就可以来对节点进行维护操作了，除了切换容器运行时可以这样操作，比如我们需要变更节点配置、升级内核等操作的时候都可以先将节点进行驱逐，然后再进行维护。</p><h2 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h2><p>为了减小后期产生问题时的干扰因素，将docker、containerd 和 kubelet手动停止。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">systemctl stop containerd</span><br><span class="line">systemctl stop kubelet</span><br></pre></td></tr></table></figure><h1 id="安装containerd"><a href="#安装containerd" class="headerlink" title="安装containerd"></a>安装containerd</h1><p>以下是官方文档中指出的安装和配置的先决条件，之前已经在安装k8s环境时完成了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/containerd.conf</span><br><span class="line">overlay</span><br><span class="line">br_netfilter</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo modprobe overlay</span><br><span class="line">sudo modprobe br_netfilter</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Setup required sysctl params, these persist across reboots.</span></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf</span><br><span class="line">net.bridge.bridge-nf-call-iptables  = 1</span><br><span class="line">net.ipv4.ip_forward                 = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">EOF</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Apply sysctl params without reboot</span></span><br><span class="line">sudo sysctl --system</span><br></pre></td></tr></table></figure><p>之前环境安装过docker，docker 默认使用了 containerd 作为后端的容器运行时，所以不需要单独安装 containerd 了。</p><h1 id="配置containerd"><a href="#配置containerd" class="headerlink" title="配置containerd"></a>配置containerd</h1><p>因为 containerd 中默认已经实现了 CRI，但是是以 plugin 的形式配置的，以前 Docker 中自带的 containerd 默认是将 CRI 这个插件禁用掉了的（使用配置 <code>disabled_plugins = [&quot;cri&quot;]</code>），所以这里我们重新生成默认的配置文件来覆盖掉：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@slions-pc1 ~]# containerd config default &gt; /etc/containerd/config.toml</span><br></pre></td></tr></table></figure><p>配置文件内容为：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">root</span> = <span class="string">&quot;/var/lib/containerd&quot;</span></span><br><span class="line"><span class="attr">state</span> = <span class="string">&quot;/run/containerd&quot;</span></span><br><span class="line"><span class="attr">plugin_dir</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">disabled_plugins</span> = []</span><br><span class="line"><span class="attr">required_plugins</span> = []</span><br><span class="line"><span class="attr">oom_score</span> = -<span class="number">999</span></span><br><span class="line"></span><br><span class="line"><span class="section">[grpc]</span></span><br><span class="line">  <span class="attr">address</span> = <span class="string">&quot;/run/containerd/containerd.sock&quot;</span></span><br><span class="line">  <span class="attr">tcp_address</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">tcp_tls_cert</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">tcp_tls_key</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">uid</span> = <span class="number">0</span></span><br><span class="line">  <span class="attr">gid</span> = <span class="number">0</span></span><br><span class="line">  <span class="attr">max_recv_message_size</span> = <span class="number">16777216</span></span><br><span class="line">  <span class="attr">max_send_message_size</span> = <span class="number">16777216</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ttrpc]</span></span><br><span class="line">  <span class="attr">address</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">uid</span> = <span class="number">0</span></span><br><span class="line">  <span class="attr">gid</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="section">[debug]</span></span><br><span class="line">  <span class="attr">address</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">uid</span> = <span class="number">0</span></span><br><span class="line">  <span class="attr">gid</span> = <span class="number">0</span></span><br><span class="line">  <span class="attr">level</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[metrics]</span></span><br><span class="line">  <span class="attr">address</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">grpc_histogram</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[cgroup]</span></span><br><span class="line">  <span class="attr">path</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[timeouts]</span></span><br><span class="line">  <span class="attr">&quot;io.containerd.timeout.shim.cleanup&quot;</span> = <span class="string">&quot;5s&quot;</span></span><br><span class="line">  <span class="attr">&quot;io.containerd.timeout.shim.load&quot;</span> = <span class="string">&quot;5s&quot;</span></span><br><span class="line">  <span class="attr">&quot;io.containerd.timeout.shim.shutdown&quot;</span> = <span class="string">&quot;3s&quot;</span></span><br><span class="line">  <span class="attr">&quot;io.containerd.timeout.task.state&quot;</span> = <span class="string">&quot;2s&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[plugins]</span></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.gc.v1.scheduler&quot;]</span></span><br><span class="line">    <span class="attr">pause_threshold</span> = <span class="number">0.02</span></span><br><span class="line">    <span class="attr">deletion_threshold</span> = <span class="number">0</span></span><br><span class="line">    <span class="attr">mutation_threshold</span> = <span class="number">100</span></span><br><span class="line">    <span class="attr">schedule_delay</span> = <span class="string">&quot;0s&quot;</span></span><br><span class="line">    <span class="attr">startup_delay</span> = <span class="string">&quot;100ms&quot;</span></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;]</span></span><br><span class="line">    <span class="attr">disable_tcp_service</span> = <span class="literal">true</span></span><br><span class="line">    <span class="attr">stream_server_address</span> = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    <span class="attr">stream_server_port</span> = <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="attr">stream_idle_timeout</span> = <span class="string">&quot;4h0m0s&quot;</span></span><br><span class="line">    <span class="attr">enable_selinux</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">selinux_category_range</span> = <span class="number">1024</span></span><br><span class="line">    <span class="attr">sandbox_image</span> = <span class="string">&quot;registry.aliyuncs.com/google_containers/pause:3.2&quot;</span></span><br><span class="line">    <span class="attr">stats_collect_period</span> = <span class="number">10</span></span><br><span class="line">    <span class="attr">systemd_cgroup</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">enable_tls_streaming</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">max_container_log_line_size</span> = <span class="number">16384</span></span><br><span class="line">    <span class="attr">disable_cgroup</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">disable_apparmor</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">restrict_oom_score_adj</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">max_concurrent_downloads</span> = <span class="number">3</span></span><br><span class="line">    <span class="attr">disable_proc_mount</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">unset_seccomp_profile</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">tolerate_missing_hugetlb_controller</span> = <span class="literal">true</span></span><br><span class="line">    <span class="attr">disable_hugetlb_controller</span> = <span class="literal">true</span></span><br><span class="line">    <span class="attr">ignore_image_defined_volumes</span> = <span class="literal">false</span></span><br><span class="line">    <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd]</span></span><br><span class="line">      <span class="attr">snapshotter</span> = <span class="string">&quot;overlayfs&quot;</span></span><br><span class="line">      <span class="attr">default_runtime_name</span> = <span class="string">&quot;runc&quot;</span></span><br><span class="line">      <span class="attr">no_pivot</span> = <span class="literal">false</span></span><br><span class="line">      <span class="attr">disable_snapshot_annotations</span> = <span class="literal">true</span></span><br><span class="line">      <span class="attr">discard_unpacked_layers</span> = <span class="literal">false</span></span><br><span class="line">      <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.default_runtime]</span></span><br><span class="line">        <span class="attr">runtime_type</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">runtime_engine</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">runtime_root</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">privileged_without_host_devices</span> = <span class="literal">false</span></span><br><span class="line">        <span class="attr">base_runtime_spec</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.untrusted_workload_runtime]</span></span><br><span class="line">        <span class="attr">runtime_type</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">runtime_engine</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">runtime_root</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">privileged_without_host_devices</span> = <span class="literal">false</span></span><br><span class="line">        <span class="attr">base_runtime_spec</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes]</span></span><br><span class="line">        <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc]</span></span><br><span class="line">          <span class="attr">runtime_type</span> = <span class="string">&quot;io.containerd.runc.v2&quot;</span></span><br><span class="line">          <span class="attr">runtime_engine</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">runtime_root</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">privileged_without_host_devices</span> = <span class="literal">false</span></span><br><span class="line">          <span class="attr">base_runtime_spec</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options]</span></span><br><span class="line">            <span class="attr">SystemdCgroup</span> = <span class="literal">true</span></span><br><span class="line">    <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.cni]</span></span><br><span class="line">      <span class="attr">bin_dir</span> = <span class="string">&quot;/opt/cni/bin&quot;</span></span><br><span class="line">      <span class="attr">conf_dir</span> = <span class="string">&quot;/etc/cni/net.d&quot;</span></span><br><span class="line">      <span class="attr">max_conf_num</span> = <span class="number">1</span></span><br><span class="line">      <span class="attr">conf_template</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry]</span></span><br><span class="line">      <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors]</span></span><br><span class="line">        <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;docker.io&quot;]</span></span><br><span class="line">          <span class="attr">endpoint</span> = [<span class="string">&quot;https://registry-1.docker.io&quot;</span>]</span><br><span class="line">    <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.image_decryption]</span></span><br><span class="line">      <span class="attr">key_model</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.x509_key_pair_streaming]</span></span><br><span class="line">      <span class="attr">tls_cert_file</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="attr">tls_key_file</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.internal.v1.opt&quot;]</span></span><br><span class="line">    <span class="attr">path</span> = <span class="string">&quot;/opt/containerd&quot;</span></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.internal.v1.restart&quot;]</span></span><br><span class="line">    <span class="attr">interval</span> = <span class="string">&quot;10s&quot;</span></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.metadata.v1.bolt&quot;]</span></span><br><span class="line">    <span class="attr">content_sharing_policy</span> = <span class="string">&quot;shared&quot;</span></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.monitor.v1.cgroups&quot;]</span></span><br><span class="line">    <span class="attr">no_prometheus</span> = <span class="literal">false</span></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.runtime.v1.linux&quot;]</span></span><br><span class="line">    <span class="attr">shim</span> = <span class="string">&quot;containerd-shim&quot;</span></span><br><span class="line">    <span class="attr">runtime</span> = <span class="string">&quot;runc&quot;</span></span><br><span class="line">    <span class="attr">runtime_root</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">no_shim</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">shim_debug</span> = <span class="literal">false</span></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.runtime.v2.task&quot;]</span></span><br><span class="line">    <span class="attr">platforms</span> = [<span class="string">&quot;linux/amd64&quot;</span>]</span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.service.v1.diff-service&quot;]</span></span><br><span class="line">    <span class="attr">default</span> = [<span class="string">&quot;walking&quot;</span>]</span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.snapshotter.v1.devmapper&quot;]</span></span><br><span class="line">    <span class="attr">root_path</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">pool_name</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">base_image_size</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">async_remove</span> = <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要注意的有几点：</p><ol><li>修改默认的 pause 镜像为我之前所用的地址。</li></ol><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[plugins]</span></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;]</span></span><br><span class="line">    <span class="attr">sandbox_image</span> = <span class="string">&quot;registry.aliyuncs.com/google_containers/pause:3.2&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>如果使用<code>systemd</code> 作为<code>cgroup driver</code>的话，需要修改下面字段。</li></ol><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[plugins]</span></span><br><span class="line">    <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd]</span></span><br><span class="line">      <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes]</span></span><br><span class="line">        <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc]</span></span><br><span class="line">          <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options]</span></span><br><span class="line">            <span class="attr">SystemdCgroup</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="修改-kubelet-配置"><a href="#修改-kubelet-配置" class="headerlink" title="修改 kubelet 配置"></a>修改 kubelet 配置</h1><p>将容器运行时配置为 <code>containerd</code>，打开 <code>/etc/sysconfig/kubelet</code> 文件，在该文件中可以添加一些额外的 kubelet 启动参数，配置如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KUBELET_EXTRA_ARGS=&#x27;--container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock&#x27;</span><br></pre></td></tr></table></figure><ul><li><code>--container-runtime</code> 参数是用来指定使用的容器运行时的，可选值为 <code>docker</code> 或者 <code>remote</code>，默认是 <code>docker</code>，由于这里使用的是 containerd 这种容器运行时，所以配置为 <code>remote</code> 值（也就是除 <code>docker</code> 之外的容器运行时都应该指定为 <code>remote</code>）</li><li><code>--container-runtime-endpoint</code> 是用来指定远程的运行时服务的 endpiont 地址的，这里指定连接 containerd 的套接字地址 <code>unix:///run/containerd/containerd.sock</code>。</li></ul><h1 id="恢复服务"><a href="#恢复服务" class="headerlink" title="恢复服务"></a>恢复服务</h1><p>配置完成后重启 containerd 和 kubelet 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart containerd</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure><p>查看节点状态是否正常：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@slions-pc1 ~]# kubectl get node -o wide</span><br><span class="line">NAME         STATUS   ROLES    AGE   VERSION   INTERNAL-IP      EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION          CONTAINER-RUNTIME</span><br><span class="line">slions-pc1   Ready    master   2d    v1.19.0   192.168.100.10   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-957.el7.x86_64   containerd://1.4.12</span><br></pre></td></tr></table></figure><p>slions_pc1节点的容器运行时已经切换到 <code>containerd://1.4.12</code> 了。</p><h1 id="恢复调度"><a href="#恢复调度" class="headerlink" title="恢复调度"></a>恢复调度</h1><p>最后把节点重新加回到集群中来允许调度 Pod。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl uncordon $&lt;NODE_NAME&gt; </span><br></pre></td></tr></table></figure><h1 id="crictl"><a href="#crictl" class="headerlink" title="crictl"></a>crictl</h1><p>可以使用 <code>ctr</code> 命令来管理 containerd，查看多了一个名为 <code>k8s.io</code> 的命名空间：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@slions-pc1 ~]# ctr ns ls</span><br><span class="line">NAME   LABELS</span><br><span class="line">k8s.io</span><br><span class="line">moby</span><br></pre></td></tr></table></figure><p> kubernetes集群对接的 containerd 所有资源都在 <code>k8s.io</code> 的命名空间下面，而 docker 的则默认在 <code>moby</code> 下面，当然现在 <code>moby</code> 下面没有任何的数据了，但是在 <code>k8s.io</code> 命名空间下面就有很多镜像和容器资源了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[root@slions-pc1 ~]# ctr -n k8s.io t ls</span><br><span class="line">TASK                                                                PID      STATUS</span><br><span class="line">17ae102739d906d0accba9c1e585084b85f8ce663373f15784d6ba68ace74b1d    35543    RUNNING</span><br><span class="line">71da443d2b4005a37e879ed1c6d563ed775ae0d2291d10ea41f82b9ec9fa593d    51711    RUNNING</span><br><span class="line">9545145b2d9854fc80ee15a3bfe1f0b57fd8a0bd4630b571947c350adfe897b0    53337    RUNNING</span><br><span class="line">3fb571cc7679101e630b9fabc7159346fcf2004110844bf74850710bd182cd36    53459    RUNNING</span><br><span class="line">71890ef89c6b61f3a5d118c050d37bd796b01700d3449735ad6ca14fa3c9b40f    35169    RUNNING</span><br><span class="line">6e688d8e857237919e7a81c186502d10b9dc8bb15bfbfbd8e400419039d2cacb    35447    RUNNING</span><br><span class="line">cad990849d28051b75df2fd855d12ffad81065a49091c19f20480ecbc72f7c56    35116    RUNNING</span><br><span class="line">b5869243675c19aade230142e7a15e564e9b031b5cd32a901475291b2f1f59c2    53685    RUNNING</span><br><span class="line">51e15fd5f4961283c32fc63bfa7a166ee3e6289aef19f14ffd3a95410640ea12    35351    RUNNING</span><br><span class="line">484541d3b39bbe199b7c16a5049b53a6f0950435b1123dca23064b7a72901917    35604    RUNNING</span><br><span class="line">2f5c0484bb866d79bfdd1d2f3a6100a4559404bdb903b71a4af879468fc5bc7a    35393    RUNNING</span><br><span class="line">31e6e8d32619247f01b21f76c73a5ab1a3b72da12142f6280dfca1824b3c051d    53743    RUNNING</span><br><span class="line">d6fe5b981c93ab1b9870adaa14599710d26a58d2eb8604d5b08c2a30eb3aa11e    53846    RUNNING</span><br><span class="line">ec086f05f1063ab3197e5d1342b5febeaa978535baae0f5533616b79b78023fa    53878    RUNNING</span><br><span class="line">ea80243d5a9e662b141dda43d229b8e68e95d1a6077d7837f0a88bb2d1e4dbbd    51743    RUNNING</span><br><span class="line">468ae24960d0cc200573b8609c03944e45d202ed37fe9148e678f178e8112f05    35015    RUNNING</span><br><span class="line">[root@slions-pc1 ~]# ctr -n moby t ls</span><br><span class="line">TASK    PID    STATUS</span><br><span class="line">[root@slions-pc1 ~]# ctr -n k8s.io i ls -q</span><br><span class="line">docker.io/rancher/mirrored-flannelcni-flannel-cni-plugin:v1.0.0</span><br><span class="line">docker.io/rancher/mirrored-flannelcni-flannel-cni-plugin@sha256:bfe8f30c74bc6f31eba0cc6659e396dbdd5ab171314ed542cc238ae046660ede</span><br><span class="line">quay.io/coreos/flannel:v0.15.1</span><br><span class="line">quay.io/coreos/flannel@sha256:9a296fbb67790659adc3701e287adde3c59803b7fcefe354f1fc482840cdb3d9</span><br><span class="line">registry.aliyuncs.com/google_containers/coredns:1.7.0</span><br><span class="line">registry.aliyuncs.com/google_containers/coredns@sha256:73ca82b4ce829766d4f1f10947c3a338888f876fbed0540dc849c89ff256e90c</span><br><span class="line">registry.aliyuncs.com/google_containers/etcd:3.4.9-1</span><br><span class="line">registry.aliyuncs.com/google_containers/etcd@sha256:735f090b15d5efc576da1602d8c678bf39a7605c0718ed915daec8f2297db2ff</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-apiserver:v1.19.0</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-apiserver@sha256:522d17d35a8994637d27d1232bebd35cfae8e3e21ab359431403f2b8023e332c</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-controller-manager:v1.19.0</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-controller-manager@sha256:6c11a3d4d06385f7547a5ea0c3f0d5e7b12baa558111d01406ac1f778cb3f00b</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-proxy:v1.19.0</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-proxy@sha256:c752ecbd04bc4517168a19323bb60fb45324eee1e480b2b97d3fd6ea0a54f42d</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-scheduler:v1.19.0</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-scheduler@sha256:529a1566960a5b3024f2c94128e1cbd882ca1804f222ec5de99b25567858ecb9</span><br><span class="line">registry.aliyuncs.com/google_containers/pause:3.2</span><br><span class="line">registry.aliyuncs.com/google_containers/pause@sha256:927d98197ec1141a368550822d18fa1c60bdae27b78b0c004f705f548c07814f</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>ctr</code>工具比起docker cli工具太难用了，<code>crictl</code> 为 CRI 兼容的容器运行时提供 CLI，后续可以使用<code>crictl</code>工具来进行运维。</p><p>安装K8s时默认是装了cri-tools软件包的，所以可以直接上手。</p><p>需要修改下默认的配置文件，默认为 <code>/etc/crictl.yaml</code>，在文件中指定容器运行时和镜像的 endpoint 地址，内容如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">runtime-endpoint: unix:///run/containerd/containerd.sock</span><br><span class="line">image-endpoint: unix:///run/containerd/containerd.sock</span><br><span class="line">debug: false</span><br><span class="line">pull-image-on-create: true</span><br></pre></td></tr></table></figure><p>配置完成后就可以使用 <code>crictl</code> 命令了。</p><h2 id="获取-Pod-列表"><a href="#获取-Pod-列表" class="headerlink" title="获取 Pod 列表"></a>获取 Pod 列表</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@slions-pc1 home]# crictl pods</span><br><span class="line">POD ID              CREATED             STATE               NAME                                 NAMESPACE           ATTEMPT             RUNTIME</span><br><span class="line">d6fe5b981c93a       About an hour ago   Ready               coredns-6d56c8448f-mlj4r             kube-system         0                   (default)</span><br><span class="line">b5869243675c1       About an hour ago   Ready               coredns-6d56c8448f-vtx97             kube-system         0                   (default)</span><br><span class="line">9545145b2d985       About an hour ago   Ready               kube-flannel-ds-4qwnd                kube-system         0                   (default)</span><br><span class="line">71da443d2b400       About an hour ago   Ready               kube-controller-manager-slions-pc1   kube-system         0                   (default)</span><br><span class="line">17ae102739d90       3 hours ago         Ready               kube-proxy-dd4dg                     kube-system         0                   (default)</span><br><span class="line">71890ef89c6b6       3 hours ago         Ready               kube-apiserver-slions-pc1            kube-system         0                   (default)</span><br><span class="line">cad990849d280       3 hours ago         Ready               etcd-slions-pc1                      kube-system         0                   (default)</span><br><span class="line">468ae24960d0c       3 hours ago         Ready               kube-scheduler-slions-pc1            kube-system         0                   (default)</span><br><span class="line">[root@slions-pc1 home]# crictl pods --name kube-apiserver-slions-pc1</span><br><span class="line">POD ID              CREATED             STATE               NAME                        NAMESPACE           ATTEMPT             RUNTIME</span><br><span class="line">71890ef89c6b6       3 hours ago         Ready               kube-apiserver-slions-pc1   kube-system         0                   (default)</span><br><span class="line">[root@slions-pc1 home]# crictl pods --label app=flannel</span><br><span class="line">POD ID              CREATED             STATE               NAME                    NAMESPACE           ATTEMPT             RUNTIME</span><br><span class="line">9545145b2d985       About an hour ago   Ready               kube-flannel-ds-4qwnd   kube-system         0                   (default)</span><br></pre></td></tr></table></figure><h2 id="获取镜像列表"><a href="#获取镜像列表" class="headerlink" title="获取镜像列表"></a>获取镜像列表</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@slions-pc1 home]# crictl images</span><br><span class="line">IMAGE                                                             TAG                 IMAGE ID            SIZE</span><br><span class="line">docker.io/rancher/mirrored-flannelcni-flannel-cni-plugin          v1.0.0              cd5235cd7dc26       4.68MB</span><br><span class="line">quay.io/coreos/flannel                                            v0.15.1             e6ea68648f0cd       21.7MB</span><br><span class="line">registry.aliyuncs.com/google_containers/coredns                   1.7.0               bfe3a36ebd252       14MB</span><br><span class="line">registry.aliyuncs.com/google_containers/etcd                      3.4.9-1             d4ca8726196cb       86.7MB</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-apiserver            v1.19.0             1b74e93ece2f5       29.7MB</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-controller-manager   v1.19.0             09d665d529d07       28MB</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-proxy                v1.19.0             bc9c328f379ce       49.3MB</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-scheduler            v1.19.0             cbdc8369d8b15       13.8MB</span><br><span class="line">registry.aliyuncs.com/google_containers/pause                     3.2                 80d28bedfe5de       300kB</span><br></pre></td></tr></table></figure><h2 id="获取容器列表"><a href="#获取容器列表" class="headerlink" title="获取容器列表"></a>获取容器列表</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@slions-pc1 home]# crictl ps</span><br><span class="line">CONTAINER           IMAGE               CREATED             STATE               NAME                      ATTEMPT             POD ID</span><br><span class="line">ec086f05f1063       bfe3a36ebd252       About an hour ago   Running             coredns                   0                   d6fe5b981c93a</span><br><span class="line">31e6e8d326192       bfe3a36ebd252       About an hour ago   Running             coredns                   0                   b5869243675c1</span><br><span class="line">3fb571cc76791       e6ea68648f0cd       About an hour ago   Running             kube-flannel              0                   9545145b2d985</span><br><span class="line">ea80243d5a9e6       09d665d529d07       About an hour ago   Running             kube-controller-manager   0                   71da443d2b400</span><br><span class="line">484541d3b39bb       bc9c328f379ce       3 hours ago         Running             kube-proxy                0                   17ae102739d90</span><br><span class="line">6e688d8e85723       1b74e93ece2f5       3 hours ago         Running             kube-apiserver            0                   71890ef89c6b6</span><br><span class="line">2f5c0484bb866       d4ca8726196cb       3 hours ago         Running             etcd                      0                   cad990849d280</span><br><span class="line">51e15fd5f4961       cbdc8369d8b15       3 hours ago         Running             kube-scheduler            0                   468ae24960d0c</span><br><span class="line"></span><br><span class="line">[root@slions-pc1 home]# crictl ps -s Running</span><br><span class="line">CONTAINER           IMAGE               CREATED             STATE               NAME                      ATTEMPT             POD ID</span><br><span class="line">ec086f05f1063       bfe3a36ebd252       About an hour ago   Running             coredns                   0                   d6fe5b981c93a</span><br><span class="line">31e6e8d326192       bfe3a36ebd252       About an hour ago   Running             coredns                   0                   b5869243675c1</span><br><span class="line">3fb571cc76791       e6ea68648f0cd       About an hour ago   Running             kube-flannel              0                   9545145b2d985</span><br><span class="line">ea80243d5a9e6       09d665d529d07       About an hour ago   Running             kube-controller-manager   0                   71da443d2b400</span><br><span class="line">484541d3b39bb       bc9c328f379ce       3 hours ago         Running             kube-proxy                0                   17ae102739d90</span><br><span class="line">6e688d8e85723       1b74e93ece2f5       3 hours ago         Running             kube-apiserver            0                   71890ef89c6b6</span><br><span class="line">2f5c0484bb866       d4ca8726196cb       3 hours ago         Running             etcd                      0                   cad990849d280</span><br><span class="line">51e15fd5f4961       cbdc8369d8b15       3 hours ago         Running             kube-scheduler            0                   468ae24960d0c</span><br><span class="line"></span><br><span class="line">[root@slions-pc1 home]# crictl exec -it 3fb571cc76791 date</span><br><span class="line">Thu Dec 16 12:45:35 UTC 2021</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="CLI对比"><a href="#CLI对比" class="headerlink" title="CLI对比"></a>CLI对比</h1><table><thead><tr><th align="left">命令</th><th align="left">Docker</th><th align="left">Containerd</th><th></th></tr></thead><tbody><tr><td align="left">docker</td><td align="left">crictl（推荐）</td><td align="left">ctr</td><td></td></tr><tr><td align="left">查看容器列表</td><td align="left"><code>docker ps</code></td><td align="left"><code>crictl ps</code></td><td><code>ctr -n k8s.io c ls</code></td></tr><tr><td align="left">查看容器详情</td><td align="left"><code>docker inspect</code></td><td align="left"><code>crictl inspect</code></td><td><code>ctr -n k8s.io c info</code></td></tr><tr><td align="left">查看容器日志</td><td align="left"><code>docker logs</code></td><td align="left"><code>crictl logs</code></td><td>无</td></tr><tr><td align="left">容器内执行命令</td><td align="left"><code>docker exec</code></td><td align="left"><code>crictl exec</code></td><td>无</td></tr><tr><td align="left">挂载容器</td><td align="left"><code>docker attach</code></td><td align="left"><code>crictl attach</code></td><td>无</td></tr><tr><td align="left">显示容器资源使用情况</td><td align="left"><code>docker stats</code></td><td align="left"><code>crictl stats</code></td><td>无</td></tr><tr><td align="left">创建容器</td><td align="left"><code>docker create</code></td><td align="left"><code>crictl create</code></td><td><code>ctr -n k8s.io c create</code></td></tr><tr><td align="left">启动容器</td><td align="left"><code>docker start</code></td><td align="left"><code>crictl start</code></td><td><code>ctr -n k8s.io run</code></td></tr><tr><td align="left">停止容器</td><td align="left"><code>docker stop</code></td><td align="left"><code>crictl stop</code></td><td>无</td></tr><tr><td align="left">删除容器</td><td align="left"><code>docker rm</code></td><td align="left"><code>crictl rm</code></td><td><code>ctr -n k8s.io c del</code></td></tr><tr><td align="left">查看镜像列表</td><td align="left"><code>docker images</code></td><td align="left"><code>crictl images</code></td><td><code>ctr -n k8s.io i ls</code></td></tr><tr><td align="left">查看镜像详情</td><td align="left"><code>docker inspect</code></td><td align="left"><code>crictl inspecti</code></td><td>无</td></tr><tr><td align="left">拉取镜像</td><td align="left"><code>docker pull</code></td><td align="left"><code>crictl pull</code></td><td><code>ctr -n k8s.io i pull</code></td></tr><tr><td align="left">推送镜像</td><td align="left"><code>docker push</code></td><td align="left">无</td><td><code>ctr -n k8s.io i push</code></td></tr><tr><td align="left">删除镜像</td><td align="left"><code>docker rmi</code></td><td align="left"><code>crictl rmi</code></td><td><code>ctr -n k8s.io i rm</code></td></tr><tr><td align="left">查看Pod列表</td><td align="left">无</td><td align="left"><code>crictl pods</code></td><td>无</td></tr><tr><td align="left">查看Pod详情</td><td align="left">无</td><td align="left"><code>crictl inspectp</code></td><td>无</td></tr><tr><td align="left">启动Pod</td><td align="left">无</td><td align="left"><code>crictl runp</code></td><td>无</td></tr><tr><td align="left">停止Pod</td><td align="left">无</td><td align="left"><code>crictl stopp</code></td><td>无</td></tr></tbody></table><p> <code>crictl pods</code> 列出的是 Pod 的信息，包括 Pod 所在的命名空间以及状态。<code>crictl ps</code> 列出的是应用容器的信息，而 <code>docker ps</code> 列出的是初始化容器（pause 容器）和应用容器的信息，初始化容器在每个 Pod 启动时都会创建，通常不会关注，所以 <code>crictl</code> 使用起来更简洁明了一些。</p><h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><p>docker 和 containerd 除了在常用命令上有些区别外，在容器日志及相关参数配置方面也存在一些差异。</p><p>当使用 Docker 作为 Kubernetes 容器运行时的时候，容器日志的落盘是由 Docker 来完成的，日志被保存在类似 <code>/var/lib/docker/containers/&lt;CONTAINER&gt;</code> 的目录下面，kubelet 会在 <code>/var/log/pods</code> 和 <code>/var/log/containers</code> 下面创建软链接，指向容器日志目录下的容器日志文件。对应的日志相关配置可以通过配置文件进行指定，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# cat /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-size&quot;: &quot;50m&quot;,</span><br><span class="line">    &quot;max-file&quot;: &quot;3&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而当使用 containerd 作为 Kubernetes 容器运行时的时候，容器日志的落盘则由 kubelet 来完成了，被直接保存在 <code>/var/log/pods/&lt;CONTAINER&gt;</code> 目录下面，同时在 <code>/var/log/containers</code> 目录下创建软链接指向日志文件。同样日志配置则是通过 kubelet 参数中进行指定的，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--container-log-max-files=10 --container-log-max-size=&quot;100Mi&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境描述&quot;&gt;&lt;a href=&quot;#环境描述&quot; class=&quot;headerlink&quot; title=&quot;环境描述&quot;&gt;&lt;/a&gt;环境描述&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;主机名&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;ip地址&lt;/th&gt;
</summary>
      
    
    
    
    <category term="云原生" scheme="https://slions.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="kubernetes" scheme="https://slions.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>CRI之containerd</title>
    <link href="https://slions.github.io/2021/12/15/CRI%E4%B9%8Bcontainerd/"/>
    <id>https://slions.github.io/2021/12/15/CRI%E4%B9%8Bcontainerd/</id>
    <published>2021-12-15T07:18:52.000Z</published>
    <updated>2021-12-15T13:43:28.617Z</updated>
    
    <content type="html"><![CDATA[<p>从<a href="/2021/12/07/K8S-Runtime-CRI-OCI-contained-dockershim-%E7%90%86%E8%A7%A3%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/" title="这篇文章">这篇文章</a>可以了解云原生领域CRI与OCI的由来，为了制约docker在容器运行时的垄断地位，Google与IBM、Redhat等公司成立了CNCF，形成以kubernetes服务编排为基础，建设其周边云原生产品的生态，并陆续提出了CRI（容器运行时接口）、CSI（容器存储接口）、CNI（容器网络接口）的规范。</p><p>上篇文章开篇的图上可知，当前docker并没有实现CRI的规范，需要通过kubelet中集成了dokcershim（垫片）来进行“翻译”，并且对比后面直接使用containerd或者cri-o的方案来说，docker的这种实现太冗余了，性能会有较大的开销。但对于当前来说，docker依旧是主要的企业级容器运行时。</p><p>kubernetes在1.20版本之后废弃docker作为容器运行时，这也符合其产品理念，后续去除掉dockershim支持，还能实现kubernetes与docker的解耦，减少kubernetes社区的负担，也能够使得kubernetes的运行时支持上可以有更好的演进和发展。</p><p>类似的事情就如之前kubernetes支持的持久化存储，厂商会将存储插件代码到kubernetes核心代码中，后续改为统一的基于CSI的实现，而kubernetes就专注于CSI就行了，不用再跟很多厂商的代码耦合了。</p><h1 id="containerd"><a href="#containerd" class="headerlink" title="containerd"></a>containerd</h1><p><img src="https://slions.gitee.io/picbed/img/containerd1.png"></p><blockquote><p>Containerd是一个工业标准的容器运行时，重点是它简洁，健壮，便携，在Linux和window上可以作为一个守护进程运行，它可以管理主机系统上容器的完整的生命周期：镜像传输和存储，容器的执行和监控，低级别的存储和网络。</p><p>摘自<a href="https://hub.fastgit.org/containerd/containerd">《containerd官方文档》</a></p></blockquote><h2 id="Containerd-的架构"><a href="#Containerd-的架构" class="headerlink" title="Containerd 的架构"></a>Containerd 的架构</h2><p><img src="https://slions.gitee.io/picbed/img/containerd3.png"></p><p>可以看到 Containerd 仍然采用标准的 C/S 架构，服务端通过 <code>GRPC</code> 协议提供稳定的 API，客户端通过调用服务端的 API 进行高级的操作。</p><p>为了解耦，Containerd 将不同的职责划分给不同的组件，每个组件就相当于一个<strong>子系统</strong>（subsystem）。连接不同子系统的组件被称为模块。</p><p>下图是官方文档中的架构图：</p><p><img src="https://slions.gitee.io/picbed/img/containerd2.png"></p><p>具体的实现细节还需要经过一段时间的研究才能了解。</p><h2 id="CRI性能对比图"><a href="#CRI性能对比图" class="headerlink" title="CRI性能对比图"></a>CRI性能对比图</h2><p>在安装使用前，看一张别人使用bucketbench对 <code>Docker</code>、<code>crio</code> 和 <code>Containerd</code> 的性能测试结果，包括启动、停止和删除容器，以比较它们所耗的时间：</p><p><img src="https://slions.gitee.io/picbed/img/containerd4.png"></p><p>可以看到，containerd在其中属于佼佼者。</p><h1 id="containerd安装"><a href="#containerd安装" class="headerlink" title="containerd安装"></a>containerd安装</h1><h2 id="环境描述"><a href="#环境描述" class="headerlink" title="环境描述"></a>环境描述</h2><table><thead><tr><th><strong>主机名</strong></th><th>ip地址</th><th><strong>系统环境</strong></th><th>系统版本</th><th>内核版本</th></tr></thead><tbody><tr><td>slions_pc2</td><td>192.168.100.11</td><td>cpu:x2  mem:4GB  filesystem:20GB</td><td>CentOS Linux release 7.6.1810</td><td>3.10.0-957.el7.x86_64</td></tr></tbody></table><h2 id="下载与解压资源包"><a href="#下载与解压资源包" class="headerlink" title="下载与解压资源包"></a>下载与解压资源包</h2><p>主要有两种方式安装，可以使用yum安装，也可以下载离线包进行安装，另外如果是之前安装过docker的话，containerd也会自动安装的。</p><p>首先从官网找到对应的<a href="https://hub.fastgit.org/containerd/containerd/releases/tag/v1.5.8">压缩包</a>,我这里是使用的1.5.8版本来进行后续实验。</p><p><img src="https://slions.gitee.io/picbed/img/containerd5.png"></p><p>Containerd 提供了两个压缩包，一个叫 <code>containerd-$&#123;VERSION&#125;.$&#123;OS&#125;-$&#123;ARCH&#125;.tar.gz</code>，另一个叫 <code>cri-containerd-$&#123;VERSION&#125;.$&#123;OS&#125;-$&#123;ARCH&#125;.tar.gz</code>。其中 <code>cri-containerd-$&#123;VERSION&#125;.$&#123;OS&#125;-$&#123;ARCH&#125;.tar.gz</code> 包含了所有 Kubernetes 需要的二进制文件。Containerd 是需要调用 <code>runc</code> 的，而第一个压缩包是不包含 <code>runc</code> 二进制文件的，如果选择第一个压缩包，还需要提前安装 runc。这里我本地环境是完全干净的，就直接使用 <code>cri-containerd</code> 压缩包。</p><p>下载到服务器解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc2 ~]# ls</span><br><span class="line">anaconda-ks.cfg  cri-containerd-cni-1.5.8-linux-amd64.tar.gz</span><br><span class="line">[root@slions_pc2 ~]# tar -C / -zxf cri-containerd-cni-1.5.8-linux-amd64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash">会生成如下文件</span></span><br><span class="line">etc/</span><br><span class="line">etc/systemd/</span><br><span class="line">etc/systemd/system/</span><br><span class="line">etc/systemd/system/containerd.service</span><br><span class="line">etc/crictl.yaml</span><br><span class="line">etc/cni/</span><br><span class="line">etc/cni/net.d/</span><br><span class="line">etc/cni/net.d/10-containerd-net.conflist</span><br><span class="line">usr/</span><br><span class="line">usr/local/</span><br><span class="line">usr/local/sbin/</span><br><span class="line">usr/local/sbin/runc</span><br><span class="line">usr/local/bin/</span><br><span class="line">usr/local/bin/containerd</span><br><span class="line">usr/local/bin/crictl</span><br><span class="line">usr/local/bin/ctd-decoder</span><br><span class="line">usr/local/bin/critest</span><br><span class="line">usr/local/bin/containerd-shim-runc-v1</span><br><span class="line">usr/local/bin/containerd-shim-runc-v2</span><br><span class="line">usr/local/bin/containerd-stress</span><br><span class="line">usr/local/bin/ctr</span><br><span class="line">usr/local/bin/containerd-shim</span><br><span class="line">opt/</span><br><span class="line">opt/containerd/</span><br><span class="line">opt/containerd/cluster/</span><br><span class="line">opt/containerd/cluster/version</span><br><span class="line">opt/containerd/cluster/gce/</span><br><span class="line">opt/containerd/cluster/gce/configure.sh</span><br><span class="line">opt/containerd/cluster/gce/cni.template</span><br><span class="line">opt/containerd/cluster/gce/cloud-init/</span><br><span class="line">opt/containerd/cluster/gce/cloud-init/node.yaml</span><br><span class="line">opt/containerd/cluster/gce/cloud-init/master.yaml</span><br><span class="line">opt/containerd/cluster/gce/env</span><br><span class="line">opt/cni/</span><br><span class="line">opt/cni/bin/</span><br><span class="line">opt/cni/bin/dhcp</span><br><span class="line">opt/cni/bin/firewall</span><br><span class="line">opt/cni/bin/host-local</span><br><span class="line">opt/cni/bin/ipvlan</span><br><span class="line">opt/cni/bin/sbr</span><br><span class="line">opt/cni/bin/vlan</span><br><span class="line">opt/cni/bin/vrf</span><br><span class="line">opt/cni/bin/tuning</span><br><span class="line">opt/cni/bin/bridge</span><br><span class="line">opt/cni/bin/macvlan</span><br><span class="line">opt/cni/bin/bandwidth</span><br><span class="line">opt/cni/bin/portmap</span><br><span class="line">opt/cni/bin/host-device</span><br><span class="line">opt/cni/bin/ptp</span><br><span class="line">opt/cni/bin/flannel</span><br><span class="line">opt/cni/bin/static</span><br><span class="line">opt/cni/bin/loopback</span><br></pre></td></tr></table></figure><h2 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h2><p>Containerd 的默认配置文件为 <code>/etc/containerd/config.toml</code>，需要通过命令来生成一个默认的配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc2 ~]# mkdir /etc/containerd</span><br><span class="line">[root@slions_pc2 ~]# containerd config default &gt; /etc/containerd/config.toml</span><br></pre></td></tr></table></figure><p>配置参数含义参照<a href="https://github.com/containerd/containerd/blob/master/docs/man/containerd-config.toml.5.md">https://github.com/containerd/containerd/blob/master/docs/man/containerd-config.toml.5.md</a></p><h3 id="存储配置"><a href="#存储配置" class="headerlink" title="存储配置"></a>存储配置</h3><p>Containerd 有两个不同的存储路径，一个用来保存持久化数据，一个用来保存运行时状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root = &quot;/var/lib/containerd&quot;</span><br><span class="line">state = &quot;/run/containerd&quot;</span><br></pre></td></tr></table></figure><p><code>root</code>用来保存持久化数据，包括 <code>Snapshots</code>, <code>Content</code>, <code>Metadata</code> 以及各种插件的数据。每一个插件都有自己单独的目录，Containerd 本身不存储任何数据，它的所有功能都来自于已加载的插件。</p><h3 id="私有仓库"><a href="#私有仓库" class="headerlink" title="私有仓库"></a>私有仓库</h3><p>私有仓库字段位置：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors]</span></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;192.168.100.10&quot;]</span></span><br><span class="line">    <span class="attr">endpoint</span> = [<span class="string">&quot;https://192.168.100.10&quot;</span>]            <span class="comment">#镜像仓库加速地址</span></span><br><span class="line"><span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.configs]</span></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.configs.&quot;192.168.100.10&quot;.tls]</span></span><br><span class="line">    <span class="attr">insecure_skip_verify</span> = <span class="literal">true</span></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.configs.&quot;192.168.100.10&quot;.auth]</span></span><br><span class="line">    <span class="attr">username</span> = <span class="string">&quot;admin&quot;</span></span><br><span class="line">    <span class="attr">password</span> = <span class="string">&quot;Harbor12345&quot;</span></span><br></pre></td></tr></table></figure><p>这里我就不修改了，默认是<code>docker.io</code></p><h3 id="OOM"><a href="#OOM" class="headerlink" title="OOM"></a>OOM</h3><p>有一项配置需要留意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oom_score = 0</span><br></pre></td></tr></table></figure><p>Containerd 是容器的守护者，一旦发生内存不足的情况，理想的情况应该是先杀死容器，而不是杀死 Containerd。所以需要调整 Containerd 的 <code>OOM</code> 权重，减少其被 <strong>OOM Kill</strong> 的几率。最好是将 <code>oom_score</code> 的值调整为比其他守护进程略低的值。这里的 oom_socre 其实对应的是 <code>/proc/&lt;pid&gt;/oom_socre_adj</code>，在早期的 Linux 内核版本里使用 <code>oom_adj</code> 来调整权重, 后来改用 <code>oom_socre_adj</code> 了。</p><p>建议 Containerd 将该值设置为 <code>-999</code> 到 <code>0</code> 之间。如果作为 Kubernetes 的 Worker 节点，可以考虑设置为 <code>-999</code>。</p><h2 id="Systemd-配置"><a href="#Systemd-配置" class="headerlink" title="Systemd 配置"></a>Systemd 配置</h2><p>之前解压资源包时已经将containerd的systemd service配置文件放置在了<code>etc/systemd/system/containerd.service</code>，可以通过 systemd 配置 Containerd 作为守护进程运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc2 ~]# systemctl enable containerd &amp;&amp; systemctl start containerd</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/containerd.service to /etc/systemd/system/containerd.service.</span><br><span class="line">[root@slions_pc2 ~]# systemctl status containerd</span><br><span class="line">● containerd.service - containerd container runtime</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/containerd.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 三 2021-12-15 19:32:15 CST; 11s ago</span><br><span class="line">     Docs: https://containerd.io</span><br><span class="line">  Process: 10475 ExecStartPre=/sbin/modprobe overlay (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 10483 (containerd)</span><br><span class="line">    Tasks: 9</span><br><span class="line">   Memory: 19.2M</span><br><span class="line">   CGroup: /system.slice/containerd.service</span><br><span class="line">           └─10483 /usr/local/bin/containerd</span><br><span class="line"></span><br><span class="line">12月 15 19:32:15 slions_pc2 containerd[10483]: time=&quot;2021-12-15T19:32:15.628370353+08:00&quot; level=info msg=&quot;loading plugin \&quot;io.containerd.grpc.v1.introspection\&quot;...&quot; type=io.containerd.grpc.v1</span><br><span class="line">12月 15 19:32:15 slions_pc2 containerd[10483]: time=&quot;2021-12-15T19:32:15.629850993+08:00&quot; level=info msg=&quot;Start subscribing containerd event&quot;</span><br><span class="line">12月 15 19:32:15 slions_pc2 containerd[10483]: time=&quot;2021-12-15T19:32:15.629895514+08:00&quot; level=info msg=&quot;Start recovering state&quot;</span><br><span class="line">12月 15 19:32:15 slions_pc2 containerd[10483]: time=&quot;2021-12-15T19:32:15.630058843+08:00&quot; level=info msg=&quot;Start event monitor&quot;</span><br><span class="line">12月 15 19:32:15 slions_pc2 containerd[10483]: time=&quot;2021-12-15T19:32:15.630072189+08:00&quot; level=info msg=&quot;Start snapshots syncer&quot;</span><br><span class="line">12月 15 19:32:15 slions_pc2 containerd[10483]: time=&quot;2021-12-15T19:32:15.630079486+08:00&quot; level=info msg=&quot;Start cni network conf syncer&quot;</span><br><span class="line">12月 15 19:32:15 slions_pc2 containerd[10483]: time=&quot;2021-12-15T19:32:15.630084202+08:00&quot; level=info msg=&quot;Start streaming server&quot;</span><br><span class="line">12月 15 19:32:15 slions_pc2 containerd[10483]: time=&quot;2021-12-15T19:32:15.632856124+08:00&quot; level=info msg=serving... address=/run/containerd/containerd.sock.ttrpc</span><br><span class="line">12月 15 19:32:15 slions_pc2 containerd[10483]: time=&quot;2021-12-15T19:32:15.633175755+08:00&quot; level=info msg=serving... address=/run/containerd/containerd.sock</span><br><span class="line">12月 15 19:32:15 slions_pc2 containerd[10483]: time=&quot;2021-12-15T19:32:15.633729234+08:00&quot; level=info msg=&quot;containerd successfully booted in 0.055757s&quot;</span><br></pre></td></tr></table></figure><h1 id="ctr-使用"><a href="#ctr-使用" class="headerlink" title="ctr 使用"></a>ctr 使用</h1><p>ctr命令是containerd的客户端工具，下面是一些常见的用法：</p><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>containerd有namespaces的概念，不同命名空间下的container是互相隔离的，如果不指定，<code>ctr</code> 默认是 <code>default</code> 空间。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc2 ~]# ctr ns -h</span><br><span class="line">NAME:</span><br><span class="line">   ctr namespaces - manage namespaces</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   ctr namespaces command [command options] [arguments...]</span><br><span class="line"></span><br><span class="line">COMMANDS:</span><br><span class="line">   create, c   create a new namespace</span><br><span class="line">   list, ls    list namespaces</span><br><span class="line">   remove, rm  remove one or more namespaces</span><br><span class="line">   label       set and clear labels for a namespace</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">   --help, -h  show help</span><br><span class="line"></span><br><span class="line">[root@slions_pc2 ~]# ctr ns create mytest1</span><br><span class="line">[root@slions_pc2 ~]# ctr ns create mytest2</span><br><span class="line">[root@slions_pc2 ~]# ctr ns ls</span><br><span class="line">NAME    LABELS</span><br><span class="line">mytest1</span><br><span class="line">mytest2</span><br></pre></td></tr></table></figure><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><h3 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h3><p>测试时发现需要写全镜像的名称,无法想docker一样省略默认的仓库名与项目名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc2 ~]# ctr -n mytest1 images pull docker.io/library/nginx:latest</span><br><span class="line">ctr: failed to resolve reference &quot;nginx&quot;: object required</span><br><span class="line">docker.io/library/nginx:latest:                                                   resolved       |++++++++++++++++++++++++++++++++++++++|</span><br><span class="line">index-sha256:9522864dd661dcadfd9958f9e0de192a1fdda2c162a35668ab6ac42b465f0603:    done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class="line">manifest-sha256:4424e31f2c366108433ecca7890ad527b243361577180dfd9a5bb36e828abf47: done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class="line">layer-sha256:44be98c0fab60b6cef9887dbad59e69139cab789304964a197c27e2574d37304:    done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class="line">config-sha256:f652ca386ed135a4cbe356333e08ef0816f81b2ac8d0619af01e2b256837ed3e:   done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class="line">layer-sha256:e5ae68f740265288a4888db98d2999a638fdcb6d725f427678814538d253aa4d:    done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class="line">layer-sha256:21e0df283cd68384e5e8dff7e6be1774c86ea3110c1b1e9326014d34c29c0657:    done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class="line">layer-sha256:ed835de16acd8f5821cf3f3ef77a66922510ee6349730d89a8dd4fd6da8437ef:    done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class="line">layer-sha256:881ff011f1c9c14982afc6e95ae70c25e38809843bb7d42abbb24eb540c93ce7:    done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class="line">layer-sha256:77700c52c9695053293be96f9cbcf42c91c5e097daa3829339333f1fe6f9d353:    done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class="line">elapsed: 99.8s                                                                    total:  53.2 M (545.7 KiB/s)</span><br><span class="line">unpacking linux/amd64 sha256:9522864dd661dcadfd9958f9e0de192a1fdda2c162a35668ab6ac42b465f0603...</span><br><span class="line">done: 7.663355797s</span><br></pre></td></tr></table></figure><p>查看该镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc2 ~]# ctr -n mytest1 image ls</span><br><span class="line">REF                            TYPE                                                      DIGEST                                                                  SIZE     PLATFORMS                                                                                               LABELS</span><br><span class="line">docker.io/library/nginx:latest application/vnd.docker.distribution.manifest.list.v2+json sha256:9522864dd661dcadfd9958f9e0de192a1fdda2c162a35668ab6ac42b465f0603 54.1 MiB linux/386,linux/amd64,linux/arm/v5,linux/arm/v7,linux/arm64/v8,linux/mips64le,linux/ppc64le,linux/s390x -</span><br></pre></td></tr></table></figure><p>此时mytest2中是没有这个镜像的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc2 ~]# ctr -n mytest2 image ls</span><br><span class="line">REF TYPE DIGEST SIZE PLATFORMS LABELS</span><br></pre></td></tr></table></figure><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc2 ~]# ctr -n mytest1 container create docker.io/library/nginx:latest mynginx</span><br><span class="line">[root@slions_pc2 ~]# ctr -n mytest1 c ls</span><br><span class="line">CONTAINER    IMAGE                             RUNTIME</span><br><span class="line">mynginx      docker.io/library/nginx:latest    io.containerd.runc.v2</span><br><span class="line">[root@slions_pc2 ~]# ps -elf|grep nginx</span><br><span class="line">0 S root      10680   9878  0  80   0 - 28181 pipe_w 20:10 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>上面 <code>create</code> 的命令创建了容器后，并没有处于运行状态，只是一个静态的容器。一个 container 对象只是包含了运行一个容器所需的资源及配置的数据结构，这意味着 namespaces、rootfs 和容器的配置都已经初始化成功了，只是用户进程(这里是 <code>nginx</code>)还没有启动。</p><p>然而一个容器真正的运行起来是由 task 对象实现的，<code>task</code> 代表任务的意思，可以为容器设置网卡，还可以配置工具来对容器进行监控等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc2 ~]# ctr -n mytest1 task start -d mynginx</span><br><span class="line">[root@slions_pc2 ~]# ctr -n mytest1 task ls</span><br><span class="line">TASK       PID      STATUS</span><br><span class="line">mynginx    11330    RUNNING</span><br><span class="line">[root@slions_pc2 ~]# ps -elf|grep nginx</span><br><span class="line">0 S root      11305      1  0  80   0 - 177741 futex_ 21:03 ?       00:00:00 /usr/local/bin/containerd-shim-runc-v2 -namespace mytest1 -id mynginx -address /run/containerd/containerd.sock</span><br><span class="line">4 S root      11330  11305  0  80   0 -  2169 sigsus 21:03 ?        00:00:00 nginx: master process nginx -g daemon off;</span><br><span class="line">5 S 101       11367  11330  0  80   0 -  2270 ep_pol 21:03 ?        00:00:00 nginx: worker process</span><br><span class="line">5 S 101       11368  11330  0  80   0 -  2270 ep_pol 21:03 ?        00:00:00 nginx: worker process</span><br><span class="line">0 S root      11376   9878  0  80   0 - 28182 pipe_w 21:04 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><p>当然，也可以一步到位直接创建并运行容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc2 ~]# ctr -n mytest2 images pull  docker.io/library/nginx:latest</span><br><span class="line">docker.io/library/nginx:latest:                                                   resolved       |++++++++++++++++++++++++++++++++++++++|</span><br><span class="line">index-sha256:9522864dd661dcadfd9958f9e0de192a1fdda2c162a35668ab6ac42b465f0603:    done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class="line">manifest-sha256:4424e31f2c366108433ecca7890ad527b243361577180dfd9a5bb36e828abf47: done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class="line">layer-sha256:44be98c0fab60b6cef9887dbad59e69139cab789304964a197c27e2574d37304:    done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class="line">config-sha256:f652ca386ed135a4cbe356333e08ef0816f81b2ac8d0619af01e2b256837ed3e:   done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class="line">layer-sha256:e5ae68f740265288a4888db98d2999a638fdcb6d725f427678814538d253aa4d:    done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class="line">layer-sha256:21e0df283cd68384e5e8dff7e6be1774c86ea3110c1b1e9326014d34c29c0657:    done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class="line">layer-sha256:ed835de16acd8f5821cf3f3ef77a66922510ee6349730d89a8dd4fd6da8437ef:    done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class="line">layer-sha256:881ff011f1c9c14982afc6e95ae70c25e38809843bb7d42abbb24eb540c93ce7:    done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class="line">layer-sha256:77700c52c9695053293be96f9cbcf42c91c5e097daa3829339333f1fe6f9d353:    done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class="line">elapsed: 5.8 s                                                                    total:   0.0 B (0.0 B/s)</span><br><span class="line">unpacking linux/amd64 sha256:9522864dd661dcadfd9958f9e0de192a1fdda2c162a35668ab6ac42b465f0603...</span><br><span class="line">done: 2.327616113s</span><br><span class="line">[root@slions_pc2 ~]# ctr -n mytest2 run -d docker.io/library/nginx:latest mynginx</span><br><span class="line">[root@slions_pc2 ~]# ctr -n mytest2 t ls</span><br><span class="line">TASK       PID      STATUS</span><br><span class="line">mynginx    11472    RUNNING</span><br><span class="line">[root@slions_pc2 ~]# ps -elf|grep nginx</span><br><span class="line">0 S root      11305      1  0  80   0 - 177901 futex_ 21:03 ?       00:00:00 /usr/local/bin/containerd-shim-runc-v2 -namespace mytest1 -id mynginx -address /run/containerd/containerd.sock</span><br><span class="line">4 S root      11330  11305  0  80   0 -  2169 sigsus 21:03 ?        00:00:00 nginx: master process nginx -g daemon off;</span><br><span class="line">5 S 101       11367  11330  0  80   0 -  2270 ep_pol 21:03 ?        00:00:00 nginx: worker process</span><br><span class="line">5 S 101       11368  11330  0  80   0 -  2270 ep_pol 21:03 ?        00:00:00 nginx: worker process</span><br><span class="line">0 S root      11450      1  0  80   0 - 178173 futex_ 21:09 ?       00:00:00 /usr/local/bin/containerd-shim-runc-v2 -namespace mytest2 -id mynginx -address /run/containerd/containerd.sock</span><br><span class="line">4 S root      11472  11450  0  80   0 -  2169 sigsus 21:09 ?        00:00:00 nginx: master process nginx -g daemon off;</span><br><span class="line">5 S 101       11514  11472  0  80   0 -  2270 ep_pol 21:09 ?        00:00:00 nginx: worker process</span><br><span class="line">5 S 101       11515  11472  0  80   0 -  2270 ep_pol 21:09 ?        00:00:00 nginx: worker process</span><br><span class="line">0 S root      11533   9878  0  80   0 - 28182 pipe_w 21:10 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p>和 docker 的操作类似，但必须要指定 –exec-id ，这个 id 可以随便写，只要唯一就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc2 ~]# ctr -n mytest1 task exec --exec-id 0 -t mynginx bash</span><br></pre></td></tr></table></figure><h2 id="杀死容器"><a href="#杀死容器" class="headerlink" title="杀死容器"></a>杀死容器</h2><p>ctr 没有 stop 容器的功能，只能暂停或者杀死容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc2 ~]# ctr -n mytest1 task kill mynginx</span><br></pre></td></tr></table></figure><h1 id="nerdctl使用"><a href="#nerdctl使用" class="headerlink" title="nerdctl使用"></a>nerdctl使用</h1><p>可以看到原生的ctr工具对用户不是很友好，如果是用惯docker命令再用这个体会的更加明显，好在containerd也发现了这个问题，后面出来了<a href="https://hub.fastgit.org/containerd/nerdctl">nerdctl</a>工具。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc2 ~]# mkdir nerdctl &amp;&amp; tar xvf nerdctl-0.15.0-linux-amd64.tar.gz -C nerdctl</span><br><span class="line">nerdctl</span><br><span class="line">containerd-rootless-setuptool.sh</span><br><span class="line">containerd-rootless.sh</span><br><span class="line">[root@slions_pc2 ~]# cp -rp nerdctl/* /usr/local/bin/</span><br><span class="line">[root@slions_pc2 ~]# nerdctl ps --namespace  mytest1</span><br><span class="line">CONTAINER ID    IMAGE                             COMMAND                   CREATED              STATUS    PORTS    NAMES</span><br><span class="line">mynginx         docker.io/library/nginx:latest    &quot;/docker-entrypoint.…&quot;    About an hour ago    Up</span><br><span class="line">[root@slions_pc2 ~]# nerdctl images --namespace  mytest1</span><br><span class="line">REPOSITORY    TAG       IMAGE ID        CREATED        PLATFORM       SIZE</span><br><span class="line">nginx         latest    9522864dd661    2 hours ago    linux/amd64    146.2 MiB</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从&lt;a href=&quot;/2021/12/07/K8S-Runtime-CRI-OCI-contained-dockershim-%E7%90%86%E8%A7%A3%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/&quot; title=&quot;这篇文章&quot;&gt;这篇文章</summary>
      
    
    
    
    <category term="云原生" scheme="https://slions.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="kubernetes" scheme="https://slions.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>K8S Runtime CRI OCI contained dockershim（转载）</title>
    <link href="https://slions.github.io/2021/12/07/K8S-Runtime-CRI-OCI-contained-dockershim-%E7%90%86%E8%A7%A3%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
    <id>https://slions.github.io/2021/12/07/K8S-Runtime-CRI-OCI-contained-dockershim-%E7%90%86%E8%A7%A3%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</id>
    <published>2021-12-07T05:32:17.000Z</published>
    <updated>2021-12-15T07:49:35.918Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转载自CSDN “Frank范”</p></blockquote><h1 id="典型的K8S-Runtime架构"><a href="#典型的K8S-Runtime架构" class="headerlink" title="典型的K8S Runtime架构"></a>典型的K8S Runtime架构</h1><p>从最常见的Docker说起，kubelet和Docker的集成方案图如下：</p><p><img src="https://slions.gitee.io/picbed/img/cri1.png"></p><p>当kubelet要创建一个容器时，需要以下几步：</p><ol><li>Kubelet 通过 CRI 接口（gRPC）调用 dockershim，请求创建一个容器。CRI 即容器运行时接口（Container Runtime Interface），这一步中，Kubelet 可以视作一个简单的 CRI Client，而 dockershim 就是接收请求的 Server。目前 dockershim 的代码其实是内嵌在 Kubelet 中的，所以接收调用的凑巧就是 Kubelet 进程；</li><li>dockershim 收到请求后，转化成 Docker Daemon 能听懂的请求，发到 Docker Daemon 上请求创建一个容器。</li><li>Docker Daemon 早在 1.12 版本中就已经将针对容器的操作移到另一个守护进程——containerd 中了，因此 Docker Daemon 仍然不能帮我们创建容器，而是要请求 containerd 创建一个容器；</li><li>containerd 收到请求后，并不会自己直接去操作容器，而是创建一个叫做 containerd-shim 的进程，让 containerd-shim 去操作容器。这是因为容器进程需要一个父进程来做诸如收集状态，维持 stdin 等 fd 打开等工作。而假如这个父进程就是 containerd，那每次 containerd 挂掉或升级，整个宿主机上所有的容器都得退出了。而引入了 containerd-shim 就规避了这个问题（containerd 和 shim 并不是父子进程关系）；</li><li>我们知道创建容器需要做一些设置 namespaces 和 cgroups，挂载 root filesystem 等等操作，而这些事该怎么做已经有了公开的规范了，那就是 OCI（Open Container Initiative，开放容器标准）。它的一个参考实现叫做 runC。于是，containerd-shim 在这一步需要调用 runC 这个命令行工具，来启动容器；</li><li>runC 启动完容器后本身会直接退出，containerd-shim 则会成为容器进程的父进程，负责收集容器进程的状态，上报给 containerd，并在容器中 pid 为 1 的进程退出后接管容器中的子进程进行清理，确保不会出现僵尸进程。</li></ol><p>这个过程乍一看像是在搞我们：Docker Daemon 和 dockershim 看上去就是两个不干活躺在中间划水的啊，Kubelet 为啥不直接调用 containerd 呢？<br>当然可以，先看下现在的架构为什么如此繁杂。</p><h1 id="容器历史小叙"><a href="#容器历史小叙" class="headerlink" title="容器历史小叙"></a>容器历史小叙</h1><p>早期的k8s runtime架构，远没这么复杂，kubelet创建容器，直接调用docker daemon，docker daemon自己调用libcontainer就把容器运行起来。</p><p>但往往，事情不会如此简单，一系列政治斗争开始了，先是大佬们认为运行时标准不能被 Docker 一家公司控制，于是就撺掇着搞了开放容器标准 OCI。Docker 则把 libcontainer 封装了一下，变成 runC 捐献出来作为 OCI 的参考实现。</p><p>再接下来就是 rkt(coreos推出的，类似docker) 想从 Docker 那边分一杯羹，希望 Kubernetes 原生支持 rkt 作为运行时，而且 PR 还真的合进去了。维护过一块业务同时接两个需求方的读者老爷应该都知道类似的事情有多坑，Kubernetes 中负责维护 kubelet 的小组 sig-node 也是被狠狠坑了一把。</p><p>大家一看这么搞可不行，今天能有 rkt，明天就能有更多幺蛾子出来，这么搞下去我们小组也不用干活了，整天搞兼容性的 bug 就够呛。于是乎，Kubernetes 1.5 推出了 CRI 机制，即容器运行时接口（Container Runtime Interface），Kubernetes 告诉大家，你们想做 Runtime 可以啊，我们也资瓷欢迎，实现这个接口就成，成功反客为主。</p><p>不过 CRI 本身只是 Kubernetes 推的一个标准，当时的 Kubernetes 尚未达到如今这般武林盟主的地位，容器运行时当然不能说我跟 Kubernetes 绑死了只提供 CRI 接口，于是就有了 shim（垫片）这个说法，一个 shim 的职责就是作为 Adapter 将各种容器运行时本身的接口适配到 Kubernetes 的 CRI 接口上。</p><p>接下来就是 Docker 要搞 Swarm 进军 PaaS 市场，于是做了个架构切分，把容器操作都移动到一个单独的 Daemon 进程 containerd 中去，让 Docker Daemon 专门负责上层的封装编排。可惜 Swarm 在 Kubernetes 面前实在是不够打，惨败之后 Docker 公司就把 containerd 项目捐给 CNCF 缩回去安心搞 Docker 企业版了。</p><p>最后就是我们在上一张图里看到的这一坨东西了，尽管现在已经有 CRI-O，containerd-plugin 这样更精简轻量的 Runtime 架构，dockershim 这一套作为经受了最多生产环境考验的方案，迄今为止仍是 Kubernetes 默认的 Runtime 实现。</p><h1 id="OCI-CRI"><a href="#OCI-CRI" class="headerlink" title="OCI, CRI"></a>OCI, CRI</h1><p>OCI（开放容器标准），规定了2点：</p><ol><li>容器镜像要长啥样，即 ImageSpec。里面的大致规定就是你这个东西需要是一个压缩了的文件夹，文件夹里以 xxx 结构放 xxx 文件；</li><li>容器要需要能接收哪些指令，这些指令的行为是什么，即 RuntimeSpec。这里面的大致内容就是“容器”要能够执行 “create”，“start”，“stop”，“delete” 这些命令，并且行为要规范。</li></ol><p>runC 为啥叫参考实现呢，就是它能按照标准将符合标准的容器镜像运行起来，标准的好处就是方便搞创新，反正只要我符合标准，生态圈里的其它工具都能和我一起愉快地工作（……当然 OCI 这个标准本身制定得不怎么样，真正工程上还是要做一些 adapter 的），那我的镜像就可以用任意的工具去构建，我的“容器”就不一定非要用 namespace 和 cgroups 来做隔离。这就让各种虚拟化容器可以更好地参与到游戏当中，我们暂且不表。</p><p>而 CRI 更简单，单纯是一组 gRPC 接口，扫一眼 kubelet/apis/cri/services.go 就能归纳出几套核心接口：</p><ul><li>一套针对容器操作的接口，包括创建，启停容器等等；</li><li>一套针对镜像操作的接口，包括拉取镜像删除镜像等；</li><li>一套针对 PodSandbox（容器沙箱环境）的操作接口，我们之后再说。</li></ul><p>现在我们可以找到很多符合 OCI 标准或兼容了 CRI 接口的项目，而这些项目就大体构成了整个 Kuberentes 的 Runtime 生态：</p><ul><li>OCI Compatible：runC，Kata（以及它的前身 runV 和 Clear Containers），gVisor。其它比较偏门的还有 Rust 写的 railcar</li><li>CRI Compatible：Docker（借助 dockershim），containerd（借助 CRI-containerd），CRI-O，Frakti，etc</li></ul><p>OCI, CRI 确实不是一个好名字，在这篇文章的语境中更准确的说法：cri-runtime 和 oci-runtime。通过这个粗略的分类，我们其实可以总结出整个 Runtime 架构万变不离其宗的三层抽象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Orchestration API -&gt; Container API(cri-runtime) -&gt; kernel API(oci-runtime)</span><br></pre></td></tr></table></figure><h1 id="Containerd和CRI-O"><a href="#Containerd和CRI-O" class="headerlink" title="Containerd和CRI-O"></a>Containerd和CRI-O</h1><p>上一节看到现在的 Runtime 实在是有点复杂了，而复杂是万恶之源（其实本质上就是想干掉 Docker），于是就有了直接拿 containerd 做 oci-runtime 的方案。当然，除了 Kubernetes 之外，containerd 还要接诸如 Swarm 等调度系统，因此它不会去直接实现 CRI，这个适配工作当然就要交给一个 shim 了。</p><p>containerd 1.0 中，对 CRI 的适配通过一个单独的进程 CRI-containerd 来完成：<br><img src="https://slions.gitee.io/picbed/img/cri02.png"></p><p>containerd 1.1 中做的又更漂亮一点，砍掉了 CRI-containerd 这个进程，直接把适配逻辑作为插件放进了 containerd 主进程中：</p><p><img src="https://slions.gitee.io/picbed/img/cri03.png"></p><p>但在 containerd 做这些事情之情，社区就已经有了一个更为专注的 cri-runtime：CRI-O，它非常纯粹，就是兼容 CRI 和 OCI，做一个 Kubernetes 专用的运行时：</p><p><img src="https://slions.gitee.io/picbed/img/cri04.png"></p><p>其中 conmon 就对应 containerd-shim，大体意图是一样的。<br>CRI-O 和（直接调用）containerd 的方案比起默认的 dockershim 确实简洁很多，但没啥生产环境的验证案例，我所知道的仅仅是 containerd 在 GKE 上是 beta 状态。因此假如你对 Docker 没有特殊的政治恨意，大可不必把 dockershim 这套换掉。</p><h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="https://blog.csdn.net/u011563903/article/details/90743853">https://blog.csdn.net/u011563903/article/details/90743853</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文转载自CSDN “Frank范”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;典型的K8S-Runtime架构&quot;&gt;&lt;a href=&quot;#典型的K8S-Runtime架构&quot; class=&quot;headerlink&quot; title=&quot;典型的K8S </summary>
      
    
    
    
    <category term="云原生" scheme="https://slions.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="kubernetes" scheme="https://slions.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>（十一）Jinja2模板</title>
    <link href="https://slions.github.io/2021/12/02/%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89Jinja2%E6%A8%A1%E6%9D%BF/"/>
    <id>https://slions.github.io/2021/12/02/%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89Jinja2%E6%A8%A1%E6%9D%BF/</id>
    <published>2021-12-02T10:43:04.000Z</published>
    <updated>2021-12-02T15:27:43.131Z</updated>
    
    <content type="html"><![CDATA[<p>日常ansible playbook编写过程中，会涉及到很多变量的解析与替换，解析并替换模板表达式的过程称为渲染。</p><p>ansibles使用<code>Jinja2</code>来完成渲染工作，它是Python的一种模板引擎。</p><p>Jinja2模板引擎提供了三种特殊符号来包围模板表达式：</p><ol><li>&#123;&#123;xxx&#125;&#125;：双大括号包围变量或表达式(Ansible中的变量就是它包围的)</li><li>&#123;#xxx#&#125;：Jinja2的注释符号</li><li>&#123;%xxx%&#125;：Jinja2的一些特殊关键字标签，比如if语句、for循环语句等等</li></ol><h1 id="Jinja2条件判断"><a href="#Jinja2条件判断" class="headerlink" title="Jinja2条件判断"></a>Jinja2条件判断</h1><p>Jinja2中可以使用if语句进行条件判断。</p><p>语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if CONDITION1 %&#125;</span><br><span class="line">  string_or_expression1</span><br><span class="line">&#123;% elif CONDITION2 %&#125;</span><br><span class="line">  string_or_expression2</span><br><span class="line">&#123;% elif CONDITION3 %&#125;</span><br><span class="line">  string_or_expression3</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">  string_or_expression4</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>其中elif和else分支都是可省略的。CONDITION部分是条件表达式</p><p>例如：</p><p>当前结构如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ansible_poc]# tree</span><br><span class="line">.</span><br><span class="line">├── test.yml</span><br><span class="line">├── ansible.cfg</span><br><span class="line">├── ansible.log</span><br><span class="line">├── facts</span><br><span class="line">│   ├── 192.168.100.10</span><br><span class="line">│   └── 192.168.100.11</span><br><span class="line">├── inventory</span><br><span class="line">│   └── hosts</span><br><span class="line">└── roles</span><br><span class="line">    └── first</span><br><span class="line">        ├── tasks</span><br><span class="line">        │   └── main.yml</span><br><span class="line">        └── templates</span><br><span class="line">            └── my.j2</span><br></pre></td></tr></table></figure><p>其中模板文件my.j2内容是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if whatday == &quot;0&quot; %&#125;</span><br><span class="line">周日</span><br><span class="line">&#123;% elif whatday == &quot;1&quot; %&#125;</span><br><span class="line">周一</span><br><span class="line">&#123;% elif whatday == &quot;2&quot; %&#125;</span><br><span class="line">周二</span><br><span class="line">&#123;% elif whatday == &quot;3&quot; %&#125;</span><br><span class="line">周三</span><br><span class="line">&#123;% elif whatday == &quot;4&quot; %&#125;</span><br><span class="line">周四</span><br><span class="line">&#123;% elif whatday == &quot;5&quot; %&#125;</span><br><span class="line">周五</span><br><span class="line">&#123;% elif whatday == &quot;6&quot; %&#125;</span><br><span class="line">周六</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">输入错误</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>上面判断变量whatday的值，然后输出对应的星期几。因为whatday变量的值是字符串，所以让它和字符串形式的数值进行等值比较。当然，也可以使用筛选器将字符串转换为数值后进行数值比较：whatday|int == 0。</p><p>roles/first/tasks中的main.yml内容为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">template:</span></span><br><span class="line">    <span class="attr">src:</span> <span class="string">my.j2</span></span><br><span class="line">    <span class="attr">dest:</span> <span class="string">/tmp/dayfile</span></span><br></pre></td></tr></table></figure><p>任务入口文件test.yml内容为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">vars_prompt:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">whatday</span></span><br><span class="line">      <span class="attr">default:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">prompt:</span> <span class="string">&quot;输入今天星期几（0:星期日，1:星期一，...，6:星期六）&quot;</span></span><br><span class="line">      <span class="attr">privat:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">first</span></span><br></pre></td></tr></table></figure><p>执行后可以在/tmp/dayfile中查看到替换后的对应字符。</p><p>如果if语句的分支比较简单(没有elif逻辑)，那么可以使用行内if表达式。</p><p>其语法格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string_or_expr1 if CONDITION else string_or_expr2</span><br></pre></td></tr></table></figure><p>因为行内if是表达式而不是语句块，所以不使用 &#123;%%&#125; 符号，而使用&#123;&#123;&#125;&#125; 。</p><p>例如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">    <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;&#x27;周末&#x27; if whatday|int &gt; 5 else &#x27;工作日&#x27;&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><h1 id="for循环迭代"><a href="#for循环迭代" class="headerlink" title="for循环迭代"></a>for循环迭代</h1><h2 id="for迭代列表"><a href="#for迭代列表" class="headerlink" title="for迭代列表"></a>for迭代列表</h2><p>for循环的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for i in LIST %&#125;</span><br><span class="line">    string_or_expression</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>还支持直接条件判断筛选要参与迭代的元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for i in LIST if CONDITION %&#125;</span><br><span class="line">    string_or_expression</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>此外，Jinja2的for语句还允许使用else分支，如果for所迭代的列表LIST是空列表(或没有元素可迭代)，则会执行else分支。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for i in LIST %&#125;</span><br><span class="line">    string_or_expression</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    string_or_expression</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>例如，在模板文件a.txt.j2中有如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for file in files %&#125;</span><br><span class="line">&lt;&#123;&#123;file&#125;&#125;&gt;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">no file in files</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>playbook文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: localhost</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks: </span><br><span class="line">    - template:</span><br><span class="line">        src: a.txt.j2</span><br><span class="line">        dest: /tmp/a.txt</span><br><span class="line">      vars: </span><br><span class="line">        files:</span><br><span class="line">          - /tmp/a1</span><br><span class="line">          - /tmp/a2</span><br><span class="line">          - /tmp/a3</span><br></pre></td></tr></table></figure><p>执行playbook之后，将生成包含如下内容的/tmp/a.txt文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;/tmp/a1&gt;</span><br><span class="line">&lt;/tmp/a2&gt;</span><br><span class="line">&lt;/tmp/a3&gt;</span><br></pre></td></tr></table></figure><p>如果将playbook中的files变量设置为空列表，则会执行else分支，所以生成的/tmp/a.txt的内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no file in files</span><br></pre></td></tr></table></figure><p>如果files变量未定义或变量类型不是list，则默认会报错。针对未定义变量，可采用如下策略提供默认空列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for file in (files|default([])) %&#125;</span><br><span class="line">&lt;&#123;&#123;file&#125;&#125;&gt;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">no file in files</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>如果不想迭代文件列表中的/tmp/a3，则可以加上条件判断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for file in (files|default([])) if file != &quot;/tmp/a3&quot; %&#125;</span><br><span class="line">&lt;&#123;&#123;file&#125;&#125;&gt;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">no file in files</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>Jinja2的for循环没有提供break和continue的功能，所以只能通过&#123;% for…if…%&#125;来间接实现类似功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;日常ansible playbook编写过程中，会涉及到很多变量的解析与替换，解析并替换模板表达式的过程称为渲染。&lt;/p&gt;
&lt;p&gt;ansibles使用&lt;code&gt;Jinja2&lt;/code&gt;来完成渲染工作，它是Python的一种模板引擎。&lt;/p&gt;
&lt;p&gt;Jinja2模板引擎提</summary>
      
    
    
    
    <category term="ansible回炉" scheme="https://slions.github.io/categories/ansible%E5%9B%9E%E7%82%89/"/>
    
    
    <category term="ansible" scheme="https://slions.github.io/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>（十）ansible异常处理</title>
    <link href="https://slions.github.io/2021/12/02/%EF%BC%88%E5%8D%81%EF%BC%89ansible%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://slions.github.io/2021/12/02/%EF%BC%88%E5%8D%81%EF%BC%89ansible%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2021-12-02T04:50:53.000Z</published>
    <updated>2021-12-02T07:23:35.285Z</updated>
    
    <content type="html"><![CDATA[<p>在日常使用ansible的过程中会发现，执行shell或command模块时，Ansible只认为0退出状态码是正确的，其它所有退出状态码都是失败的，但我们自己知道非0退出状态码并非一定代表着失败。</p><p>比如下例：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">shell:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">        ls /home/aa</span></span><br><span class="line"><span class="string"></span>      <span class="attr">register:</span> <span class="string">res</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">res.stdout</span></span><br></pre></td></tr></table></figure><p>执行结果会直接报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TASK [shell] *****************************************************************************************************</span><br><span class="line">fatal: [localhost]: FAILED! =&gt; &#123;&quot;changed&quot;: true, &quot;cmd&quot;: &quot;ls /home/aa\n&quot;, &quot;delta&quot;: &quot;0:00:00.034093&quot;, &quot;end&quot;: &quot;2021-12-02 14:16:45.029276&quot;, &quot;msg&quot;: &quot;non-zero return code&quot;, &quot;rc&quot;: 2, &quot;start&quot;: &quot;2021-12-02 14:16:44.995183&quot;, &quot;stderr&quot;: &quot;ls: 无法访问/home/aa: 没有那个文件或目录&quot;, &quot;stderr_lines&quot;: [&quot;ls: 无法访问/home/aa: 没有那个文件或目录&quot;], &quot;stdout&quot;: &quot;&quot;, &quot;stdout_lines&quot;: []&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************</span><br><span class="line">localhost                  : ok=0    changed=0    unreachable=0    failed=1    skipped=0    rescued=0    ignored=0</span><br></pre></td></tr></table></figure><p>默认情况下，Ansible端无法连接某个节点时、某节点执行某个任务失败时，Ansible都会将这个节点从活动节点列表中(即<code>play_hosts</code>变量中)移除，以避免该节点继续执行之后的任务。用户可以去修改Ansible对这种异常现象的默认处理方式，比如遇到错误也不让该节点退出舞台，而是继续执行后续任务，又或者某节点执行任务失败并让整个play都失败。</p><h1 id="fail模块"><a href="#fail模块" class="headerlink" title="fail模块"></a>fail模块</h1><p>使用<code>fail</code>模块，可以人为制造一个失败的任务。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">fail:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;已手动设置失败&quot;</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">inventory_hostname</span> <span class="string">==</span> <span class="string">&#x27;192.168.100.10&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;成功了&quot;</span></span><br></pre></td></tr></table></figure><p>上面的fail会任务失败，并使得此节点不会执行后续任务，但其它节点会继续执行任务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PLAY [test] ******************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [fail] ******************************************************************************************************</span><br><span class="line">fatal: [192.168.100.10]: FAILED! =&gt; &#123;&quot;changed&quot;: false, &quot;msg&quot;: &quot;已手动设置失败&quot;&#125;</span><br><span class="line">skipping: [192.168.100.11]</span><br><span class="line"></span><br><span class="line">TASK [debug] *****************************************************************************************************</span><br><span class="line">ok: [192.168.100.11] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;成功了&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************</span><br><span class="line">192.168.100.10             : ok=0    changed=0    unreachable=0    failed=1    skipped=0    rescued=0    ignored=0</span><br><span class="line">192.168.100.11             : ok=1    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0</span><br></pre></td></tr></table></figure><h1 id="assert模块"><a href="#assert模块" class="headerlink" title="assert模块"></a>assert模块</h1><p><code>assert</code>与其他编程语言中的功能一致，断言功能，对于当满足某某条件时就失败的逻辑，可直接使用<code>assert</code>模块实现。</p><p>例如上面的例子可改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">assert:</span></span><br><span class="line">        <span class="attr">that:</span></span><br><span class="line">          <span class="bullet">-</span>  <span class="string">inventory_hostname</span> <span class="type">!=</span> <span class="string">&#x27;192.168.100.10&#x27;</span></span><br><span class="line">        <span class="attr">fail_msg:</span> <span class="string">&quot;失败了&quot;</span></span><br><span class="line">        <span class="attr">success_msg:</span> <span class="string">&quot;成功了&quot;</span></span><br></pre></td></tr></table></figure><p>其中<code>that</code>参数接收一个列表，用于定义一个或多个条件，如果条件全为true，则任务成功，只要有一个条件为false，则任务失败。<code>fail_msg</code>(或其别名参数<code>msg</code>)定义任务失败时的信息，<code>success_msg</code>定义任务成功时的信息。</p><h1 id="ignore-errors"><a href="#ignore-errors" class="headerlink" title="ignore_errors"></a>ignore_errors</h1><p>当某个任务执行失败(或被Ansible认为失败，比如通过返回值判断)时，如果不想让这个失败的任务导致节点退出，可以使用<code>ignore_errors</code>指令来忽略失败。</p><p>例如开头的那个例子，加上<code>ignore_errors</code>指令：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">shell:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">        ls /home/aa</span></span><br><span class="line"><span class="string"></span>      <span class="attr">ignore_errors:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">res</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">res.stdout</span></span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PLAY [localhost] *************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [shell] *****************************************************************************************************</span><br><span class="line">fatal: [localhost]: FAILED! =&gt; &#123;&quot;changed&quot;: true, &quot;cmd&quot;: &quot;ls /home/aa\n&quot;, &quot;delta&quot;: &quot;0:00:00.034821&quot;, &quot;end&quot;: &quot;2021-12-02 14:41:13.638790&quot;, &quot;msg&quot;: &quot;non-zero return code&quot;, &quot;rc&quot;: 2, &quot;start&quot;: &quot;2021-12-02 14:41:13.603969&quot;, &quot;stderr&quot;: &quot;ls: 无法访问/home/aa: 没有那个文件或目录&quot;, &quot;stderr_lines&quot;: [&quot;ls: 无法访问/home/aa: 没有那个文件或目录&quot;], &quot;stdout&quot;: &quot;&quot;, &quot;stdout_lines&quot;: []&#125;</span><br><span class="line">...ignoring</span><br><span class="line"></span><br><span class="line">TASK [debug] *****************************************************************************************************</span><br><span class="line">ok: [localhost] =&gt; &#123;</span><br><span class="line">    &quot;res.stdout&quot;: &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************</span><br><span class="line">localhost                  : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=1</span><br></pre></td></tr></table></figure><p>可以看到，加上<code>ignore_errors</code>后成功执行了debug任务，最后的任务汇总处的ignored=1证明忽略了一个错误。但是从结果中可以看到，虽然确实忽略了错误，但红红报错信息仍然提醒在终端上，让不了解此机制的人感觉很慌。这时可以使用<code>failed_when</code>解决。</p><h1 id="failed-when"><a href="#failed-when" class="headerlink" title="failed_when"></a>failed_when</h1><p><code>failed_when</code>指令可以让用户自己定义任务何时失败：当条件表达式为true时任务强制失败，当条件表达式为false时，任务强制不失败。</p><p>接着改下上面的例子：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">shell:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">        ls /home/aa</span></span><br><span class="line"><span class="string"></span>      <span class="attr">failed_when:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">res</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">res.stdout</span></span><br></pre></td></tr></table></figure><p>此时查看输出，已经没有相关报错了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PLAY [localhost] *************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [shell] *****************************************************************************************************</span><br><span class="line">changed: [localhost]</span><br><span class="line"></span><br><span class="line">TASK [debug] *****************************************************************************************************</span><br><span class="line">ok: [localhost] =&gt; &#123;</span><br><span class="line">    &quot;res.stdout&quot;: &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************</span><br><span class="line">localhost                  : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span><br></pre></td></tr></table></figure><p><code>failed_when</code>经常会和shell或command模块以及register指令一起使用，用来手动定义失败的退出状态码。比如，退出状态码为<code>0 1 2</code>都认为任务成功执行，其它状态码都认为认为执行失败。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">shell:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">        ls /home/aa</span></span><br><span class="line"><span class="string"></span>      <span class="attr">failed_when:</span> <span class="string">res.rc</span> <span class="string">not</span> <span class="string">in</span> <span class="string">(0,1,2)</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">res</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">res.stdout</span></span><br></pre></td></tr></table></figure><p><code>failed_when</code>和<code>when</code>一样都可以将多个条件表达式写成列表的形式来表示逻辑与。</p><h1 id="rescue和always"><a href="#rescue和always" class="headerlink" title="rescue和always"></a>rescue和always</h1><p>Ansible允许在任务失败的时候，去执行某些任务，还允许不管任务失败与否，都执行某些任务。</p><ol><li>rescue和always都是block级别的指令</li><li>rescue表示block中任意任务失败后，都执行rescue中定义的任务，但如果block中没有任务失败，则不执行rescue中的任务</li><li>always表示block中任务无论失败与否，都执行always中定义的任务</li></ol><p>例如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tasks:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">block:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">fail:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">debug:</span> <span class="string">msg=&quot;hello</span> <span class="string">world&quot;</span></span><br><span class="line">      <span class="attr">rescue:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">debug:</span> <span class="string">msg=&quot;rescue1&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">debug:</span> <span class="string">msg=&quot;rescue2&quot;</span></span><br><span class="line">      <span class="attr">always:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">debug:</span> <span class="string">msg=&quot;always1&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">debug:</span> <span class="string">msg=&quot;always2&quot;</span></span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PLAY [localhost] *************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [fail] ******************************************************************************************************</span><br><span class="line">fatal: [localhost]: FAILED! =&gt; &#123;&quot;changed&quot;: false, &quot;msg&quot;: &quot;Failed as requested from task&quot;&#125;</span><br><span class="line"></span><br><span class="line">TASK [debug] *****************************************************************************************************</span><br><span class="line">ok: [localhost] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;rescue1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TASK [debug] *****************************************************************************************************</span><br><span class="line">ok: [localhost] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;rescue2&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TASK [debug] *****************************************************************************************************</span><br><span class="line">ok: [localhost] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;always1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TASK [debug] *****************************************************************************************************</span><br><span class="line">ok: [localhost] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;always2&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************</span><br><span class="line">localhost                  : ok=4    changed=0    unreachable=0    failed=0    skipped=0    rescued=1    ignored=0</span><br></pre></td></tr></table></figure><p>block中的fail任务会失败，于是跳转到rescue中开始执行任务，然后再跳转到always中执行任务。</p><p>如果注释掉block中的fail模块任务，则block中没有任务失败，于是rescue中的任务不会执行，但是在执行完block中所有任务后会跳转到always中继续执行任务。</p><h1 id="处理连接失败-unreachable-的异常"><a href="#处理连接失败-unreachable-的异常" class="headerlink" title="处理连接失败(unreachable)的异常"></a>处理连接失败(unreachable)的异常</h1><p>如果Ansible突然和某个节点无法连接上，会将此节点设置为UNREACHABLE状态，并从活动节点列表(<code>play_hosts</code>)中删除。</p><p>如果想要忽略连接失败的节点，可设置<code>ignore_unreachable: true</code>指令，该指令是Ansible 2.7添加的，可设置在play、Role、block、task级别上。</p><p>当Ansible遇到UNREACHABLE时，会进行连接重试。重试次数可在Ansible配置文件中配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@slions_pc1 ansible_poc]# cat /etc/ansible/ansible.cfg |grep -w retries</span><br><span class="line"><span class="meta">#</span><span class="bash">retries = 3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在日常使用ansible的过程中会发现，执行shell或command模块时，Ansible只认为0退出状态码是正确的，其它所有退出状态码都是失败的，但我们自己知道非0退出状态码并非一定代表着失败。&lt;/p&gt;
&lt;p&gt;比如下例：&lt;/p&gt;
&lt;figure class=&quot;highl</summary>
      
    
    
    
    <category term="ansible回炉" scheme="https://slions.github.io/categories/ansible%E5%9B%9E%E7%82%89/"/>
    
    
    <category term="ansible" scheme="https://slions.github.io/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>（九）ansible流程控制</title>
    <link href="https://slions.github.io/2021/12/01/%EF%BC%88%E4%B9%9D%EF%BC%89ansible%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>https://slions.github.io/2021/12/01/%EF%BC%88%E4%B9%9D%EF%BC%89ansible%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</id>
    <published>2021-12-01T12:27:28.000Z</published>
    <updated>2021-12-02T07:44:56.420Z</updated>
    
    <content type="html"><![CDATA[<p>流程控制是每种编程语言控制逻辑走向和执行次序的重要部分，流程控制可以说是一门语言的“经脉”。</p><h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><p>ansible提供的条件判断只有when指令，因为可以写Jinja2条件判断表达式，所以判断方式比较灵活。</p><h2 id="同时满足多个条件"><a href="#同时满足多个条件" class="headerlink" title="同时满足多个条件"></a>同时满足多个条件</h2><p>常见的编程语言在多条件判断时要么使用逻辑与（<code>and</code>或<code>&amp;&amp;</code>）,要么使用逻辑或（<code>or</code>或<code>||</code>）。ansible同样支持这种写法。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">when:</span> <span class="string">age</span> <span class="string">&gt;</span> <span class="number">18</span> <span class="string">and</span> <span class="string">age</span> <span class="string">&lt;</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><p>也可以将这些条件以列表的方式提供。例如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">item</span></span><br><span class="line">      <span class="attr">when:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">item</span> <span class="string">&gt;</span> <span class="number">3</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">item</span> <span class="string">&lt;</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">loop:</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><h2 id="按条件导入文件"><a href="#按条件导入文件" class="headerlink" title="按条件导入文件"></a>按条件导入文件</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">yes</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">include_tasks:</span> <span class="string">RedHat.yml</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_os_family</span> <span class="string">==</span> <span class="string">&quot;RedHat&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">include_tasks:</span> <span class="string">Centos.yml</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_os_family</span> <span class="string">==</span> <span class="string">&quot;Centos&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更加精炼的写法可以参考</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">yes</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">include_tasks:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;ansible_os_family&#125;&#125;</span>.yml&quot;</span></span><br></pre></td></tr></table></figure><h2 id="when和循环"><a href="#when和循环" class="headerlink" title="when和循环"></a>when和循环</h2><p>当when指令和循环指令一起使用时，when的判断操作在每轮循环内执行。详细内容下文中描述。</p><h1 id="循环迭代"><a href="#循环迭代" class="headerlink" title="循环迭代"></a>循环迭代</h1><blockquote><p>ansible 2.5之前的循环迭代都使用<code>with_xxx</code>来完成，比如<code>with_items</code>,后面加入了<code>loop</code>指令，<code>loop</code>指令与<code>with_list</code>指令等价。</p><p><code>with_xxx</code>语法都使用对应的lookup插件来实现（比如<code>with_list</code>使用的是lookup的list插件），如果存在某lookup插件xxx，就可以使用<code>with_xxx</code>来迭代。</p></blockquote><h2 id="with-list"><a href="#with-list" class="headerlink" title="with_list"></a>with_list</h2><p>直接上例子：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">file:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">touch</span></span><br><span class="line">      <span class="attr">with_list:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">aaa</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">bbb</span></span><br></pre></td></tr></table></figure><p>与上面<code>with_list</code>等价的loop语法：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">touch</span></span><br><span class="line">  <span class="attr">loop:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">aaa</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bbb</span></span><br></pre></td></tr></table></figure><h2 id="with-items和with-flattened"><a href="#with-items和with-flattened" class="headerlink" title="with_items和with_flattened"></a>with_items和with_flattened</h2><p>with_list用于迭代简单列表，有时候列表中会嵌套列表。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">name:</span> [<span class="string">a</span>,[<span class="string">b1</span>,<span class="string">b2</span>],<span class="string">c</span>]</span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">with_items:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;name&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>注意，<code>with_items</code>只压平嵌套列表的第一层，不会递归压平第二层、第三层…</p><p>与with_items等价的loop指令的写法为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; nested_list | flatten(levels=1) &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>筛选器函数flatten()默认会递归压平所有嵌套列表，如果只是压平第一层，需指定参数levels=1。</p><p>此外，还存在lookup插件：items、flattened，前者只压第一层，后者递归压平所有嵌套层次。例如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">name:</span> [<span class="string">a</span>,[<span class="string">b1</span>,<span class="string">b2</span>],<span class="string">c</span>,[<span class="string">d1</span>,<span class="string">d2</span>,[<span class="string">e1</span>,<span class="string">e2</span>,<span class="string">e3</span>]]]</span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">with_flattened:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;name&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="with-dict"><a href="#with-dict" class="headerlink" title="with_dict"></a>with_dict</h2><p><code>with_dict</code>用于迭代一个字典结构，迭代时可以使用<code>item.key</code>表示每个字典元素的key，<code>item.value</code>表示每个字典元素的value。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">      <span class="attr">slions:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">slions</span></span><br><span class="line">        <span class="attr">age:</span> <span class="number">29</span></span><br><span class="line">      <span class="attr">zhangsan:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">        <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;who: <span class="template-variable">&#123;&#123;item.key&#125;&#125;</span></span></span><br><span class="line"><span class="string">              name: <span class="template-variable">&#123;&#123;item.value.name&#125;&#125;</span></span></span><br><span class="line"><span class="string">              age: <span class="template-variable">&#123;&#123;item.value.age&#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">with_dict:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;users&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>与<code>with_dict</code>等价的loop指令有两种写法：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;lookup(&#x27;dict&#x27;, users)&#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;users | dict2items&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>另外，在Ansible 2.8中可以自定义<code>dict2items</code>筛选器函数得到的key和value的名称。例如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">      <span class="attr">slions:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">slions</span></span><br><span class="line">        <span class="attr">age:</span> <span class="number">29</span></span><br><span class="line">      <span class="attr">zhangsan:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">        <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;who: <span class="template-variable">&#123;&#123;item.k&#125;&#125;</span></span></span><br><span class="line"><span class="string">              name: <span class="template-variable">&#123;&#123;item.v.name&#125;&#125;</span></span></span><br><span class="line"><span class="string">              age: <span class="template-variable">&#123;&#123;item.v.age&#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;users|dict2items(key_name=&#x27;k&#x27;,value_name=&#x27;v&#x27;)&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="with-sequence"><a href="#with-sequence" class="headerlink" title="with_sequence"></a>with_sequence</h2><p>Ansible的lookup插件sequence也可以用来生成连续数(Jinja2的range也可以生成连续数)。其中：</p><ul><li>start参数指定序列的起始数，不指定该参数时默认从1开始</li><li>end参数指定序列的终止数</li><li>stride参数指定序列的步进值。不指定该参数时，步进为1</li><li>format参数指定序列的输出格式，遵循printf风格</li><li>count参数指定生成序列数的个数，不能和end参数共存</li></ul><p>此外，sequence插件的各个参数可以简写为如下格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[start-]end[/stride][:format]</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tasks:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;_<span class="template-variable">&#123;&#123;item&#125;&#125;</span>_&quot;</span></span><br><span class="line">      <span class="attr">with_sequence:</span> <span class="string">start=0</span> <span class="string">end=5</span> <span class="string">stride=2</span> <span class="string">format=a%02d</span></span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PLAY [localhost] *********************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [debug] *************************************************************************************************</span><br><span class="line">ok: [localhost] =&gt; (item=a00) =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;_a00_&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=a02) =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;_a02_&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=a04) =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;_a04_&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP ***************************************************************************************************</span><br><span class="line">localhost                  : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span><br></pre></td></tr></table></figure><p>也可简写为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">with_sequence:</span> <span class="number">0</span><span class="number">-5</span><span class="string">/2:a%02d</span></span><br></pre></td></tr></table></figure><p>因为生成的每个序列数都会经过字符串格式化，所以得到的每个序列元素都是字符串。如果想要转换成数值，需使用Jinja2的Filter。例如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tasks:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;1 + item|int&#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">with_sequence:</span> <span class="string">start=0</span> <span class="string">end=3</span></span><br></pre></td></tr></table></figure><p>与with_sequence等价的loop写法为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">    <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; &#x27;a%02d&#x27; | format(item) &#125;&#125;</span>&quot;</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; range(0, 5, 2)|list &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>Jinja2的range()也可以生成序列数。语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">range(start,end,step)</span><br></pre></td></tr></table></figure><p>注意range()不包含结尾数end。</p><h2 id="with-fileglob"><a href="#with-fileglob" class="headerlink" title="with_fileglob"></a>with_fileglob</h2><p><code>with_fileglob</code>用于迭代通配到的每个文件名。</p><p>例如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">copy:</span> </span><br><span class="line">        <span class="attr">src:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;item&#125;&#125;</span>&quot;</span> </span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/tmp/</span></span><br><span class="line">      <span class="attr">with_fileglob:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/etc/m*.conf</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/etc/*.cnf</span></span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PLAY [localhost] *********************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [copy] **************************************************************************************************</span><br><span class="line">changed: [localhost] =&gt; (item=/etc/man_db.conf)</span><br><span class="line">changed: [localhost] =&gt; (item=/etc/mke2fs.conf)</span><br><span class="line">changed: [localhost] =&gt; (item=/etc/my.cnf)</span><br><span class="line"></span><br><span class="line">PLAY RECAP ***************************************************************************************************</span><br><span class="line">localhost                  : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span><br></pre></td></tr></table></figure><h2 id="with-lines"><a href="#with-lines" class="headerlink" title="with_lines"></a>with_lines</h2><p><code>with_lines</code>用于迭代命令输出结果的每一行。</p><p>这功能也是非常实用的，如下示例：find找出一堆文件，然后进行操作(比如copy)。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tasks:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">copy:</span> </span><br><span class="line">        <span class="attr">src:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;item&#125;&#125;</span>&quot;</span> </span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/home/myscript/</span></span><br><span class="line">      <span class="attr">with_lines:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">find</span> <span class="string">~</span> <span class="string">-maxdepth</span> <span class="number">1</span> <span class="string">-type</span> <span class="string">f</span> <span class="string">-name</span> <span class="string">&quot;*.sh&quot;</span></span><br></pre></td></tr></table></figure><h2 id="循环和when"><a href="#循环和when" class="headerlink" title="循环和when"></a>循环和when</h2><p>当<code>with_xxx</code>或<code>loop</code>指令和<code>when</code>指令一起使用时，<code>when</code>将在循环的内部进行条件判断。也就是说，when决定每轮迭代时是否执行一个任务，而不是决定整个循环是否进行。</p><h2 id="循环和register"><a href="#循环和register" class="headerlink" title="循环和register"></a>循环和register</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">vars:</span> </span><br><span class="line">    <span class="attr">mylist:</span> [<span class="number">11</span>, <span class="number">22</span>]</span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">item</span></span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; mylist &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">res</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span> </span><br><span class="line">        <span class="attr">var:</span> <span class="string">res</span></span><br></pre></td></tr></table></figure><p>其中第二个debug任务的执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ok: [localhost] =&gt; &#123;</span><br><span class="line">  &quot;res&quot;: &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;msg&quot;: &quot;All items completed&quot;,</span><br><span class="line">    &quot;results&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;ansible_loop_var&quot;: &quot;item&quot;,</span><br><span class="line">        &quot;changed&quot;: false,</span><br><span class="line">        &quot;failed&quot;: false,</span><br><span class="line">        &quot;item&quot;: 11</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;ansible_loop_var&quot;: &quot;item&quot;,</span><br><span class="line">        &quot;changed&quot;: false,</span><br><span class="line">        &quot;failed&quot;: false,</span><br><span class="line">        &quot;item&quot;: 22</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来一个shell模块的示例：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">vars:</span> </span><br><span class="line">    <span class="attr">mylist:</span> [<span class="number">11</span>,<span class="number">22</span>]</span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">shell:</span> <span class="string">echo</span> &#123;&#123;<span class="string">item</span>&#125;&#125;</span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; mylist &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">res</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span> </span><br><span class="line">        <span class="attr">var:</span> <span class="string">res</span></span><br></pre></td></tr></table></figure><p>其中第二个任务的执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">ok: [localhost] =&gt; &#123;</span><br><span class="line">  &quot;res&quot;: &#123;</span><br><span class="line">    &quot;changed&quot;: true,</span><br><span class="line">    &quot;msg&quot;: &quot;All items completed&quot;,</span><br><span class="line">    &quot;results&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;ansible_loop_var&quot;: &quot;item&quot;,</span><br><span class="line">        &quot;changed&quot;: true,</span><br><span class="line">        &quot;cmd&quot;: &quot;echo 11&quot;,</span><br><span class="line">        &quot;delta&quot;: &quot;0:00:00.001643&quot;,</span><br><span class="line">        &quot;end&quot;: &quot;2021-12-02 11:40:05.012729&quot;,</span><br><span class="line">        &quot;failed&quot;: false,</span><br><span class="line">        &quot;invocation&quot;: &#123;</span><br><span class="line">          &quot;module_args&quot;: &#123;</span><br><span class="line">            ......</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;item&quot;: 11,</span><br><span class="line">        &quot;rc&quot;: 0,</span><br><span class="line">        &quot;start&quot;: &quot;2021-12-02 11:40:05.011086&quot;,</span><br><span class="line">        &quot;stderr&quot;: &quot;&quot;,</span><br><span class="line">        &quot;stderr_lines&quot;: [],</span><br><span class="line">        &quot;stdout&quot;: &quot;11&quot;,</span><br><span class="line">        &quot;stdout_lines&quot;: [</span><br><span class="line">          &quot;11&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;ansible_loop_var&quot;: &quot;item&quot;,</span><br><span class="line">        ......</span><br><span class="line">        &quot;stdout&quot;: &quot;22&quot;,</span><br><span class="line">        &quot;stdout_lines&quot;: [</span><br><span class="line">          &quot;22&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可见，当register和循环指令结合时，会将每轮迭代的模块执行结果以一个字典的方式追加在一个名为results的列表中。即：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;res&quot;: &#123;</span><br><span class="line">  &quot;changed&quot;: true,</span><br><span class="line">  &quot;msg&quot;: &quot;All items completed&quot;,</span><br><span class="line">  &quot;results&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      ...第一轮迭代模块返回值...</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      ...第二轮迭代模块返回值...</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，可使用<code>res.results</code>来访问每轮的迭代结果。例如，再次迭代遍历这些结果：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">vars:</span> </span><br><span class="line">    <span class="attr">mylist:</span> [<span class="number">11</span>,<span class="number">22</span>]</span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">shell:</span> <span class="string">echo</span> &#123;&#123;<span class="string">item</span>&#125;&#125;</span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; mylist &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">res</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span> </span><br><span class="line">        <span class="attr">var:</span> <span class="string">item.stdout</span></span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;res.results&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><p>循环控制功能需要在使用循环的时候使用<code>loop_control</code>指令，该指令有一些参数，每种参数都是一个控制开关。</p><h3 id="label参数"><a href="#label参数" class="headerlink" title="label参数"></a>label参数</h3><p>循环迭代时，每轮迭代过程中都会将当前的item输出(要么输出到屏幕，要么输出到日志)。如果所迭代的每项的内容(即每个item)很短，这倒无所谓，但如果item的内容很长，则可读性比较差。</p><p>示例：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">vars:</span> </span><br><span class="line">    <span class="attr">mylist:</span> [<span class="number">11</span>,<span class="number">22</span>]</span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">shell:</span> <span class="string">echo</span> &#123;&#123;<span class="string">item</span>&#125;&#125;</span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; mylist &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">res</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span> </span><br><span class="line">        <span class="attr">var:</span> <span class="string">item.stdout</span></span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;res.results&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">TASK [debug] *****************************************************************************************************</span><br><span class="line">ok: [localhost] =&gt; (item=&#123;u&#x27;stderr_lines&#x27;: [], u&#x27;ansible_loop_var&#x27;: u&#x27;item&#x27;, u&#x27;end&#x27;: u&#x27;2021-12-02 11:57:33.161219&#x27;, u&#x27;stderr&#x27;: u&#x27;&#x27;, u&#x27;stdout&#x27;: u&#x27;11&#x27;, u&#x27;changed&#x27;: True, u&#x27;failed&#x27;: False, u&#x27;delta&#x27;: u&#x27;0:00:00.040706&#x27;, u&#x27;cmd&#x27;: u&#x27;echo 11&#x27;, u&#x27;item&#x27;: 11, u&#x27;rc&#x27;: 0, u&#x27;invocation&#x27;: &#123;u&#x27;module_args&#x27;: &#123;u&#x27;warn&#x27;: False, u&#x27;executable&#x27;: None, u&#x27;_uses_shell&#x27;: True, u&#x27;strip_empty_ends&#x27;: True, u&#x27;_raw_params&#x27;: u&#x27;echo 11&#x27;, u&#x27;removes&#x27;: None, u&#x27;argv&#x27;: None, u&#x27;creates&#x27;: None, u&#x27;chdir&#x27;: None, u&#x27;stdin_add_newline&#x27;: True, u&#x27;stdin&#x27;: None&#125;&#125;, u&#x27;stdout_lines&#x27;: [u&#x27;11&#x27;], u&#x27;start&#x27;: u&#x27;2021-12-02 11:57:33.120513&#x27;&#125;) =&gt; &#123;</span><br><span class="line">    &quot;ansible_loop_var&quot;: &quot;item&quot;,</span><br><span class="line">    &quot;item&quot;: &#123;</span><br><span class="line">        &quot;ansible_loop_var&quot;: &quot;item&quot;,</span><br><span class="line">        &quot;changed&quot;: true,</span><br><span class="line">        &quot;cmd&quot;: &quot;echo 11&quot;,</span><br><span class="line">        &quot;delta&quot;: &quot;0:00:00.040706&quot;,</span><br><span class="line">        &quot;end&quot;: &quot;2021-12-02 11:57:33.161219&quot;,</span><br><span class="line">        &quot;failed&quot;: false,</span><br><span class="line">        &quot;invocation&quot;: &#123;</span><br><span class="line">            &quot;module_args&quot;: &#123;</span><br><span class="line">                &quot;_raw_params&quot;: &quot;echo 11&quot;,</span><br><span class="line">                &quot;_uses_shell&quot;: true,</span><br><span class="line">                &quot;argv&quot;: null,</span><br><span class="line">                &quot;chdir&quot;: null,</span><br><span class="line">                &quot;creates&quot;: null,</span><br><span class="line">                &quot;executable&quot;: null,</span><br><span class="line">                &quot;removes&quot;: null,</span><br><span class="line">                &quot;stdin&quot;: null,</span><br><span class="line">                &quot;stdin_add_newline&quot;: true,</span><br><span class="line">                &quot;strip_empty_ends&quot;: true,</span><br><span class="line">                &quot;warn&quot;: false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;item&quot;: 11,</span><br><span class="line">        &quot;rc&quot;: 0,</span><br><span class="line">        &quot;start&quot;: &quot;2021-12-02 11:57:33.120513&quot;,</span><br><span class="line">        &quot;stderr&quot;: &quot;&quot;,</span><br><span class="line">        &quot;stderr_lines&quot;: [],</span><br><span class="line">        &quot;stdout&quot;: &quot;11&quot;,</span><br><span class="line">        &quot;stdout_lines&quot;: [</span><br><span class="line">            &quot;11&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;item.stdout&quot;: &quot;11&quot;</span><br></pre></td></tr></table></figure><p>使用label参数可以自定义迭代时显示的内容来替代默认显示的item。例如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">mylist:</span> [<span class="number">11</span>,<span class="number">22</span>]</span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">shell:</span> <span class="string">echo</span> &#123;&#123;<span class="string">item</span>&#125;&#125;</span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; mylist &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">res</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">item.stdout</span></span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;res.results&#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">loop_control:</span></span><br><span class="line">        <span class="attr">label:</span> <span class="string">&quot;this is test play&quot;</span></span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">TASK [debug] *****************************************************************************************************</span><br><span class="line">ok: [localhost] =&gt; (item=this is test play) =&gt; &#123;</span><br><span class="line">    &quot;ansible_loop_var&quot;: &quot;item&quot;,</span><br><span class="line">    &quot;item&quot;: &#123;</span><br><span class="line">        &quot;ansible_loop_var&quot;: &quot;item&quot;,</span><br><span class="line">        &quot;changed&quot;: true,</span><br><span class="line">        &quot;cmd&quot;: &quot;echo 11&quot;,</span><br><span class="line">        &quot;delta&quot;: &quot;0:00:00.034184&quot;,</span><br><span class="line">        &quot;end&quot;: &quot;2021-12-02 12:21:47.385021&quot;,</span><br><span class="line">        &quot;failed&quot;: false,</span><br><span class="line">        &quot;invocation&quot;: &#123;</span><br><span class="line">            &quot;module_args&quot;: &#123;</span><br><span class="line">                &quot;_raw_params&quot;: &quot;echo 11&quot;,</span><br><span class="line">                &quot;_uses_shell&quot;: true,</span><br><span class="line">                &quot;argv&quot;: null,</span><br><span class="line">                &quot;chdir&quot;: null,</span><br><span class="line">                &quot;creates&quot;: null,</span><br><span class="line">                &quot;executable&quot;: null,</span><br><span class="line">                &quot;removes&quot;: null,</span><br><span class="line">                &quot;stdin&quot;: null,</span><br><span class="line">                &quot;stdin_add_newline&quot;: true,</span><br><span class="line">                &quot;strip_empty_ends&quot;: true,</span><br><span class="line">                &quot;warn&quot;: false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;item&quot;: 11,</span><br><span class="line">        &quot;rc&quot;: 0,</span><br><span class="line">        &quot;start&quot;: &quot;2021-12-02 12:21:47.350837&quot;,</span><br><span class="line">        &quot;stderr&quot;: &quot;&quot;,</span><br><span class="line">        &quot;stderr_lines&quot;: [],</span><br><span class="line">        &quot;stdout&quot;: &quot;11&quot;,</span><br><span class="line">        &quot;stdout_lines&quot;: [</span><br><span class="line">            &quot;11&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;item.stdout&quot;: &quot;11&quot;</span><br></pre></td></tr></table></figure><h3 id="pause参数"><a href="#pause参数" class="headerlink" title="pause参数"></a>pause参数</h3><p><code>loop_control</code>的<code>pause</code>参数可以控制每轮迭代之间的时间间隔。</p><p>以下示例表示第一轮迭代后，等待一秒，再进入第二轮迭代。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">vars:</span> </span><br><span class="line">    <span class="attr">mylist:</span> [<span class="number">11</span>,<span class="number">22</span>]</span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span> </span><br><span class="line">        <span class="attr">var:</span> <span class="string">item</span></span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;mylist&#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">loop_control:</span></span><br><span class="line">        <span class="attr">pause:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="index-var参数"><a href="#index-var参数" class="headerlink" title="index_var参数"></a>index_var参数</h3><p><code>index_var</code>参数可以指定一个变量，这个变量可以记录每轮循环迭代过程中的索引位，也即表示当前是第几轮迭代。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">vars:</span> </span><br><span class="line">    <span class="attr">mylist:</span> [<span class="number">11</span>,<span class="number">22</span>]</span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span> </span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;index: <span class="template-variable">&#123;&#123;idx&#125;&#125;</span>, value: <span class="template-variable">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;mylist&#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">loop_control:</span></span><br><span class="line">        <span class="attr">index_var:</span> <span class="string">idx</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ok: [localhost] =&gt; (item=11) =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;index: 0, value: 11&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=22) =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;index: 1, value: 22&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>index_var</code>，可以进行一些条件判断。比如只在第一轮循环时执行某任务：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">vars:</span> </span><br><span class="line">    <span class="attr">mylist:</span> [<span class="number">11</span>,<span class="number">22</span>]</span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span> </span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;index: <span class="template-variable">&#123;&#123;idx&#125;&#125;</span>, value: <span class="template-variable">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">idx</span> <span class="string">==</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;mylist&#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">loop_control:</span></span><br><span class="line">        <span class="attr">index_var:</span> <span class="string">idx</span></span><br></pre></td></tr></table></figure><h1 id="其他流程控制"><a href="#其他流程控制" class="headerlink" title="其他流程控制"></a>其他流程控制</h1><h2 id="pause模块"><a href="#pause模块" class="headerlink" title="pause模块"></a>pause模块</h2><p>Ansible中，可以使用<code>pause</code>模块或<code>wait_for</code>模块来实现睡眠等待的功能，先简单演示pause模块的用法。</p><p>pause可以等待几分钟、几秒钟、等待交互式输入确定。</p><p>例如，先睡眠10秒，再执行debug任务：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">pause:</span></span><br><span class="line">        <span class="attr">seconds:</span> <span class="number">10</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span> </span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><p>睡眠1分钟：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">pause:</span> </span><br><span class="line">    <span class="attr">minutes:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>交互式输入Enter键确认：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">pause:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span> </span><br><span class="line">      <span class="attr">msg:</span> <span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><p>带提醒的交互式输入：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">pause:</span></span><br><span class="line">    <span class="attr">prompt:</span> <span class="string">&quot;输入你的用户名!&quot;</span></span><br></pre></td></tr></table></figure><p>隐藏用户的输入：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">pause:</span></span><br><span class="line">    <span class="attr">prompt:</span> <span class="string">&quot;输入你的用户名&quot;</span></span><br><span class="line">    <span class="attr">echo:</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure><p>将用户交互式输入内容注册成变量：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">pause:</span></span><br><span class="line">        <span class="attr">prompt:</span> <span class="string">&quot;输入用户密码&quot;</span></span><br><span class="line">        <span class="attr">echo:</span> <span class="literal">no</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">passwd</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span> </span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;passwd.user_input&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="wait-for模块"><a href="#wait-for模块" class="headerlink" title="wait_for模块"></a>wait_for模块</h2><p><code>wait_for</code>模块可以等待多种事件的发生，常用的功能有：</p><ol><li>等待端口打开和端口关闭</li><li>等待没有活动连接(在等待移除某个负载均衡节点时可能会有用)\</li><li>等待文件被创建或移除</li><li>等待或睡眠指定秒数</li><li>等待系统重启(即等待SSH连接重新建立)</li><li>等待文件中出现某个字符串</li><li>等待进程退出</li></ol><p>常见用法：</p><p>睡眠几秒后，任务继续。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 休眠五秒，然后任务继续</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">wait_for:</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p>等待文件存在后，任务继续。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">wait_for:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/tmp/a.log</span></span><br><span class="line">    <span class="attr">deley:</span> <span class="number">3</span>     <span class="comment"># 3秒后才开始进入第一轮事件等待检查(默认值为0)</span></span><br><span class="line">    <span class="attr">sleep:</span> <span class="number">1</span>     <span class="comment"># 每隔1秒进行一次事件等待检查(默认值为1)</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">20</span>  <span class="comment"># 最多等待20秒(默认值为300)，如果20秒内未等待到事件发生，则wait_for任务失败并报错</span></span><br></pre></td></tr></table></figure><p>等待文件不存在后，任务继续。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">wait_for:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/tmp/a.log</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">absent</span></span><br></pre></td></tr></table></figure><p>等待进程不存在后，任务继续。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">pids:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">&quot;sleep&quot;</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">sleep_pids</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">wait_for:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;/proc/<span class="template-variable">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;sleep_pids.pids&#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span> </span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure><p>pids模块可以根据进程名获取进程PID列表(可能是空列表、单元素列表、多元素列表)。</p><blockquote><p>注意该模块要求先安装python的psutil模块，所以如果要使用pids，可执行：</p><p>$ yum install python3-devel<br>$ pip3 install psutil</p></blockquote><p>等待文件中出现某字符串后，任务继续。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">wait_for:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/tmp/a.log</span></span><br><span class="line">    <span class="attr">search_regex:</span> <span class="string">completed|finished</span></span><br></pre></td></tr></table></figure><p>等待某端口打开，然后任务继续。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">wait_for:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line">    <span class="attr">delay:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">loop:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">10251</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">10252</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">2379</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">6443</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">8443</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;流程控制是每种编程语言控制逻辑走向和执行次序的重要部分，流程控制可以说是一门语言的“经脉”。&lt;/p&gt;
&lt;h1 id=&quot;条件判断&quot;&gt;&lt;a href=&quot;#条件判断&quot; class=&quot;headerlink&quot; title=&quot;条件判断&quot;&gt;&lt;/a&gt;条件判断&lt;/h1&gt;&lt;p&gt;ansible提</summary>
      
    
    
    
    <category term="ansible回炉" scheme="https://slions.github.io/categories/ansible%E5%9B%9E%E7%82%89/"/>
    
    
    <category term="ansible" scheme="https://slions.github.io/tags/ansible/"/>
    
  </entry>
  
</feed>
